
Question2_Project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007370  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000060  080074f8  080074f8  000174f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007558  08007558  000200fc  2**0
                  CONTENTS
  4 .ARM          00000008  08007558  08007558  00017558  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007560  08007560  000200fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007560  08007560  00017560  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007564  08007564  00017564  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000fc  20000000  08007568  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000200fc  2**0
                  CONTENTS
 10 .bss          00001d20  200000fc  200000fc  000200fc  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20001e1c  20001e1c  000200fc  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000200fc  2**0
                  CONTENTS, READONLY
 13 .debug_info   00012e6e  00000000  00000000  0002012c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002ec9  00000000  00000000  00032f9a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001098  00000000  00000000  00035e68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000f40  00000000  00000000  00036f00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000239c9  00000000  00000000  00037e40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00014223  00000000  00000000  0005b809  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cc657  00000000  00000000  0006fa2c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0013c083  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000453c  00000000  00000000  0013c0d4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	200000fc 	.word	0x200000fc
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080074e0 	.word	0x080074e0

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000100 	.word	0x20000100
 80001c4:	080074e0 	.word	0x080074e0

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b974 	b.w	80004c8 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468e      	mov	lr, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	d14d      	bne.n	80002a2 <__udivmoddi4+0xaa>
 8000206:	428a      	cmp	r2, r1
 8000208:	4694      	mov	ip, r2
 800020a:	d969      	bls.n	80002e0 <__udivmoddi4+0xe8>
 800020c:	fab2 f282 	clz	r2, r2
 8000210:	b152      	cbz	r2, 8000228 <__udivmoddi4+0x30>
 8000212:	fa01 f302 	lsl.w	r3, r1, r2
 8000216:	f1c2 0120 	rsb	r1, r2, #32
 800021a:	fa20 f101 	lsr.w	r1, r0, r1
 800021e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000222:	ea41 0e03 	orr.w	lr, r1, r3
 8000226:	4094      	lsls	r4, r2
 8000228:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800022c:	0c21      	lsrs	r1, r4, #16
 800022e:	fbbe f6f8 	udiv	r6, lr, r8
 8000232:	fa1f f78c 	uxth.w	r7, ip
 8000236:	fb08 e316 	mls	r3, r8, r6, lr
 800023a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800023e:	fb06 f107 	mul.w	r1, r6, r7
 8000242:	4299      	cmp	r1, r3
 8000244:	d90a      	bls.n	800025c <__udivmoddi4+0x64>
 8000246:	eb1c 0303 	adds.w	r3, ip, r3
 800024a:	f106 30ff 	add.w	r0, r6, #4294967295
 800024e:	f080 811f 	bcs.w	8000490 <__udivmoddi4+0x298>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 811c 	bls.w	8000490 <__udivmoddi4+0x298>
 8000258:	3e02      	subs	r6, #2
 800025a:	4463      	add	r3, ip
 800025c:	1a5b      	subs	r3, r3, r1
 800025e:	b2a4      	uxth	r4, r4
 8000260:	fbb3 f0f8 	udiv	r0, r3, r8
 8000264:	fb08 3310 	mls	r3, r8, r0, r3
 8000268:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800026c:	fb00 f707 	mul.w	r7, r0, r7
 8000270:	42a7      	cmp	r7, r4
 8000272:	d90a      	bls.n	800028a <__udivmoddi4+0x92>
 8000274:	eb1c 0404 	adds.w	r4, ip, r4
 8000278:	f100 33ff 	add.w	r3, r0, #4294967295
 800027c:	f080 810a 	bcs.w	8000494 <__udivmoddi4+0x29c>
 8000280:	42a7      	cmp	r7, r4
 8000282:	f240 8107 	bls.w	8000494 <__udivmoddi4+0x29c>
 8000286:	4464      	add	r4, ip
 8000288:	3802      	subs	r0, #2
 800028a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800028e:	1be4      	subs	r4, r4, r7
 8000290:	2600      	movs	r6, #0
 8000292:	b11d      	cbz	r5, 800029c <__udivmoddi4+0xa4>
 8000294:	40d4      	lsrs	r4, r2
 8000296:	2300      	movs	r3, #0
 8000298:	e9c5 4300 	strd	r4, r3, [r5]
 800029c:	4631      	mov	r1, r6
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d909      	bls.n	80002ba <__udivmoddi4+0xc2>
 80002a6:	2d00      	cmp	r5, #0
 80002a8:	f000 80ef 	beq.w	800048a <__udivmoddi4+0x292>
 80002ac:	2600      	movs	r6, #0
 80002ae:	e9c5 0100 	strd	r0, r1, [r5]
 80002b2:	4630      	mov	r0, r6
 80002b4:	4631      	mov	r1, r6
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	fab3 f683 	clz	r6, r3
 80002be:	2e00      	cmp	r6, #0
 80002c0:	d14a      	bne.n	8000358 <__udivmoddi4+0x160>
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d302      	bcc.n	80002cc <__udivmoddi4+0xd4>
 80002c6:	4282      	cmp	r2, r0
 80002c8:	f200 80f9 	bhi.w	80004be <__udivmoddi4+0x2c6>
 80002cc:	1a84      	subs	r4, r0, r2
 80002ce:	eb61 0303 	sbc.w	r3, r1, r3
 80002d2:	2001      	movs	r0, #1
 80002d4:	469e      	mov	lr, r3
 80002d6:	2d00      	cmp	r5, #0
 80002d8:	d0e0      	beq.n	800029c <__udivmoddi4+0xa4>
 80002da:	e9c5 4e00 	strd	r4, lr, [r5]
 80002de:	e7dd      	b.n	800029c <__udivmoddi4+0xa4>
 80002e0:	b902      	cbnz	r2, 80002e4 <__udivmoddi4+0xec>
 80002e2:	deff      	udf	#255	; 0xff
 80002e4:	fab2 f282 	clz	r2, r2
 80002e8:	2a00      	cmp	r2, #0
 80002ea:	f040 8092 	bne.w	8000412 <__udivmoddi4+0x21a>
 80002ee:	eba1 010c 	sub.w	r1, r1, ip
 80002f2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f6:	fa1f fe8c 	uxth.w	lr, ip
 80002fa:	2601      	movs	r6, #1
 80002fc:	0c20      	lsrs	r0, r4, #16
 80002fe:	fbb1 f3f7 	udiv	r3, r1, r7
 8000302:	fb07 1113 	mls	r1, r7, r3, r1
 8000306:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800030a:	fb0e f003 	mul.w	r0, lr, r3
 800030e:	4288      	cmp	r0, r1
 8000310:	d908      	bls.n	8000324 <__udivmoddi4+0x12c>
 8000312:	eb1c 0101 	adds.w	r1, ip, r1
 8000316:	f103 38ff 	add.w	r8, r3, #4294967295
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x12a>
 800031c:	4288      	cmp	r0, r1
 800031e:	f200 80cb 	bhi.w	80004b8 <__udivmoddi4+0x2c0>
 8000322:	4643      	mov	r3, r8
 8000324:	1a09      	subs	r1, r1, r0
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb1 f0f7 	udiv	r0, r1, r7
 800032c:	fb07 1110 	mls	r1, r7, r0, r1
 8000330:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000334:	fb0e fe00 	mul.w	lr, lr, r0
 8000338:	45a6      	cmp	lr, r4
 800033a:	d908      	bls.n	800034e <__udivmoddi4+0x156>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 31ff 	add.w	r1, r0, #4294967295
 8000344:	d202      	bcs.n	800034c <__udivmoddi4+0x154>
 8000346:	45a6      	cmp	lr, r4
 8000348:	f200 80bb 	bhi.w	80004c2 <__udivmoddi4+0x2ca>
 800034c:	4608      	mov	r0, r1
 800034e:	eba4 040e 	sub.w	r4, r4, lr
 8000352:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000356:	e79c      	b.n	8000292 <__udivmoddi4+0x9a>
 8000358:	f1c6 0720 	rsb	r7, r6, #32
 800035c:	40b3      	lsls	r3, r6
 800035e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000362:	ea4c 0c03 	orr.w	ip, ip, r3
 8000366:	fa20 f407 	lsr.w	r4, r0, r7
 800036a:	fa01 f306 	lsl.w	r3, r1, r6
 800036e:	431c      	orrs	r4, r3
 8000370:	40f9      	lsrs	r1, r7
 8000372:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000376:	fa00 f306 	lsl.w	r3, r0, r6
 800037a:	fbb1 f8f9 	udiv	r8, r1, r9
 800037e:	0c20      	lsrs	r0, r4, #16
 8000380:	fa1f fe8c 	uxth.w	lr, ip
 8000384:	fb09 1118 	mls	r1, r9, r8, r1
 8000388:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800038c:	fb08 f00e 	mul.w	r0, r8, lr
 8000390:	4288      	cmp	r0, r1
 8000392:	fa02 f206 	lsl.w	r2, r2, r6
 8000396:	d90b      	bls.n	80003b0 <__udivmoddi4+0x1b8>
 8000398:	eb1c 0101 	adds.w	r1, ip, r1
 800039c:	f108 3aff 	add.w	sl, r8, #4294967295
 80003a0:	f080 8088 	bcs.w	80004b4 <__udivmoddi4+0x2bc>
 80003a4:	4288      	cmp	r0, r1
 80003a6:	f240 8085 	bls.w	80004b4 <__udivmoddi4+0x2bc>
 80003aa:	f1a8 0802 	sub.w	r8, r8, #2
 80003ae:	4461      	add	r1, ip
 80003b0:	1a09      	subs	r1, r1, r0
 80003b2:	b2a4      	uxth	r4, r4
 80003b4:	fbb1 f0f9 	udiv	r0, r1, r9
 80003b8:	fb09 1110 	mls	r1, r9, r0, r1
 80003bc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003c0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003c4:	458e      	cmp	lr, r1
 80003c6:	d908      	bls.n	80003da <__udivmoddi4+0x1e2>
 80003c8:	eb1c 0101 	adds.w	r1, ip, r1
 80003cc:	f100 34ff 	add.w	r4, r0, #4294967295
 80003d0:	d26c      	bcs.n	80004ac <__udivmoddi4+0x2b4>
 80003d2:	458e      	cmp	lr, r1
 80003d4:	d96a      	bls.n	80004ac <__udivmoddi4+0x2b4>
 80003d6:	3802      	subs	r0, #2
 80003d8:	4461      	add	r1, ip
 80003da:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003de:	fba0 9402 	umull	r9, r4, r0, r2
 80003e2:	eba1 010e 	sub.w	r1, r1, lr
 80003e6:	42a1      	cmp	r1, r4
 80003e8:	46c8      	mov	r8, r9
 80003ea:	46a6      	mov	lr, r4
 80003ec:	d356      	bcc.n	800049c <__udivmoddi4+0x2a4>
 80003ee:	d053      	beq.n	8000498 <__udivmoddi4+0x2a0>
 80003f0:	b15d      	cbz	r5, 800040a <__udivmoddi4+0x212>
 80003f2:	ebb3 0208 	subs.w	r2, r3, r8
 80003f6:	eb61 010e 	sbc.w	r1, r1, lr
 80003fa:	fa01 f707 	lsl.w	r7, r1, r7
 80003fe:	fa22 f306 	lsr.w	r3, r2, r6
 8000402:	40f1      	lsrs	r1, r6
 8000404:	431f      	orrs	r7, r3
 8000406:	e9c5 7100 	strd	r7, r1, [r5]
 800040a:	2600      	movs	r6, #0
 800040c:	4631      	mov	r1, r6
 800040e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000412:	f1c2 0320 	rsb	r3, r2, #32
 8000416:	40d8      	lsrs	r0, r3
 8000418:	fa0c fc02 	lsl.w	ip, ip, r2
 800041c:	fa21 f303 	lsr.w	r3, r1, r3
 8000420:	4091      	lsls	r1, r2
 8000422:	4301      	orrs	r1, r0
 8000424:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000430:	fb07 3610 	mls	r6, r7, r0, r3
 8000434:	0c0b      	lsrs	r3, r1, #16
 8000436:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800043a:	fb00 f60e 	mul.w	r6, r0, lr
 800043e:	429e      	cmp	r6, r3
 8000440:	fa04 f402 	lsl.w	r4, r4, r2
 8000444:	d908      	bls.n	8000458 <__udivmoddi4+0x260>
 8000446:	eb1c 0303 	adds.w	r3, ip, r3
 800044a:	f100 38ff 	add.w	r8, r0, #4294967295
 800044e:	d22f      	bcs.n	80004b0 <__udivmoddi4+0x2b8>
 8000450:	429e      	cmp	r6, r3
 8000452:	d92d      	bls.n	80004b0 <__udivmoddi4+0x2b8>
 8000454:	3802      	subs	r0, #2
 8000456:	4463      	add	r3, ip
 8000458:	1b9b      	subs	r3, r3, r6
 800045a:	b289      	uxth	r1, r1
 800045c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000460:	fb07 3316 	mls	r3, r7, r6, r3
 8000464:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000468:	fb06 f30e 	mul.w	r3, r6, lr
 800046c:	428b      	cmp	r3, r1
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x28a>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f106 38ff 	add.w	r8, r6, #4294967295
 8000478:	d216      	bcs.n	80004a8 <__udivmoddi4+0x2b0>
 800047a:	428b      	cmp	r3, r1
 800047c:	d914      	bls.n	80004a8 <__udivmoddi4+0x2b0>
 800047e:	3e02      	subs	r6, #2
 8000480:	4461      	add	r1, ip
 8000482:	1ac9      	subs	r1, r1, r3
 8000484:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000488:	e738      	b.n	80002fc <__udivmoddi4+0x104>
 800048a:	462e      	mov	r6, r5
 800048c:	4628      	mov	r0, r5
 800048e:	e705      	b.n	800029c <__udivmoddi4+0xa4>
 8000490:	4606      	mov	r6, r0
 8000492:	e6e3      	b.n	800025c <__udivmoddi4+0x64>
 8000494:	4618      	mov	r0, r3
 8000496:	e6f8      	b.n	800028a <__udivmoddi4+0x92>
 8000498:	454b      	cmp	r3, r9
 800049a:	d2a9      	bcs.n	80003f0 <__udivmoddi4+0x1f8>
 800049c:	ebb9 0802 	subs.w	r8, r9, r2
 80004a0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004a4:	3801      	subs	r0, #1
 80004a6:	e7a3      	b.n	80003f0 <__udivmoddi4+0x1f8>
 80004a8:	4646      	mov	r6, r8
 80004aa:	e7ea      	b.n	8000482 <__udivmoddi4+0x28a>
 80004ac:	4620      	mov	r0, r4
 80004ae:	e794      	b.n	80003da <__udivmoddi4+0x1e2>
 80004b0:	4640      	mov	r0, r8
 80004b2:	e7d1      	b.n	8000458 <__udivmoddi4+0x260>
 80004b4:	46d0      	mov	r8, sl
 80004b6:	e77b      	b.n	80003b0 <__udivmoddi4+0x1b8>
 80004b8:	3b02      	subs	r3, #2
 80004ba:	4461      	add	r1, ip
 80004bc:	e732      	b.n	8000324 <__udivmoddi4+0x12c>
 80004be:	4630      	mov	r0, r6
 80004c0:	e709      	b.n	80002d6 <__udivmoddi4+0xde>
 80004c2:	4464      	add	r4, ip
 80004c4:	3802      	subs	r0, #2
 80004c6:	e742      	b.n	800034e <__udivmoddi4+0x156>

080004c8 <__aeabi_idiv0>:
 80004c8:	4770      	bx	lr
 80004ca:	bf00      	nop

080004cc <question2>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void question2(uint8_t character)
{
 80004cc:	b580      	push	{r7, lr}
 80004ce:	b08a      	sub	sp, #40	; 0x28
 80004d0:	af00      	add	r7, sp, #0
 80004d2:	4603      	mov	r3, r0
 80004d4:	71fb      	strb	r3, [r7, #7]
    char binary_string[9];
    for (int i = 7; i >= 0; i--)
 80004d6:	2307      	movs	r3, #7
 80004d8:	627b      	str	r3, [r7, #36]	; 0x24
 80004da:	e013      	b.n	8000504 <question2+0x38>
    {
        binary_string[7 - i] = ((character >> i) & 1) + '0';
 80004dc:	79fa      	ldrb	r2, [r7, #7]
 80004de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80004e0:	fa42 f303 	asr.w	r3, r2, r3
 80004e4:	b2db      	uxtb	r3, r3
 80004e6:	f003 0301 	and.w	r3, r3, #1
 80004ea:	b2da      	uxtb	r2, r3
 80004ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80004ee:	f1c3 0307 	rsb	r3, r3, #7
 80004f2:	3230      	adds	r2, #48	; 0x30
 80004f4:	b2d2      	uxtb	r2, r2
 80004f6:	3328      	adds	r3, #40	; 0x28
 80004f8:	443b      	add	r3, r7
 80004fa:	f803 2c1c 	strb.w	r2, [r3, #-28]
    for (int i = 7; i >= 0; i--)
 80004fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000500:	3b01      	subs	r3, #1
 8000502:	627b      	str	r3, [r7, #36]	; 0x24
 8000504:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000506:	2b00      	cmp	r3, #0
 8000508:	dae8      	bge.n	80004dc <question2+0x10>
    }
    binary_string[8] = '\0';
 800050a:	2300      	movs	r3, #0
 800050c:	753b      	strb	r3, [r7, #20]

    for (int i = 0; i < 8; i++)
 800050e:	2300      	movs	r3, #0
 8000510:	623b      	str	r3, [r7, #32]
 8000512:	e038      	b.n	8000586 <question2+0xba>
    {
        switch (binary_string[i])
 8000514:	f107 020c 	add.w	r2, r7, #12
 8000518:	6a3b      	ldr	r3, [r7, #32]
 800051a:	4413      	add	r3, r2
 800051c:	781b      	ldrb	r3, [r3, #0]
 800051e:	2b30      	cmp	r3, #48	; 0x30
 8000520:	d002      	beq.n	8000528 <question2+0x5c>
 8000522:	2b31      	cmp	r3, #49	; 0x31
 8000524:	d006      	beq.n	8000534 <question2+0x68>
 8000526:	e00b      	b.n	8000540 <question2+0x74>
        {
        case '0':
            HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, 0);
 8000528:	2200      	movs	r2, #0
 800052a:	2101      	movs	r1, #1
 800052c:	4826      	ldr	r0, [pc, #152]	; (80005c8 <question2+0xfc>)
 800052e:	f000 fde1 	bl	80010f4 <HAL_GPIO_WritePin>
            break;
 8000532:	e00b      	b.n	800054c <question2+0x80>
        case '1':
            HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, 1);
 8000534:	2201      	movs	r2, #1
 8000536:	2101      	movs	r1, #1
 8000538:	4823      	ldr	r0, [pc, #140]	; (80005c8 <question2+0xfc>)
 800053a:	f000 fddb 	bl	80010f4 <HAL_GPIO_WritePin>
            break;
 800053e:	e005      	b.n	800054c <question2+0x80>
        default:
            HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, 0);
 8000540:	2200      	movs	r2, #0
 8000542:	2101      	movs	r1, #1
 8000544:	4820      	ldr	r0, [pc, #128]	; (80005c8 <question2+0xfc>)
 8000546:	f000 fdd5 	bl	80010f4 <HAL_GPIO_WritePin>
            break;
 800054a:	bf00      	nop
        }

    pinState_input = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_2);
 800054c:	2104      	movs	r1, #4
 800054e:	481e      	ldr	r0, [pc, #120]	; (80005c8 <question2+0xfc>)
 8000550:	f000 fdb8 	bl	80010c4 <HAL_GPIO_ReadPin>
 8000554:	4603      	mov	r3, r0
 8000556:	461a      	mov	r2, r3
 8000558:	4b1c      	ldr	r3, [pc, #112]	; (80005cc <question2+0x100>)
 800055a:	701a      	strb	r2, [r3, #0]
    pinState_output = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_0);
 800055c:	2101      	movs	r1, #1
 800055e:	481c      	ldr	r0, [pc, #112]	; (80005d0 <question2+0x104>)
 8000560:	f000 fdb0 	bl	80010c4 <HAL_GPIO_ReadPin>
 8000564:	4603      	mov	r3, r0
 8000566:	461a      	mov	r2, r3
 8000568:	4b1a      	ldr	r3, [pc, #104]	; (80005d4 <question2+0x108>)
 800056a:	701a      	strb	r2, [r3, #0]
    recived[i]=pinState_input;
 800056c:	4b17      	ldr	r3, [pc, #92]	; (80005cc <question2+0x100>)
 800056e:	781b      	ldrb	r3, [r3, #0]
 8000570:	4619      	mov	r1, r3
 8000572:	4a19      	ldr	r2, [pc, #100]	; (80005d8 <question2+0x10c>)
 8000574:	6a3b      	ldr	r3, [r7, #32]
 8000576:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

    HAL_Delay(250);
 800057a:	20fa      	movs	r0, #250	; 0xfa
 800057c:	f000 fad0 	bl	8000b20 <HAL_Delay>
    for (int i = 0; i < 8; i++)
 8000580:	6a3b      	ldr	r3, [r7, #32]
 8000582:	3301      	adds	r3, #1
 8000584:	623b      	str	r3, [r7, #32]
 8000586:	6a3b      	ldr	r3, [r7, #32]
 8000588:	2b07      	cmp	r3, #7
 800058a:	ddc3      	ble.n	8000514 <question2+0x48>

    }
    int decimal = 0;
 800058c:	2300      	movs	r3, #0
 800058e:	61fb      	str	r3, [r7, #28]
    for (int i = 0; i < 8; i++) {
 8000590:	2300      	movs	r3, #0
 8000592:	61bb      	str	r3, [r7, #24]
 8000594:	e00a      	b.n	80005ac <question2+0xe0>
        decimal = (decimal << 1) | recived[i];
 8000596:	69fb      	ldr	r3, [r7, #28]
 8000598:	005a      	lsls	r2, r3, #1
 800059a:	490f      	ldr	r1, [pc, #60]	; (80005d8 <question2+0x10c>)
 800059c:	69bb      	ldr	r3, [r7, #24]
 800059e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80005a2:	4313      	orrs	r3, r2
 80005a4:	61fb      	str	r3, [r7, #28]
    for (int i = 0; i < 8; i++) {
 80005a6:	69bb      	ldr	r3, [r7, #24]
 80005a8:	3301      	adds	r3, #1
 80005aa:	61bb      	str	r3, [r7, #24]
 80005ac:	69bb      	ldr	r3, [r7, #24]
 80005ae:	2b07      	cmp	r3, #7
 80005b0:	ddf1      	ble.n	8000596 <question2+0xca>
    }
    CDC_Transmit_FS((char)decimal, sizeof(char));
 80005b2:	69fb      	ldr	r3, [r7, #28]
 80005b4:	b2db      	uxtb	r3, r3
 80005b6:	2101      	movs	r1, #1
 80005b8:	4618      	mov	r0, r3
 80005ba:	f006 fafb 	bl	8006bb4 <CDC_Transmit_FS>
}
 80005be:	bf00      	nop
 80005c0:	3728      	adds	r7, #40	; 0x28
 80005c2:	46bd      	mov	sp, r7
 80005c4:	bd80      	pop	{r7, pc}
 80005c6:	bf00      	nop
 80005c8:	40020000 	.word	0x40020000
 80005cc:	200001ea 	.word	0x200001ea
 80005d0:	40020400 	.word	0x40020400
 80005d4:	200001eb 	.word	0x200001eb
 80005d8:	200001ec 	.word	0x200001ec

080005dc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005e0:	f000 fa2c 	bl	8000a3c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005e4:	f000 f822 	bl	800062c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005e8:	f000 f8f6 	bl	80007d8 <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 80005ec:	f006 fa0a 	bl	8006a04 <MX_USB_DEVICE_Init>
  MX_TIM6_Init();
 80005f0:	f000 f886 	bl	8000700 <MX_TIM6_Init>
  MX_TIM7_Init();
 80005f4:	f000 f8ba 	bl	800076c <MX_TIM7_Init>
  /* USER CODE BEGIN 2 */
  flag=0;
 80005f8:	4b09      	ldr	r3, [pc, #36]	; (8000620 <main+0x44>)
 80005fa:	2200      	movs	r2, #0
 80005fc:	801a      	strh	r2, [r3, #0]
  CDC_Transmit_FS("hello", strlen("hello"));
 80005fe:	2105      	movs	r1, #5
 8000600:	4808      	ldr	r0, [pc, #32]	; (8000624 <main+0x48>)
 8000602:	f006 fad7 	bl	8006bb4 <CDC_Transmit_FS>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if (flag==1)
 8000606:	4b06      	ldr	r3, [pc, #24]	; (8000620 <main+0x44>)
 8000608:	881b      	ldrh	r3, [r3, #0]
 800060a:	2b01      	cmp	r3, #1
 800060c:	d1fb      	bne.n	8000606 <main+0x2a>
	  {
		  question2(externbuffer[1]);
 800060e:	4b06      	ldr	r3, [pc, #24]	; (8000628 <main+0x4c>)
 8000610:	785b      	ldrb	r3, [r3, #1]
 8000612:	4618      	mov	r0, r3
 8000614:	f7ff ff5a 	bl	80004cc <question2>
		  flag =0;
 8000618:	4b01      	ldr	r3, [pc, #4]	; (8000620 <main+0x44>)
 800061a:	2200      	movs	r2, #0
 800061c:	801a      	strh	r2, [r3, #0]
	  if (flag==1)
 800061e:	e7f2      	b.n	8000606 <main+0x2a>
 8000620:	200001e8 	.word	0x200001e8
 8000624:	080074f8 	.word	0x080074f8
 8000628:	200001a8 	.word	0x200001a8

0800062c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800062c:	b580      	push	{r7, lr}
 800062e:	b094      	sub	sp, #80	; 0x50
 8000630:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000632:	f107 0320 	add.w	r3, r7, #32
 8000636:	2230      	movs	r2, #48	; 0x30
 8000638:	2100      	movs	r1, #0
 800063a:	4618      	mov	r0, r3
 800063c:	f006 ff48 	bl	80074d0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000640:	f107 030c 	add.w	r3, r7, #12
 8000644:	2200      	movs	r2, #0
 8000646:	601a      	str	r2, [r3, #0]
 8000648:	605a      	str	r2, [r3, #4]
 800064a:	609a      	str	r2, [r3, #8]
 800064c:	60da      	str	r2, [r3, #12]
 800064e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000650:	2300      	movs	r3, #0
 8000652:	60bb      	str	r3, [r7, #8]
 8000654:	4b28      	ldr	r3, [pc, #160]	; (80006f8 <SystemClock_Config+0xcc>)
 8000656:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000658:	4a27      	ldr	r2, [pc, #156]	; (80006f8 <SystemClock_Config+0xcc>)
 800065a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800065e:	6413      	str	r3, [r2, #64]	; 0x40
 8000660:	4b25      	ldr	r3, [pc, #148]	; (80006f8 <SystemClock_Config+0xcc>)
 8000662:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000664:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000668:	60bb      	str	r3, [r7, #8]
 800066a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800066c:	2300      	movs	r3, #0
 800066e:	607b      	str	r3, [r7, #4]
 8000670:	4b22      	ldr	r3, [pc, #136]	; (80006fc <SystemClock_Config+0xd0>)
 8000672:	681b      	ldr	r3, [r3, #0]
 8000674:	4a21      	ldr	r2, [pc, #132]	; (80006fc <SystemClock_Config+0xd0>)
 8000676:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800067a:	6013      	str	r3, [r2, #0]
 800067c:	4b1f      	ldr	r3, [pc, #124]	; (80006fc <SystemClock_Config+0xd0>)
 800067e:	681b      	ldr	r3, [r3, #0]
 8000680:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000684:	607b      	str	r3, [r7, #4]
 8000686:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000688:	2301      	movs	r3, #1
 800068a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800068c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000690:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000692:	2302      	movs	r3, #2
 8000694:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000696:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800069a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 800069c:	2304      	movs	r3, #4
 800069e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80006a0:	23a8      	movs	r3, #168	; 0xa8
 80006a2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006a4:	2302      	movs	r3, #2
 80006a6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80006a8:	2307      	movs	r3, #7
 80006aa:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006ac:	f107 0320 	add.w	r3, r7, #32
 80006b0:	4618      	mov	r0, r3
 80006b2:	f001 ffb5 	bl	8002620 <HAL_RCC_OscConfig>
 80006b6:	4603      	mov	r3, r0
 80006b8:	2b00      	cmp	r3, #0
 80006ba:	d001      	beq.n	80006c0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80006bc:	f000 f8e8 	bl	8000890 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006c0:	230f      	movs	r3, #15
 80006c2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006c4:	2302      	movs	r3, #2
 80006c6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006c8:	2300      	movs	r3, #0
 80006ca:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80006cc:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80006d0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80006d2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006d6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80006d8:	f107 030c 	add.w	r3, r7, #12
 80006dc:	2105      	movs	r1, #5
 80006de:	4618      	mov	r0, r3
 80006e0:	f002 fa16 	bl	8002b10 <HAL_RCC_ClockConfig>
 80006e4:	4603      	mov	r3, r0
 80006e6:	2b00      	cmp	r3, #0
 80006e8:	d001      	beq.n	80006ee <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80006ea:	f000 f8d1 	bl	8000890 <Error_Handler>
  }
}
 80006ee:	bf00      	nop
 80006f0:	3750      	adds	r7, #80	; 0x50
 80006f2:	46bd      	mov	sp, r7
 80006f4:	bd80      	pop	{r7, pc}
 80006f6:	bf00      	nop
 80006f8:	40023800 	.word	0x40023800
 80006fc:	40007000 	.word	0x40007000

08000700 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8000700:	b580      	push	{r7, lr}
 8000702:	b082      	sub	sp, #8
 8000704:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000706:	463b      	mov	r3, r7
 8000708:	2200      	movs	r2, #0
 800070a:	601a      	str	r2, [r3, #0]
 800070c:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 800070e:	4b15      	ldr	r3, [pc, #84]	; (8000764 <MX_TIM6_Init+0x64>)
 8000710:	4a15      	ldr	r2, [pc, #84]	; (8000768 <MX_TIM6_Init+0x68>)
 8000712:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 1;
 8000714:	4b13      	ldr	r3, [pc, #76]	; (8000764 <MX_TIM6_Init+0x64>)
 8000716:	2201      	movs	r2, #1
 8000718:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800071a:	4b12      	ldr	r3, [pc, #72]	; (8000764 <MX_TIM6_Init+0x64>)
 800071c:	2200      	movs	r2, #0
 800071e:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 8000720:	4b10      	ldr	r3, [pc, #64]	; (8000764 <MX_TIM6_Init+0x64>)
 8000722:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000726:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000728:	4b0e      	ldr	r3, [pc, #56]	; (8000764 <MX_TIM6_Init+0x64>)
 800072a:	2200      	movs	r2, #0
 800072c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800072e:	480d      	ldr	r0, [pc, #52]	; (8000764 <MX_TIM6_Init+0x64>)
 8000730:	f002 fbe6 	bl	8002f00 <HAL_TIM_Base_Init>
 8000734:	4603      	mov	r3, r0
 8000736:	2b00      	cmp	r3, #0
 8000738:	d001      	beq.n	800073e <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 800073a:	f000 f8a9 	bl	8000890 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800073e:	2300      	movs	r3, #0
 8000740:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000742:	2300      	movs	r3, #0
 8000744:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8000746:	463b      	mov	r3, r7
 8000748:	4619      	mov	r1, r3
 800074a:	4806      	ldr	r0, [pc, #24]	; (8000764 <MX_TIM6_Init+0x64>)
 800074c:	f002 fcc8 	bl	80030e0 <HAL_TIMEx_MasterConfigSynchronization>
 8000750:	4603      	mov	r3, r0
 8000752:	2b00      	cmp	r3, #0
 8000754:	d001      	beq.n	800075a <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 8000756:	f000 f89b 	bl	8000890 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 800075a:	bf00      	nop
 800075c:	3708      	adds	r7, #8
 800075e:	46bd      	mov	sp, r7
 8000760:	bd80      	pop	{r7, pc}
 8000762:	bf00      	nop
 8000764:	20000118 	.word	0x20000118
 8000768:	40001000 	.word	0x40001000

0800076c <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 800076c:	b580      	push	{r7, lr}
 800076e:	b082      	sub	sp, #8
 8000770:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000772:	463b      	mov	r3, r7
 8000774:	2200      	movs	r2, #0
 8000776:	601a      	str	r2, [r3, #0]
 8000778:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 800077a:	4b15      	ldr	r3, [pc, #84]	; (80007d0 <MX_TIM7_Init+0x64>)
 800077c:	4a15      	ldr	r2, [pc, #84]	; (80007d4 <MX_TIM7_Init+0x68>)
 800077e:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 1;
 8000780:	4b13      	ldr	r3, [pc, #76]	; (80007d0 <MX_TIM7_Init+0x64>)
 8000782:	2201      	movs	r2, #1
 8000784:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000786:	4b12      	ldr	r3, [pc, #72]	; (80007d0 <MX_TIM7_Init+0x64>)
 8000788:	2200      	movs	r2, #0
 800078a:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 65535;
 800078c:	4b10      	ldr	r3, [pc, #64]	; (80007d0 <MX_TIM7_Init+0x64>)
 800078e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000792:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000794:	4b0e      	ldr	r3, [pc, #56]	; (80007d0 <MX_TIM7_Init+0x64>)
 8000796:	2200      	movs	r2, #0
 8000798:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 800079a:	480d      	ldr	r0, [pc, #52]	; (80007d0 <MX_TIM7_Init+0x64>)
 800079c:	f002 fbb0 	bl	8002f00 <HAL_TIM_Base_Init>
 80007a0:	4603      	mov	r3, r0
 80007a2:	2b00      	cmp	r3, #0
 80007a4:	d001      	beq.n	80007aa <MX_TIM7_Init+0x3e>
  {
    Error_Handler();
 80007a6:	f000 f873 	bl	8000890 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80007aa:	2300      	movs	r3, #0
 80007ac:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80007ae:	2300      	movs	r3, #0
 80007b0:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 80007b2:	463b      	mov	r3, r7
 80007b4:	4619      	mov	r1, r3
 80007b6:	4806      	ldr	r0, [pc, #24]	; (80007d0 <MX_TIM7_Init+0x64>)
 80007b8:	f002 fc92 	bl	80030e0 <HAL_TIMEx_MasterConfigSynchronization>
 80007bc:	4603      	mov	r3, r0
 80007be:	2b00      	cmp	r3, #0
 80007c0:	d001      	beq.n	80007c6 <MX_TIM7_Init+0x5a>
  {
    Error_Handler();
 80007c2:	f000 f865 	bl	8000890 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 80007c6:	bf00      	nop
 80007c8:	3708      	adds	r7, #8
 80007ca:	46bd      	mov	sp, r7
 80007cc:	bd80      	pop	{r7, pc}
 80007ce:	bf00      	nop
 80007d0:	20000160 	.word	0x20000160
 80007d4:	40001400 	.word	0x40001400

080007d8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007d8:	b580      	push	{r7, lr}
 80007da:	b088      	sub	sp, #32
 80007dc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007de:	f107 030c 	add.w	r3, r7, #12
 80007e2:	2200      	movs	r2, #0
 80007e4:	601a      	str	r2, [r3, #0]
 80007e6:	605a      	str	r2, [r3, #4]
 80007e8:	609a      	str	r2, [r3, #8]
 80007ea:	60da      	str	r2, [r3, #12]
 80007ec:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007ee:	2300      	movs	r3, #0
 80007f0:	60bb      	str	r3, [r7, #8]
 80007f2:	4b25      	ldr	r3, [pc, #148]	; (8000888 <MX_GPIO_Init+0xb0>)
 80007f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007f6:	4a24      	ldr	r2, [pc, #144]	; (8000888 <MX_GPIO_Init+0xb0>)
 80007f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80007fc:	6313      	str	r3, [r2, #48]	; 0x30
 80007fe:	4b22      	ldr	r3, [pc, #136]	; (8000888 <MX_GPIO_Init+0xb0>)
 8000800:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000802:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000806:	60bb      	str	r3, [r7, #8]
 8000808:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800080a:	2300      	movs	r3, #0
 800080c:	607b      	str	r3, [r7, #4]
 800080e:	4b1e      	ldr	r3, [pc, #120]	; (8000888 <MX_GPIO_Init+0xb0>)
 8000810:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000812:	4a1d      	ldr	r2, [pc, #116]	; (8000888 <MX_GPIO_Init+0xb0>)
 8000814:	f043 0301 	orr.w	r3, r3, #1
 8000818:	6313      	str	r3, [r2, #48]	; 0x30
 800081a:	4b1b      	ldr	r3, [pc, #108]	; (8000888 <MX_GPIO_Init+0xb0>)
 800081c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800081e:	f003 0301 	and.w	r3, r3, #1
 8000822:	607b      	str	r3, [r7, #4]
 8000824:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000826:	2300      	movs	r3, #0
 8000828:	603b      	str	r3, [r7, #0]
 800082a:	4b17      	ldr	r3, [pc, #92]	; (8000888 <MX_GPIO_Init+0xb0>)
 800082c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800082e:	4a16      	ldr	r2, [pc, #88]	; (8000888 <MX_GPIO_Init+0xb0>)
 8000830:	f043 0302 	orr.w	r3, r3, #2
 8000834:	6313      	str	r3, [r2, #48]	; 0x30
 8000836:	4b14      	ldr	r3, [pc, #80]	; (8000888 <MX_GPIO_Init+0xb0>)
 8000838:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800083a:	f003 0302 	and.w	r3, r3, #2
 800083e:	603b      	str	r3, [r7, #0]
 8000840:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_RESET);
 8000842:	2200      	movs	r2, #0
 8000844:	2101      	movs	r1, #1
 8000846:	4811      	ldr	r0, [pc, #68]	; (800088c <MX_GPIO_Init+0xb4>)
 8000848:	f000 fc54 	bl	80010f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 800084c:	2301      	movs	r3, #1
 800084e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000850:	2301      	movs	r3, #1
 8000852:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000854:	2300      	movs	r3, #0
 8000856:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000858:	2300      	movs	r3, #0
 800085a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800085c:	f107 030c 	add.w	r3, r7, #12
 8000860:	4619      	mov	r1, r3
 8000862:	480a      	ldr	r0, [pc, #40]	; (800088c <MX_GPIO_Init+0xb4>)
 8000864:	f000 fa92 	bl	8000d8c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000868:	2304      	movs	r3, #4
 800086a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800086c:	2300      	movs	r3, #0
 800086e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000870:	2300      	movs	r3, #0
 8000872:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000874:	f107 030c 	add.w	r3, r7, #12
 8000878:	4619      	mov	r1, r3
 800087a:	4804      	ldr	r0, [pc, #16]	; (800088c <MX_GPIO_Init+0xb4>)
 800087c:	f000 fa86 	bl	8000d8c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000880:	bf00      	nop
 8000882:	3720      	adds	r7, #32
 8000884:	46bd      	mov	sp, r7
 8000886:	bd80      	pop	{r7, pc}
 8000888:	40023800 	.word	0x40023800
 800088c:	40020000 	.word	0x40020000

08000890 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000890:	b480      	push	{r7}
 8000892:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000894:	b672      	cpsid	i
}
 8000896:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000898:	e7fe      	b.n	8000898 <Error_Handler+0x8>
	...

0800089c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800089c:	b580      	push	{r7, lr}
 800089e:	b082      	sub	sp, #8
 80008a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008a2:	2300      	movs	r3, #0
 80008a4:	607b      	str	r3, [r7, #4]
 80008a6:	4b10      	ldr	r3, [pc, #64]	; (80008e8 <HAL_MspInit+0x4c>)
 80008a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008aa:	4a0f      	ldr	r2, [pc, #60]	; (80008e8 <HAL_MspInit+0x4c>)
 80008ac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80008b0:	6453      	str	r3, [r2, #68]	; 0x44
 80008b2:	4b0d      	ldr	r3, [pc, #52]	; (80008e8 <HAL_MspInit+0x4c>)
 80008b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008b6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80008ba:	607b      	str	r3, [r7, #4]
 80008bc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008be:	2300      	movs	r3, #0
 80008c0:	603b      	str	r3, [r7, #0]
 80008c2:	4b09      	ldr	r3, [pc, #36]	; (80008e8 <HAL_MspInit+0x4c>)
 80008c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008c6:	4a08      	ldr	r2, [pc, #32]	; (80008e8 <HAL_MspInit+0x4c>)
 80008c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008cc:	6413      	str	r3, [r2, #64]	; 0x40
 80008ce:	4b06      	ldr	r3, [pc, #24]	; (80008e8 <HAL_MspInit+0x4c>)
 80008d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008d6:	603b      	str	r3, [r7, #0]
 80008d8:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80008da:	2007      	movs	r0, #7
 80008dc:	f000 fa14 	bl	8000d08 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008e0:	bf00      	nop
 80008e2:	3708      	adds	r7, #8
 80008e4:	46bd      	mov	sp, r7
 80008e6:	bd80      	pop	{r7, pc}
 80008e8:	40023800 	.word	0x40023800

080008ec <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80008ec:	b480      	push	{r7}
 80008ee:	b085      	sub	sp, #20
 80008f0:	af00      	add	r7, sp, #0
 80008f2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 80008f4:	687b      	ldr	r3, [r7, #4]
 80008f6:	681b      	ldr	r3, [r3, #0]
 80008f8:	4a15      	ldr	r2, [pc, #84]	; (8000950 <HAL_TIM_Base_MspInit+0x64>)
 80008fa:	4293      	cmp	r3, r2
 80008fc:	d10e      	bne.n	800091c <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 80008fe:	2300      	movs	r3, #0
 8000900:	60fb      	str	r3, [r7, #12]
 8000902:	4b14      	ldr	r3, [pc, #80]	; (8000954 <HAL_TIM_Base_MspInit+0x68>)
 8000904:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000906:	4a13      	ldr	r2, [pc, #76]	; (8000954 <HAL_TIM_Base_MspInit+0x68>)
 8000908:	f043 0310 	orr.w	r3, r3, #16
 800090c:	6413      	str	r3, [r2, #64]	; 0x40
 800090e:	4b11      	ldr	r3, [pc, #68]	; (8000954 <HAL_TIM_Base_MspInit+0x68>)
 8000910:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000912:	f003 0310 	and.w	r3, r3, #16
 8000916:	60fb      	str	r3, [r7, #12]
 8000918:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 800091a:	e012      	b.n	8000942 <HAL_TIM_Base_MspInit+0x56>
  else if(htim_base->Instance==TIM7)
 800091c:	687b      	ldr	r3, [r7, #4]
 800091e:	681b      	ldr	r3, [r3, #0]
 8000920:	4a0d      	ldr	r2, [pc, #52]	; (8000958 <HAL_TIM_Base_MspInit+0x6c>)
 8000922:	4293      	cmp	r3, r2
 8000924:	d10d      	bne.n	8000942 <HAL_TIM_Base_MspInit+0x56>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8000926:	2300      	movs	r3, #0
 8000928:	60bb      	str	r3, [r7, #8]
 800092a:	4b0a      	ldr	r3, [pc, #40]	; (8000954 <HAL_TIM_Base_MspInit+0x68>)
 800092c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800092e:	4a09      	ldr	r2, [pc, #36]	; (8000954 <HAL_TIM_Base_MspInit+0x68>)
 8000930:	f043 0320 	orr.w	r3, r3, #32
 8000934:	6413      	str	r3, [r2, #64]	; 0x40
 8000936:	4b07      	ldr	r3, [pc, #28]	; (8000954 <HAL_TIM_Base_MspInit+0x68>)
 8000938:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800093a:	f003 0320 	and.w	r3, r3, #32
 800093e:	60bb      	str	r3, [r7, #8]
 8000940:	68bb      	ldr	r3, [r7, #8]
}
 8000942:	bf00      	nop
 8000944:	3714      	adds	r7, #20
 8000946:	46bd      	mov	sp, r7
 8000948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800094c:	4770      	bx	lr
 800094e:	bf00      	nop
 8000950:	40001000 	.word	0x40001000
 8000954:	40023800 	.word	0x40023800
 8000958:	40001400 	.word	0x40001400

0800095c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800095c:	b480      	push	{r7}
 800095e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000960:	e7fe      	b.n	8000960 <NMI_Handler+0x4>

08000962 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000962:	b480      	push	{r7}
 8000964:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000966:	e7fe      	b.n	8000966 <HardFault_Handler+0x4>

08000968 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000968:	b480      	push	{r7}
 800096a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800096c:	e7fe      	b.n	800096c <MemManage_Handler+0x4>

0800096e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800096e:	b480      	push	{r7}
 8000970:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000972:	e7fe      	b.n	8000972 <BusFault_Handler+0x4>

08000974 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000974:	b480      	push	{r7}
 8000976:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000978:	e7fe      	b.n	8000978 <UsageFault_Handler+0x4>

0800097a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800097a:	b480      	push	{r7}
 800097c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800097e:	bf00      	nop
 8000980:	46bd      	mov	sp, r7
 8000982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000986:	4770      	bx	lr

08000988 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000988:	b480      	push	{r7}
 800098a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800098c:	bf00      	nop
 800098e:	46bd      	mov	sp, r7
 8000990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000994:	4770      	bx	lr

08000996 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000996:	b480      	push	{r7}
 8000998:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800099a:	bf00      	nop
 800099c:	46bd      	mov	sp, r7
 800099e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a2:	4770      	bx	lr

080009a4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80009a4:	b580      	push	{r7, lr}
 80009a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80009a8:	f000 f89a 	bl	8000ae0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80009ac:	bf00      	nop
 80009ae:	bd80      	pop	{r7, pc}

080009b0 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80009b0:	b580      	push	{r7, lr}
 80009b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80009b4:	4802      	ldr	r0, [pc, #8]	; (80009c0 <OTG_FS_IRQHandler+0x10>)
 80009b6:	f000 fd06 	bl	80013c6 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80009ba:	bf00      	nop
 80009bc:	bd80      	pop	{r7, pc}
 80009be:	bf00      	nop
 80009c0:	200016f0 	.word	0x200016f0

080009c4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80009c4:	b480      	push	{r7}
 80009c6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80009c8:	4b06      	ldr	r3, [pc, #24]	; (80009e4 <SystemInit+0x20>)
 80009ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80009ce:	4a05      	ldr	r2, [pc, #20]	; (80009e4 <SystemInit+0x20>)
 80009d0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80009d4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80009d8:	bf00      	nop
 80009da:	46bd      	mov	sp, r7
 80009dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e0:	4770      	bx	lr
 80009e2:	bf00      	nop
 80009e4:	e000ed00 	.word	0xe000ed00

080009e8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80009e8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000a20 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80009ec:	480d      	ldr	r0, [pc, #52]	; (8000a24 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80009ee:	490e      	ldr	r1, [pc, #56]	; (8000a28 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80009f0:	4a0e      	ldr	r2, [pc, #56]	; (8000a2c <LoopFillZerobss+0x1e>)
  movs r3, #0
 80009f2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80009f4:	e002      	b.n	80009fc <LoopCopyDataInit>

080009f6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80009f6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80009f8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80009fa:	3304      	adds	r3, #4

080009fc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80009fc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80009fe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a00:	d3f9      	bcc.n	80009f6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a02:	4a0b      	ldr	r2, [pc, #44]	; (8000a30 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000a04:	4c0b      	ldr	r4, [pc, #44]	; (8000a34 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000a06:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a08:	e001      	b.n	8000a0e <LoopFillZerobss>

08000a0a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a0a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a0c:	3204      	adds	r2, #4

08000a0e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a0e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a10:	d3fb      	bcc.n	8000a0a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000a12:	f7ff ffd7 	bl	80009c4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000a16:	f006 fd29 	bl	800746c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000a1a:	f7ff fddf 	bl	80005dc <main>
  bx  lr    
 8000a1e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000a20:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000a24:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a28:	200000fc 	.word	0x200000fc
  ldr r2, =_sidata
 8000a2c:	08007568 	.word	0x08007568
  ldr r2, =_sbss
 8000a30:	200000fc 	.word	0x200000fc
  ldr r4, =_ebss
 8000a34:	20001e1c 	.word	0x20001e1c

08000a38 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000a38:	e7fe      	b.n	8000a38 <ADC_IRQHandler>
	...

08000a3c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000a40:	4b0e      	ldr	r3, [pc, #56]	; (8000a7c <HAL_Init+0x40>)
 8000a42:	681b      	ldr	r3, [r3, #0]
 8000a44:	4a0d      	ldr	r2, [pc, #52]	; (8000a7c <HAL_Init+0x40>)
 8000a46:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000a4a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000a4c:	4b0b      	ldr	r3, [pc, #44]	; (8000a7c <HAL_Init+0x40>)
 8000a4e:	681b      	ldr	r3, [r3, #0]
 8000a50:	4a0a      	ldr	r2, [pc, #40]	; (8000a7c <HAL_Init+0x40>)
 8000a52:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000a56:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a58:	4b08      	ldr	r3, [pc, #32]	; (8000a7c <HAL_Init+0x40>)
 8000a5a:	681b      	ldr	r3, [r3, #0]
 8000a5c:	4a07      	ldr	r2, [pc, #28]	; (8000a7c <HAL_Init+0x40>)
 8000a5e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000a62:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a64:	2003      	movs	r0, #3
 8000a66:	f000 f94f 	bl	8000d08 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000a6a:	2000      	movs	r0, #0
 8000a6c:	f000 f808 	bl	8000a80 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000a70:	f7ff ff14 	bl	800089c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000a74:	2300      	movs	r3, #0
}
 8000a76:	4618      	mov	r0, r3
 8000a78:	bd80      	pop	{r7, pc}
 8000a7a:	bf00      	nop
 8000a7c:	40023c00 	.word	0x40023c00

08000a80 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a80:	b580      	push	{r7, lr}
 8000a82:	b082      	sub	sp, #8
 8000a84:	af00      	add	r7, sp, #0
 8000a86:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000a88:	4b12      	ldr	r3, [pc, #72]	; (8000ad4 <HAL_InitTick+0x54>)
 8000a8a:	681a      	ldr	r2, [r3, #0]
 8000a8c:	4b12      	ldr	r3, [pc, #72]	; (8000ad8 <HAL_InitTick+0x58>)
 8000a8e:	781b      	ldrb	r3, [r3, #0]
 8000a90:	4619      	mov	r1, r3
 8000a92:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a96:	fbb3 f3f1 	udiv	r3, r3, r1
 8000a9a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a9e:	4618      	mov	r0, r3
 8000aa0:	f000 f967 	bl	8000d72 <HAL_SYSTICK_Config>
 8000aa4:	4603      	mov	r3, r0
 8000aa6:	2b00      	cmp	r3, #0
 8000aa8:	d001      	beq.n	8000aae <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000aaa:	2301      	movs	r3, #1
 8000aac:	e00e      	b.n	8000acc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000aae:	687b      	ldr	r3, [r7, #4]
 8000ab0:	2b0f      	cmp	r3, #15
 8000ab2:	d80a      	bhi.n	8000aca <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	6879      	ldr	r1, [r7, #4]
 8000ab8:	f04f 30ff 	mov.w	r0, #4294967295
 8000abc:	f000 f92f 	bl	8000d1e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ac0:	4a06      	ldr	r2, [pc, #24]	; (8000adc <HAL_InitTick+0x5c>)
 8000ac2:	687b      	ldr	r3, [r7, #4]
 8000ac4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000ac6:	2300      	movs	r3, #0
 8000ac8:	e000      	b.n	8000acc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000aca:	2301      	movs	r3, #1
}
 8000acc:	4618      	mov	r0, r3
 8000ace:	3708      	adds	r7, #8
 8000ad0:	46bd      	mov	sp, r7
 8000ad2:	bd80      	pop	{r7, pc}
 8000ad4:	20000000 	.word	0x20000000
 8000ad8:	20000008 	.word	0x20000008
 8000adc:	20000004 	.word	0x20000004

08000ae0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ae0:	b480      	push	{r7}
 8000ae2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ae4:	4b06      	ldr	r3, [pc, #24]	; (8000b00 <HAL_IncTick+0x20>)
 8000ae6:	781b      	ldrb	r3, [r3, #0]
 8000ae8:	461a      	mov	r2, r3
 8000aea:	4b06      	ldr	r3, [pc, #24]	; (8000b04 <HAL_IncTick+0x24>)
 8000aec:	681b      	ldr	r3, [r3, #0]
 8000aee:	4413      	add	r3, r2
 8000af0:	4a04      	ldr	r2, [pc, #16]	; (8000b04 <HAL_IncTick+0x24>)
 8000af2:	6013      	str	r3, [r2, #0]
}
 8000af4:	bf00      	nop
 8000af6:	46bd      	mov	sp, r7
 8000af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000afc:	4770      	bx	lr
 8000afe:	bf00      	nop
 8000b00:	20000008 	.word	0x20000008
 8000b04:	2000020c 	.word	0x2000020c

08000b08 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b08:	b480      	push	{r7}
 8000b0a:	af00      	add	r7, sp, #0
  return uwTick;
 8000b0c:	4b03      	ldr	r3, [pc, #12]	; (8000b1c <HAL_GetTick+0x14>)
 8000b0e:	681b      	ldr	r3, [r3, #0]
}
 8000b10:	4618      	mov	r0, r3
 8000b12:	46bd      	mov	sp, r7
 8000b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b18:	4770      	bx	lr
 8000b1a:	bf00      	nop
 8000b1c:	2000020c 	.word	0x2000020c

08000b20 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000b20:	b580      	push	{r7, lr}
 8000b22:	b084      	sub	sp, #16
 8000b24:	af00      	add	r7, sp, #0
 8000b26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000b28:	f7ff ffee 	bl	8000b08 <HAL_GetTick>
 8000b2c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000b32:	68fb      	ldr	r3, [r7, #12]
 8000b34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000b38:	d005      	beq.n	8000b46 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000b3a:	4b0a      	ldr	r3, [pc, #40]	; (8000b64 <HAL_Delay+0x44>)
 8000b3c:	781b      	ldrb	r3, [r3, #0]
 8000b3e:	461a      	mov	r2, r3
 8000b40:	68fb      	ldr	r3, [r7, #12]
 8000b42:	4413      	add	r3, r2
 8000b44:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000b46:	bf00      	nop
 8000b48:	f7ff ffde 	bl	8000b08 <HAL_GetTick>
 8000b4c:	4602      	mov	r2, r0
 8000b4e:	68bb      	ldr	r3, [r7, #8]
 8000b50:	1ad3      	subs	r3, r2, r3
 8000b52:	68fa      	ldr	r2, [r7, #12]
 8000b54:	429a      	cmp	r2, r3
 8000b56:	d8f7      	bhi.n	8000b48 <HAL_Delay+0x28>
  {
  }
}
 8000b58:	bf00      	nop
 8000b5a:	bf00      	nop
 8000b5c:	3710      	adds	r7, #16
 8000b5e:	46bd      	mov	sp, r7
 8000b60:	bd80      	pop	{r7, pc}
 8000b62:	bf00      	nop
 8000b64:	20000008 	.word	0x20000008

08000b68 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b68:	b480      	push	{r7}
 8000b6a:	b085      	sub	sp, #20
 8000b6c:	af00      	add	r7, sp, #0
 8000b6e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	f003 0307 	and.w	r3, r3, #7
 8000b76:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b78:	4b0c      	ldr	r3, [pc, #48]	; (8000bac <__NVIC_SetPriorityGrouping+0x44>)
 8000b7a:	68db      	ldr	r3, [r3, #12]
 8000b7c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b7e:	68ba      	ldr	r2, [r7, #8]
 8000b80:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000b84:	4013      	ands	r3, r2
 8000b86:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000b88:	68fb      	ldr	r3, [r7, #12]
 8000b8a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b8c:	68bb      	ldr	r3, [r7, #8]
 8000b8e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000b90:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000b94:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b98:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b9a:	4a04      	ldr	r2, [pc, #16]	; (8000bac <__NVIC_SetPriorityGrouping+0x44>)
 8000b9c:	68bb      	ldr	r3, [r7, #8]
 8000b9e:	60d3      	str	r3, [r2, #12]
}
 8000ba0:	bf00      	nop
 8000ba2:	3714      	adds	r7, #20
 8000ba4:	46bd      	mov	sp, r7
 8000ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000baa:	4770      	bx	lr
 8000bac:	e000ed00 	.word	0xe000ed00

08000bb0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000bb0:	b480      	push	{r7}
 8000bb2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000bb4:	4b04      	ldr	r3, [pc, #16]	; (8000bc8 <__NVIC_GetPriorityGrouping+0x18>)
 8000bb6:	68db      	ldr	r3, [r3, #12]
 8000bb8:	0a1b      	lsrs	r3, r3, #8
 8000bba:	f003 0307 	and.w	r3, r3, #7
}
 8000bbe:	4618      	mov	r0, r3
 8000bc0:	46bd      	mov	sp, r7
 8000bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc6:	4770      	bx	lr
 8000bc8:	e000ed00 	.word	0xe000ed00

08000bcc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000bcc:	b480      	push	{r7}
 8000bce:	b083      	sub	sp, #12
 8000bd0:	af00      	add	r7, sp, #0
 8000bd2:	4603      	mov	r3, r0
 8000bd4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000bd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bda:	2b00      	cmp	r3, #0
 8000bdc:	db0b      	blt.n	8000bf6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000bde:	79fb      	ldrb	r3, [r7, #7]
 8000be0:	f003 021f 	and.w	r2, r3, #31
 8000be4:	4907      	ldr	r1, [pc, #28]	; (8000c04 <__NVIC_EnableIRQ+0x38>)
 8000be6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bea:	095b      	lsrs	r3, r3, #5
 8000bec:	2001      	movs	r0, #1
 8000bee:	fa00 f202 	lsl.w	r2, r0, r2
 8000bf2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000bf6:	bf00      	nop
 8000bf8:	370c      	adds	r7, #12
 8000bfa:	46bd      	mov	sp, r7
 8000bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c00:	4770      	bx	lr
 8000c02:	bf00      	nop
 8000c04:	e000e100 	.word	0xe000e100

08000c08 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c08:	b480      	push	{r7}
 8000c0a:	b083      	sub	sp, #12
 8000c0c:	af00      	add	r7, sp, #0
 8000c0e:	4603      	mov	r3, r0
 8000c10:	6039      	str	r1, [r7, #0]
 8000c12:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c14:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c18:	2b00      	cmp	r3, #0
 8000c1a:	db0a      	blt.n	8000c32 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c1c:	683b      	ldr	r3, [r7, #0]
 8000c1e:	b2da      	uxtb	r2, r3
 8000c20:	490c      	ldr	r1, [pc, #48]	; (8000c54 <__NVIC_SetPriority+0x4c>)
 8000c22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c26:	0112      	lsls	r2, r2, #4
 8000c28:	b2d2      	uxtb	r2, r2
 8000c2a:	440b      	add	r3, r1
 8000c2c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c30:	e00a      	b.n	8000c48 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c32:	683b      	ldr	r3, [r7, #0]
 8000c34:	b2da      	uxtb	r2, r3
 8000c36:	4908      	ldr	r1, [pc, #32]	; (8000c58 <__NVIC_SetPriority+0x50>)
 8000c38:	79fb      	ldrb	r3, [r7, #7]
 8000c3a:	f003 030f 	and.w	r3, r3, #15
 8000c3e:	3b04      	subs	r3, #4
 8000c40:	0112      	lsls	r2, r2, #4
 8000c42:	b2d2      	uxtb	r2, r2
 8000c44:	440b      	add	r3, r1
 8000c46:	761a      	strb	r2, [r3, #24]
}
 8000c48:	bf00      	nop
 8000c4a:	370c      	adds	r7, #12
 8000c4c:	46bd      	mov	sp, r7
 8000c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c52:	4770      	bx	lr
 8000c54:	e000e100 	.word	0xe000e100
 8000c58:	e000ed00 	.word	0xe000ed00

08000c5c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c5c:	b480      	push	{r7}
 8000c5e:	b089      	sub	sp, #36	; 0x24
 8000c60:	af00      	add	r7, sp, #0
 8000c62:	60f8      	str	r0, [r7, #12]
 8000c64:	60b9      	str	r1, [r7, #8]
 8000c66:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c68:	68fb      	ldr	r3, [r7, #12]
 8000c6a:	f003 0307 	and.w	r3, r3, #7
 8000c6e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c70:	69fb      	ldr	r3, [r7, #28]
 8000c72:	f1c3 0307 	rsb	r3, r3, #7
 8000c76:	2b04      	cmp	r3, #4
 8000c78:	bf28      	it	cs
 8000c7a:	2304      	movcs	r3, #4
 8000c7c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c7e:	69fb      	ldr	r3, [r7, #28]
 8000c80:	3304      	adds	r3, #4
 8000c82:	2b06      	cmp	r3, #6
 8000c84:	d902      	bls.n	8000c8c <NVIC_EncodePriority+0x30>
 8000c86:	69fb      	ldr	r3, [r7, #28]
 8000c88:	3b03      	subs	r3, #3
 8000c8a:	e000      	b.n	8000c8e <NVIC_EncodePriority+0x32>
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c90:	f04f 32ff 	mov.w	r2, #4294967295
 8000c94:	69bb      	ldr	r3, [r7, #24]
 8000c96:	fa02 f303 	lsl.w	r3, r2, r3
 8000c9a:	43da      	mvns	r2, r3
 8000c9c:	68bb      	ldr	r3, [r7, #8]
 8000c9e:	401a      	ands	r2, r3
 8000ca0:	697b      	ldr	r3, [r7, #20]
 8000ca2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ca4:	f04f 31ff 	mov.w	r1, #4294967295
 8000ca8:	697b      	ldr	r3, [r7, #20]
 8000caa:	fa01 f303 	lsl.w	r3, r1, r3
 8000cae:	43d9      	mvns	r1, r3
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cb4:	4313      	orrs	r3, r2
         );
}
 8000cb6:	4618      	mov	r0, r3
 8000cb8:	3724      	adds	r7, #36	; 0x24
 8000cba:	46bd      	mov	sp, r7
 8000cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc0:	4770      	bx	lr
	...

08000cc4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	b082      	sub	sp, #8
 8000cc8:	af00      	add	r7, sp, #0
 8000cca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	3b01      	subs	r3, #1
 8000cd0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000cd4:	d301      	bcc.n	8000cda <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000cd6:	2301      	movs	r3, #1
 8000cd8:	e00f      	b.n	8000cfa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000cda:	4a0a      	ldr	r2, [pc, #40]	; (8000d04 <SysTick_Config+0x40>)
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	3b01      	subs	r3, #1
 8000ce0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000ce2:	210f      	movs	r1, #15
 8000ce4:	f04f 30ff 	mov.w	r0, #4294967295
 8000ce8:	f7ff ff8e 	bl	8000c08 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000cec:	4b05      	ldr	r3, [pc, #20]	; (8000d04 <SysTick_Config+0x40>)
 8000cee:	2200      	movs	r2, #0
 8000cf0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000cf2:	4b04      	ldr	r3, [pc, #16]	; (8000d04 <SysTick_Config+0x40>)
 8000cf4:	2207      	movs	r2, #7
 8000cf6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000cf8:	2300      	movs	r3, #0
}
 8000cfa:	4618      	mov	r0, r3
 8000cfc:	3708      	adds	r7, #8
 8000cfe:	46bd      	mov	sp, r7
 8000d00:	bd80      	pop	{r7, pc}
 8000d02:	bf00      	nop
 8000d04:	e000e010 	.word	0xe000e010

08000d08 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	b082      	sub	sp, #8
 8000d0c:	af00      	add	r7, sp, #0
 8000d0e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d10:	6878      	ldr	r0, [r7, #4]
 8000d12:	f7ff ff29 	bl	8000b68 <__NVIC_SetPriorityGrouping>
}
 8000d16:	bf00      	nop
 8000d18:	3708      	adds	r7, #8
 8000d1a:	46bd      	mov	sp, r7
 8000d1c:	bd80      	pop	{r7, pc}

08000d1e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000d1e:	b580      	push	{r7, lr}
 8000d20:	b086      	sub	sp, #24
 8000d22:	af00      	add	r7, sp, #0
 8000d24:	4603      	mov	r3, r0
 8000d26:	60b9      	str	r1, [r7, #8]
 8000d28:	607a      	str	r2, [r7, #4]
 8000d2a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000d2c:	2300      	movs	r3, #0
 8000d2e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000d30:	f7ff ff3e 	bl	8000bb0 <__NVIC_GetPriorityGrouping>
 8000d34:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d36:	687a      	ldr	r2, [r7, #4]
 8000d38:	68b9      	ldr	r1, [r7, #8]
 8000d3a:	6978      	ldr	r0, [r7, #20]
 8000d3c:	f7ff ff8e 	bl	8000c5c <NVIC_EncodePriority>
 8000d40:	4602      	mov	r2, r0
 8000d42:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d46:	4611      	mov	r1, r2
 8000d48:	4618      	mov	r0, r3
 8000d4a:	f7ff ff5d 	bl	8000c08 <__NVIC_SetPriority>
}
 8000d4e:	bf00      	nop
 8000d50:	3718      	adds	r7, #24
 8000d52:	46bd      	mov	sp, r7
 8000d54:	bd80      	pop	{r7, pc}

08000d56 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d56:	b580      	push	{r7, lr}
 8000d58:	b082      	sub	sp, #8
 8000d5a:	af00      	add	r7, sp, #0
 8000d5c:	4603      	mov	r3, r0
 8000d5e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000d60:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d64:	4618      	mov	r0, r3
 8000d66:	f7ff ff31 	bl	8000bcc <__NVIC_EnableIRQ>
}
 8000d6a:	bf00      	nop
 8000d6c:	3708      	adds	r7, #8
 8000d6e:	46bd      	mov	sp, r7
 8000d70:	bd80      	pop	{r7, pc}

08000d72 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000d72:	b580      	push	{r7, lr}
 8000d74:	b082      	sub	sp, #8
 8000d76:	af00      	add	r7, sp, #0
 8000d78:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000d7a:	6878      	ldr	r0, [r7, #4]
 8000d7c:	f7ff ffa2 	bl	8000cc4 <SysTick_Config>
 8000d80:	4603      	mov	r3, r0
}
 8000d82:	4618      	mov	r0, r3
 8000d84:	3708      	adds	r7, #8
 8000d86:	46bd      	mov	sp, r7
 8000d88:	bd80      	pop	{r7, pc}
	...

08000d8c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d8c:	b480      	push	{r7}
 8000d8e:	b089      	sub	sp, #36	; 0x24
 8000d90:	af00      	add	r7, sp, #0
 8000d92:	6078      	str	r0, [r7, #4]
 8000d94:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000d96:	2300      	movs	r3, #0
 8000d98:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000d9a:	2300      	movs	r3, #0
 8000d9c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000d9e:	2300      	movs	r3, #0
 8000da0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000da2:	2300      	movs	r3, #0
 8000da4:	61fb      	str	r3, [r7, #28]
 8000da6:	e16b      	b.n	8001080 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000da8:	2201      	movs	r2, #1
 8000daa:	69fb      	ldr	r3, [r7, #28]
 8000dac:	fa02 f303 	lsl.w	r3, r2, r3
 8000db0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000db2:	683b      	ldr	r3, [r7, #0]
 8000db4:	681b      	ldr	r3, [r3, #0]
 8000db6:	697a      	ldr	r2, [r7, #20]
 8000db8:	4013      	ands	r3, r2
 8000dba:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000dbc:	693a      	ldr	r2, [r7, #16]
 8000dbe:	697b      	ldr	r3, [r7, #20]
 8000dc0:	429a      	cmp	r2, r3
 8000dc2:	f040 815a 	bne.w	800107a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000dc6:	683b      	ldr	r3, [r7, #0]
 8000dc8:	685b      	ldr	r3, [r3, #4]
 8000dca:	f003 0303 	and.w	r3, r3, #3
 8000dce:	2b01      	cmp	r3, #1
 8000dd0:	d005      	beq.n	8000dde <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000dd2:	683b      	ldr	r3, [r7, #0]
 8000dd4:	685b      	ldr	r3, [r3, #4]
 8000dd6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000dda:	2b02      	cmp	r3, #2
 8000ddc:	d130      	bne.n	8000e40 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	689b      	ldr	r3, [r3, #8]
 8000de2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000de4:	69fb      	ldr	r3, [r7, #28]
 8000de6:	005b      	lsls	r3, r3, #1
 8000de8:	2203      	movs	r2, #3
 8000dea:	fa02 f303 	lsl.w	r3, r2, r3
 8000dee:	43db      	mvns	r3, r3
 8000df0:	69ba      	ldr	r2, [r7, #24]
 8000df2:	4013      	ands	r3, r2
 8000df4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000df6:	683b      	ldr	r3, [r7, #0]
 8000df8:	68da      	ldr	r2, [r3, #12]
 8000dfa:	69fb      	ldr	r3, [r7, #28]
 8000dfc:	005b      	lsls	r3, r3, #1
 8000dfe:	fa02 f303 	lsl.w	r3, r2, r3
 8000e02:	69ba      	ldr	r2, [r7, #24]
 8000e04:	4313      	orrs	r3, r2
 8000e06:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	69ba      	ldr	r2, [r7, #24]
 8000e0c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	685b      	ldr	r3, [r3, #4]
 8000e12:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000e14:	2201      	movs	r2, #1
 8000e16:	69fb      	ldr	r3, [r7, #28]
 8000e18:	fa02 f303 	lsl.w	r3, r2, r3
 8000e1c:	43db      	mvns	r3, r3
 8000e1e:	69ba      	ldr	r2, [r7, #24]
 8000e20:	4013      	ands	r3, r2
 8000e22:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000e24:	683b      	ldr	r3, [r7, #0]
 8000e26:	685b      	ldr	r3, [r3, #4]
 8000e28:	091b      	lsrs	r3, r3, #4
 8000e2a:	f003 0201 	and.w	r2, r3, #1
 8000e2e:	69fb      	ldr	r3, [r7, #28]
 8000e30:	fa02 f303 	lsl.w	r3, r2, r3
 8000e34:	69ba      	ldr	r2, [r7, #24]
 8000e36:	4313      	orrs	r3, r2
 8000e38:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	69ba      	ldr	r2, [r7, #24]
 8000e3e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000e40:	683b      	ldr	r3, [r7, #0]
 8000e42:	685b      	ldr	r3, [r3, #4]
 8000e44:	f003 0303 	and.w	r3, r3, #3
 8000e48:	2b03      	cmp	r3, #3
 8000e4a:	d017      	beq.n	8000e7c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	68db      	ldr	r3, [r3, #12]
 8000e50:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000e52:	69fb      	ldr	r3, [r7, #28]
 8000e54:	005b      	lsls	r3, r3, #1
 8000e56:	2203      	movs	r2, #3
 8000e58:	fa02 f303 	lsl.w	r3, r2, r3
 8000e5c:	43db      	mvns	r3, r3
 8000e5e:	69ba      	ldr	r2, [r7, #24]
 8000e60:	4013      	ands	r3, r2
 8000e62:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000e64:	683b      	ldr	r3, [r7, #0]
 8000e66:	689a      	ldr	r2, [r3, #8]
 8000e68:	69fb      	ldr	r3, [r7, #28]
 8000e6a:	005b      	lsls	r3, r3, #1
 8000e6c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e70:	69ba      	ldr	r2, [r7, #24]
 8000e72:	4313      	orrs	r3, r2
 8000e74:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	69ba      	ldr	r2, [r7, #24]
 8000e7a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e7c:	683b      	ldr	r3, [r7, #0]
 8000e7e:	685b      	ldr	r3, [r3, #4]
 8000e80:	f003 0303 	and.w	r3, r3, #3
 8000e84:	2b02      	cmp	r3, #2
 8000e86:	d123      	bne.n	8000ed0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000e88:	69fb      	ldr	r3, [r7, #28]
 8000e8a:	08da      	lsrs	r2, r3, #3
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	3208      	adds	r2, #8
 8000e90:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000e94:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000e96:	69fb      	ldr	r3, [r7, #28]
 8000e98:	f003 0307 	and.w	r3, r3, #7
 8000e9c:	009b      	lsls	r3, r3, #2
 8000e9e:	220f      	movs	r2, #15
 8000ea0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ea4:	43db      	mvns	r3, r3
 8000ea6:	69ba      	ldr	r2, [r7, #24]
 8000ea8:	4013      	ands	r3, r2
 8000eaa:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000eac:	683b      	ldr	r3, [r7, #0]
 8000eae:	691a      	ldr	r2, [r3, #16]
 8000eb0:	69fb      	ldr	r3, [r7, #28]
 8000eb2:	f003 0307 	and.w	r3, r3, #7
 8000eb6:	009b      	lsls	r3, r3, #2
 8000eb8:	fa02 f303 	lsl.w	r3, r2, r3
 8000ebc:	69ba      	ldr	r2, [r7, #24]
 8000ebe:	4313      	orrs	r3, r2
 8000ec0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000ec2:	69fb      	ldr	r3, [r7, #28]
 8000ec4:	08da      	lsrs	r2, r3, #3
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	3208      	adds	r2, #8
 8000eca:	69b9      	ldr	r1, [r7, #24]
 8000ecc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000ed6:	69fb      	ldr	r3, [r7, #28]
 8000ed8:	005b      	lsls	r3, r3, #1
 8000eda:	2203      	movs	r2, #3
 8000edc:	fa02 f303 	lsl.w	r3, r2, r3
 8000ee0:	43db      	mvns	r3, r3
 8000ee2:	69ba      	ldr	r2, [r7, #24]
 8000ee4:	4013      	ands	r3, r2
 8000ee6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000ee8:	683b      	ldr	r3, [r7, #0]
 8000eea:	685b      	ldr	r3, [r3, #4]
 8000eec:	f003 0203 	and.w	r2, r3, #3
 8000ef0:	69fb      	ldr	r3, [r7, #28]
 8000ef2:	005b      	lsls	r3, r3, #1
 8000ef4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ef8:	69ba      	ldr	r2, [r7, #24]
 8000efa:	4313      	orrs	r3, r2
 8000efc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	69ba      	ldr	r2, [r7, #24]
 8000f02:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000f04:	683b      	ldr	r3, [r7, #0]
 8000f06:	685b      	ldr	r3, [r3, #4]
 8000f08:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000f0c:	2b00      	cmp	r3, #0
 8000f0e:	f000 80b4 	beq.w	800107a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f12:	2300      	movs	r3, #0
 8000f14:	60fb      	str	r3, [r7, #12]
 8000f16:	4b60      	ldr	r3, [pc, #384]	; (8001098 <HAL_GPIO_Init+0x30c>)
 8000f18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f1a:	4a5f      	ldr	r2, [pc, #380]	; (8001098 <HAL_GPIO_Init+0x30c>)
 8000f1c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f20:	6453      	str	r3, [r2, #68]	; 0x44
 8000f22:	4b5d      	ldr	r3, [pc, #372]	; (8001098 <HAL_GPIO_Init+0x30c>)
 8000f24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f26:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f2a:	60fb      	str	r3, [r7, #12]
 8000f2c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000f2e:	4a5b      	ldr	r2, [pc, #364]	; (800109c <HAL_GPIO_Init+0x310>)
 8000f30:	69fb      	ldr	r3, [r7, #28]
 8000f32:	089b      	lsrs	r3, r3, #2
 8000f34:	3302      	adds	r3, #2
 8000f36:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f3a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000f3c:	69fb      	ldr	r3, [r7, #28]
 8000f3e:	f003 0303 	and.w	r3, r3, #3
 8000f42:	009b      	lsls	r3, r3, #2
 8000f44:	220f      	movs	r2, #15
 8000f46:	fa02 f303 	lsl.w	r3, r2, r3
 8000f4a:	43db      	mvns	r3, r3
 8000f4c:	69ba      	ldr	r2, [r7, #24]
 8000f4e:	4013      	ands	r3, r2
 8000f50:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	4a52      	ldr	r2, [pc, #328]	; (80010a0 <HAL_GPIO_Init+0x314>)
 8000f56:	4293      	cmp	r3, r2
 8000f58:	d02b      	beq.n	8000fb2 <HAL_GPIO_Init+0x226>
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	4a51      	ldr	r2, [pc, #324]	; (80010a4 <HAL_GPIO_Init+0x318>)
 8000f5e:	4293      	cmp	r3, r2
 8000f60:	d025      	beq.n	8000fae <HAL_GPIO_Init+0x222>
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	4a50      	ldr	r2, [pc, #320]	; (80010a8 <HAL_GPIO_Init+0x31c>)
 8000f66:	4293      	cmp	r3, r2
 8000f68:	d01f      	beq.n	8000faa <HAL_GPIO_Init+0x21e>
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	4a4f      	ldr	r2, [pc, #316]	; (80010ac <HAL_GPIO_Init+0x320>)
 8000f6e:	4293      	cmp	r3, r2
 8000f70:	d019      	beq.n	8000fa6 <HAL_GPIO_Init+0x21a>
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	4a4e      	ldr	r2, [pc, #312]	; (80010b0 <HAL_GPIO_Init+0x324>)
 8000f76:	4293      	cmp	r3, r2
 8000f78:	d013      	beq.n	8000fa2 <HAL_GPIO_Init+0x216>
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	4a4d      	ldr	r2, [pc, #308]	; (80010b4 <HAL_GPIO_Init+0x328>)
 8000f7e:	4293      	cmp	r3, r2
 8000f80:	d00d      	beq.n	8000f9e <HAL_GPIO_Init+0x212>
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	4a4c      	ldr	r2, [pc, #304]	; (80010b8 <HAL_GPIO_Init+0x32c>)
 8000f86:	4293      	cmp	r3, r2
 8000f88:	d007      	beq.n	8000f9a <HAL_GPIO_Init+0x20e>
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	4a4b      	ldr	r2, [pc, #300]	; (80010bc <HAL_GPIO_Init+0x330>)
 8000f8e:	4293      	cmp	r3, r2
 8000f90:	d101      	bne.n	8000f96 <HAL_GPIO_Init+0x20a>
 8000f92:	2307      	movs	r3, #7
 8000f94:	e00e      	b.n	8000fb4 <HAL_GPIO_Init+0x228>
 8000f96:	2308      	movs	r3, #8
 8000f98:	e00c      	b.n	8000fb4 <HAL_GPIO_Init+0x228>
 8000f9a:	2306      	movs	r3, #6
 8000f9c:	e00a      	b.n	8000fb4 <HAL_GPIO_Init+0x228>
 8000f9e:	2305      	movs	r3, #5
 8000fa0:	e008      	b.n	8000fb4 <HAL_GPIO_Init+0x228>
 8000fa2:	2304      	movs	r3, #4
 8000fa4:	e006      	b.n	8000fb4 <HAL_GPIO_Init+0x228>
 8000fa6:	2303      	movs	r3, #3
 8000fa8:	e004      	b.n	8000fb4 <HAL_GPIO_Init+0x228>
 8000faa:	2302      	movs	r3, #2
 8000fac:	e002      	b.n	8000fb4 <HAL_GPIO_Init+0x228>
 8000fae:	2301      	movs	r3, #1
 8000fb0:	e000      	b.n	8000fb4 <HAL_GPIO_Init+0x228>
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	69fa      	ldr	r2, [r7, #28]
 8000fb6:	f002 0203 	and.w	r2, r2, #3
 8000fba:	0092      	lsls	r2, r2, #2
 8000fbc:	4093      	lsls	r3, r2
 8000fbe:	69ba      	ldr	r2, [r7, #24]
 8000fc0:	4313      	orrs	r3, r2
 8000fc2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000fc4:	4935      	ldr	r1, [pc, #212]	; (800109c <HAL_GPIO_Init+0x310>)
 8000fc6:	69fb      	ldr	r3, [r7, #28]
 8000fc8:	089b      	lsrs	r3, r3, #2
 8000fca:	3302      	adds	r3, #2
 8000fcc:	69ba      	ldr	r2, [r7, #24]
 8000fce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000fd2:	4b3b      	ldr	r3, [pc, #236]	; (80010c0 <HAL_GPIO_Init+0x334>)
 8000fd4:	689b      	ldr	r3, [r3, #8]
 8000fd6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000fd8:	693b      	ldr	r3, [r7, #16]
 8000fda:	43db      	mvns	r3, r3
 8000fdc:	69ba      	ldr	r2, [r7, #24]
 8000fde:	4013      	ands	r3, r2
 8000fe0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000fe2:	683b      	ldr	r3, [r7, #0]
 8000fe4:	685b      	ldr	r3, [r3, #4]
 8000fe6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d003      	beq.n	8000ff6 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8000fee:	69ba      	ldr	r2, [r7, #24]
 8000ff0:	693b      	ldr	r3, [r7, #16]
 8000ff2:	4313      	orrs	r3, r2
 8000ff4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000ff6:	4a32      	ldr	r2, [pc, #200]	; (80010c0 <HAL_GPIO_Init+0x334>)
 8000ff8:	69bb      	ldr	r3, [r7, #24]
 8000ffa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000ffc:	4b30      	ldr	r3, [pc, #192]	; (80010c0 <HAL_GPIO_Init+0x334>)
 8000ffe:	68db      	ldr	r3, [r3, #12]
 8001000:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001002:	693b      	ldr	r3, [r7, #16]
 8001004:	43db      	mvns	r3, r3
 8001006:	69ba      	ldr	r2, [r7, #24]
 8001008:	4013      	ands	r3, r2
 800100a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800100c:	683b      	ldr	r3, [r7, #0]
 800100e:	685b      	ldr	r3, [r3, #4]
 8001010:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001014:	2b00      	cmp	r3, #0
 8001016:	d003      	beq.n	8001020 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001018:	69ba      	ldr	r2, [r7, #24]
 800101a:	693b      	ldr	r3, [r7, #16]
 800101c:	4313      	orrs	r3, r2
 800101e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001020:	4a27      	ldr	r2, [pc, #156]	; (80010c0 <HAL_GPIO_Init+0x334>)
 8001022:	69bb      	ldr	r3, [r7, #24]
 8001024:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001026:	4b26      	ldr	r3, [pc, #152]	; (80010c0 <HAL_GPIO_Init+0x334>)
 8001028:	685b      	ldr	r3, [r3, #4]
 800102a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800102c:	693b      	ldr	r3, [r7, #16]
 800102e:	43db      	mvns	r3, r3
 8001030:	69ba      	ldr	r2, [r7, #24]
 8001032:	4013      	ands	r3, r2
 8001034:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001036:	683b      	ldr	r3, [r7, #0]
 8001038:	685b      	ldr	r3, [r3, #4]
 800103a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800103e:	2b00      	cmp	r3, #0
 8001040:	d003      	beq.n	800104a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001042:	69ba      	ldr	r2, [r7, #24]
 8001044:	693b      	ldr	r3, [r7, #16]
 8001046:	4313      	orrs	r3, r2
 8001048:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800104a:	4a1d      	ldr	r2, [pc, #116]	; (80010c0 <HAL_GPIO_Init+0x334>)
 800104c:	69bb      	ldr	r3, [r7, #24]
 800104e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001050:	4b1b      	ldr	r3, [pc, #108]	; (80010c0 <HAL_GPIO_Init+0x334>)
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001056:	693b      	ldr	r3, [r7, #16]
 8001058:	43db      	mvns	r3, r3
 800105a:	69ba      	ldr	r2, [r7, #24]
 800105c:	4013      	ands	r3, r2
 800105e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001060:	683b      	ldr	r3, [r7, #0]
 8001062:	685b      	ldr	r3, [r3, #4]
 8001064:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001068:	2b00      	cmp	r3, #0
 800106a:	d003      	beq.n	8001074 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800106c:	69ba      	ldr	r2, [r7, #24]
 800106e:	693b      	ldr	r3, [r7, #16]
 8001070:	4313      	orrs	r3, r2
 8001072:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001074:	4a12      	ldr	r2, [pc, #72]	; (80010c0 <HAL_GPIO_Init+0x334>)
 8001076:	69bb      	ldr	r3, [r7, #24]
 8001078:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800107a:	69fb      	ldr	r3, [r7, #28]
 800107c:	3301      	adds	r3, #1
 800107e:	61fb      	str	r3, [r7, #28]
 8001080:	69fb      	ldr	r3, [r7, #28]
 8001082:	2b0f      	cmp	r3, #15
 8001084:	f67f ae90 	bls.w	8000da8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001088:	bf00      	nop
 800108a:	bf00      	nop
 800108c:	3724      	adds	r7, #36	; 0x24
 800108e:	46bd      	mov	sp, r7
 8001090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001094:	4770      	bx	lr
 8001096:	bf00      	nop
 8001098:	40023800 	.word	0x40023800
 800109c:	40013800 	.word	0x40013800
 80010a0:	40020000 	.word	0x40020000
 80010a4:	40020400 	.word	0x40020400
 80010a8:	40020800 	.word	0x40020800
 80010ac:	40020c00 	.word	0x40020c00
 80010b0:	40021000 	.word	0x40021000
 80010b4:	40021400 	.word	0x40021400
 80010b8:	40021800 	.word	0x40021800
 80010bc:	40021c00 	.word	0x40021c00
 80010c0:	40013c00 	.word	0x40013c00

080010c4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80010c4:	b480      	push	{r7}
 80010c6:	b085      	sub	sp, #20
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	6078      	str	r0, [r7, #4]
 80010cc:	460b      	mov	r3, r1
 80010ce:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	691a      	ldr	r2, [r3, #16]
 80010d4:	887b      	ldrh	r3, [r7, #2]
 80010d6:	4013      	ands	r3, r2
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d002      	beq.n	80010e2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80010dc:	2301      	movs	r3, #1
 80010de:	73fb      	strb	r3, [r7, #15]
 80010e0:	e001      	b.n	80010e6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80010e2:	2300      	movs	r3, #0
 80010e4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80010e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80010e8:	4618      	mov	r0, r3
 80010ea:	3714      	adds	r7, #20
 80010ec:	46bd      	mov	sp, r7
 80010ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f2:	4770      	bx	lr

080010f4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80010f4:	b480      	push	{r7}
 80010f6:	b083      	sub	sp, #12
 80010f8:	af00      	add	r7, sp, #0
 80010fa:	6078      	str	r0, [r7, #4]
 80010fc:	460b      	mov	r3, r1
 80010fe:	807b      	strh	r3, [r7, #2]
 8001100:	4613      	mov	r3, r2
 8001102:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001104:	787b      	ldrb	r3, [r7, #1]
 8001106:	2b00      	cmp	r3, #0
 8001108:	d003      	beq.n	8001112 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800110a:	887a      	ldrh	r2, [r7, #2]
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001110:	e003      	b.n	800111a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001112:	887b      	ldrh	r3, [r7, #2]
 8001114:	041a      	lsls	r2, r3, #16
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	619a      	str	r2, [r3, #24]
}
 800111a:	bf00      	nop
 800111c:	370c      	adds	r7, #12
 800111e:	46bd      	mov	sp, r7
 8001120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001124:	4770      	bx	lr

08001126 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001126:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001128:	b08f      	sub	sp, #60	; 0x3c
 800112a:	af0a      	add	r7, sp, #40	; 0x28
 800112c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	2b00      	cmp	r3, #0
 8001132:	d101      	bne.n	8001138 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001134:	2301      	movs	r3, #1
 8001136:	e10f      	b.n	8001358 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8001144:	b2db      	uxtb	r3, r3
 8001146:	2b00      	cmp	r3, #0
 8001148:	d106      	bne.n	8001158 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	2200      	movs	r2, #0
 800114e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001152:	6878      	ldr	r0, [r7, #4]
 8001154:	f005 fe76 	bl	8006e44 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	2203      	movs	r2, #3
 800115c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001160:	68bb      	ldr	r3, [r7, #8]
 8001162:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001164:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001168:	2b00      	cmp	r3, #0
 800116a:	d102      	bne.n	8001172 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	2200      	movs	r2, #0
 8001170:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	4618      	mov	r0, r3
 8001178:	f002 f943 	bl	8003402 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	603b      	str	r3, [r7, #0]
 8001182:	687e      	ldr	r6, [r7, #4]
 8001184:	466d      	mov	r5, sp
 8001186:	f106 0410 	add.w	r4, r6, #16
 800118a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800118c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800118e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001190:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001192:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001196:	e885 0003 	stmia.w	r5, {r0, r1}
 800119a:	1d33      	adds	r3, r6, #4
 800119c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800119e:	6838      	ldr	r0, [r7, #0]
 80011a0:	f002 f81a 	bl	80031d8 <USB_CoreInit>
 80011a4:	4603      	mov	r3, r0
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d005      	beq.n	80011b6 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	2202      	movs	r2, #2
 80011ae:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80011b2:	2301      	movs	r3, #1
 80011b4:	e0d0      	b.n	8001358 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	2100      	movs	r1, #0
 80011bc:	4618      	mov	r0, r3
 80011be:	f002 f931 	bl	8003424 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80011c2:	2300      	movs	r3, #0
 80011c4:	73fb      	strb	r3, [r7, #15]
 80011c6:	e04a      	b.n	800125e <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80011c8:	7bfa      	ldrb	r2, [r7, #15]
 80011ca:	6879      	ldr	r1, [r7, #4]
 80011cc:	4613      	mov	r3, r2
 80011ce:	00db      	lsls	r3, r3, #3
 80011d0:	4413      	add	r3, r2
 80011d2:	009b      	lsls	r3, r3, #2
 80011d4:	440b      	add	r3, r1
 80011d6:	333d      	adds	r3, #61	; 0x3d
 80011d8:	2201      	movs	r2, #1
 80011da:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80011dc:	7bfa      	ldrb	r2, [r7, #15]
 80011de:	6879      	ldr	r1, [r7, #4]
 80011e0:	4613      	mov	r3, r2
 80011e2:	00db      	lsls	r3, r3, #3
 80011e4:	4413      	add	r3, r2
 80011e6:	009b      	lsls	r3, r3, #2
 80011e8:	440b      	add	r3, r1
 80011ea:	333c      	adds	r3, #60	; 0x3c
 80011ec:	7bfa      	ldrb	r2, [r7, #15]
 80011ee:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80011f0:	7bfa      	ldrb	r2, [r7, #15]
 80011f2:	7bfb      	ldrb	r3, [r7, #15]
 80011f4:	b298      	uxth	r0, r3
 80011f6:	6879      	ldr	r1, [r7, #4]
 80011f8:	4613      	mov	r3, r2
 80011fa:	00db      	lsls	r3, r3, #3
 80011fc:	4413      	add	r3, r2
 80011fe:	009b      	lsls	r3, r3, #2
 8001200:	440b      	add	r3, r1
 8001202:	3344      	adds	r3, #68	; 0x44
 8001204:	4602      	mov	r2, r0
 8001206:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001208:	7bfa      	ldrb	r2, [r7, #15]
 800120a:	6879      	ldr	r1, [r7, #4]
 800120c:	4613      	mov	r3, r2
 800120e:	00db      	lsls	r3, r3, #3
 8001210:	4413      	add	r3, r2
 8001212:	009b      	lsls	r3, r3, #2
 8001214:	440b      	add	r3, r1
 8001216:	3340      	adds	r3, #64	; 0x40
 8001218:	2200      	movs	r2, #0
 800121a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800121c:	7bfa      	ldrb	r2, [r7, #15]
 800121e:	6879      	ldr	r1, [r7, #4]
 8001220:	4613      	mov	r3, r2
 8001222:	00db      	lsls	r3, r3, #3
 8001224:	4413      	add	r3, r2
 8001226:	009b      	lsls	r3, r3, #2
 8001228:	440b      	add	r3, r1
 800122a:	3348      	adds	r3, #72	; 0x48
 800122c:	2200      	movs	r2, #0
 800122e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001230:	7bfa      	ldrb	r2, [r7, #15]
 8001232:	6879      	ldr	r1, [r7, #4]
 8001234:	4613      	mov	r3, r2
 8001236:	00db      	lsls	r3, r3, #3
 8001238:	4413      	add	r3, r2
 800123a:	009b      	lsls	r3, r3, #2
 800123c:	440b      	add	r3, r1
 800123e:	334c      	adds	r3, #76	; 0x4c
 8001240:	2200      	movs	r2, #0
 8001242:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001244:	7bfa      	ldrb	r2, [r7, #15]
 8001246:	6879      	ldr	r1, [r7, #4]
 8001248:	4613      	mov	r3, r2
 800124a:	00db      	lsls	r3, r3, #3
 800124c:	4413      	add	r3, r2
 800124e:	009b      	lsls	r3, r3, #2
 8001250:	440b      	add	r3, r1
 8001252:	3354      	adds	r3, #84	; 0x54
 8001254:	2200      	movs	r2, #0
 8001256:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001258:	7bfb      	ldrb	r3, [r7, #15]
 800125a:	3301      	adds	r3, #1
 800125c:	73fb      	strb	r3, [r7, #15]
 800125e:	7bfa      	ldrb	r2, [r7, #15]
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	685b      	ldr	r3, [r3, #4]
 8001264:	429a      	cmp	r2, r3
 8001266:	d3af      	bcc.n	80011c8 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001268:	2300      	movs	r3, #0
 800126a:	73fb      	strb	r3, [r7, #15]
 800126c:	e044      	b.n	80012f8 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800126e:	7bfa      	ldrb	r2, [r7, #15]
 8001270:	6879      	ldr	r1, [r7, #4]
 8001272:	4613      	mov	r3, r2
 8001274:	00db      	lsls	r3, r3, #3
 8001276:	4413      	add	r3, r2
 8001278:	009b      	lsls	r3, r3, #2
 800127a:	440b      	add	r3, r1
 800127c:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8001280:	2200      	movs	r2, #0
 8001282:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001284:	7bfa      	ldrb	r2, [r7, #15]
 8001286:	6879      	ldr	r1, [r7, #4]
 8001288:	4613      	mov	r3, r2
 800128a:	00db      	lsls	r3, r3, #3
 800128c:	4413      	add	r3, r2
 800128e:	009b      	lsls	r3, r3, #2
 8001290:	440b      	add	r3, r1
 8001292:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8001296:	7bfa      	ldrb	r2, [r7, #15]
 8001298:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800129a:	7bfa      	ldrb	r2, [r7, #15]
 800129c:	6879      	ldr	r1, [r7, #4]
 800129e:	4613      	mov	r3, r2
 80012a0:	00db      	lsls	r3, r3, #3
 80012a2:	4413      	add	r3, r2
 80012a4:	009b      	lsls	r3, r3, #2
 80012a6:	440b      	add	r3, r1
 80012a8:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80012ac:	2200      	movs	r2, #0
 80012ae:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80012b0:	7bfa      	ldrb	r2, [r7, #15]
 80012b2:	6879      	ldr	r1, [r7, #4]
 80012b4:	4613      	mov	r3, r2
 80012b6:	00db      	lsls	r3, r3, #3
 80012b8:	4413      	add	r3, r2
 80012ba:	009b      	lsls	r3, r3, #2
 80012bc:	440b      	add	r3, r1
 80012be:	f503 7322 	add.w	r3, r3, #648	; 0x288
 80012c2:	2200      	movs	r2, #0
 80012c4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80012c6:	7bfa      	ldrb	r2, [r7, #15]
 80012c8:	6879      	ldr	r1, [r7, #4]
 80012ca:	4613      	mov	r3, r2
 80012cc:	00db      	lsls	r3, r3, #3
 80012ce:	4413      	add	r3, r2
 80012d0:	009b      	lsls	r3, r3, #2
 80012d2:	440b      	add	r3, r1
 80012d4:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80012d8:	2200      	movs	r2, #0
 80012da:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80012dc:	7bfa      	ldrb	r2, [r7, #15]
 80012de:	6879      	ldr	r1, [r7, #4]
 80012e0:	4613      	mov	r3, r2
 80012e2:	00db      	lsls	r3, r3, #3
 80012e4:	4413      	add	r3, r2
 80012e6:	009b      	lsls	r3, r3, #2
 80012e8:	440b      	add	r3, r1
 80012ea:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80012ee:	2200      	movs	r2, #0
 80012f0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80012f2:	7bfb      	ldrb	r3, [r7, #15]
 80012f4:	3301      	adds	r3, #1
 80012f6:	73fb      	strb	r3, [r7, #15]
 80012f8:	7bfa      	ldrb	r2, [r7, #15]
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	685b      	ldr	r3, [r3, #4]
 80012fe:	429a      	cmp	r2, r3
 8001300:	d3b5      	bcc.n	800126e <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	603b      	str	r3, [r7, #0]
 8001308:	687e      	ldr	r6, [r7, #4]
 800130a:	466d      	mov	r5, sp
 800130c:	f106 0410 	add.w	r4, r6, #16
 8001310:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001312:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001314:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001316:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001318:	e894 0003 	ldmia.w	r4, {r0, r1}
 800131c:	e885 0003 	stmia.w	r5, {r0, r1}
 8001320:	1d33      	adds	r3, r6, #4
 8001322:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001324:	6838      	ldr	r0, [r7, #0]
 8001326:	f002 f8c9 	bl	80034bc <USB_DevInit>
 800132a:	4603      	mov	r3, r0
 800132c:	2b00      	cmp	r3, #0
 800132e:	d005      	beq.n	800133c <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	2202      	movs	r2, #2
 8001334:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8001338:	2301      	movs	r3, #1
 800133a:	e00d      	b.n	8001358 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	2200      	movs	r2, #0
 8001340:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	2201      	movs	r2, #1
 8001348:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	4618      	mov	r0, r3
 8001352:	f003 fa18 	bl	8004786 <USB_DevDisconnect>

  return HAL_OK;
 8001356:	2300      	movs	r3, #0
}
 8001358:	4618      	mov	r0, r3
 800135a:	3714      	adds	r7, #20
 800135c:	46bd      	mov	sp, r7
 800135e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001360 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001360:	b580      	push	{r7, lr}
 8001362:	b084      	sub	sp, #16
 8001364:	af00      	add	r7, sp, #0
 8001366:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001374:	2b01      	cmp	r3, #1
 8001376:	d101      	bne.n	800137c <HAL_PCD_Start+0x1c>
 8001378:	2302      	movs	r3, #2
 800137a:	e020      	b.n	80013be <HAL_PCD_Start+0x5e>
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	2201      	movs	r2, #1
 8001380:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001388:	2b01      	cmp	r3, #1
 800138a:	d109      	bne.n	80013a0 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8001390:	2b01      	cmp	r3, #1
 8001392:	d005      	beq.n	80013a0 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8001394:	68fb      	ldr	r3, [r7, #12]
 8001396:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001398:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800139c:	68fb      	ldr	r3, [r7, #12]
 800139e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	4618      	mov	r0, r3
 80013a6:	f002 f81b 	bl	80033e0 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	4618      	mov	r0, r3
 80013b0:	f003 f9c8 	bl	8004744 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	2200      	movs	r2, #0
 80013b8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80013bc:	2300      	movs	r3, #0
}
 80013be:	4618      	mov	r0, r3
 80013c0:	3710      	adds	r7, #16
 80013c2:	46bd      	mov	sp, r7
 80013c4:	bd80      	pop	{r7, pc}

080013c6 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80013c6:	b590      	push	{r4, r7, lr}
 80013c8:	b08d      	sub	sp, #52	; 0x34
 80013ca:	af00      	add	r7, sp, #0
 80013cc:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80013d4:	6a3b      	ldr	r3, [r7, #32]
 80013d6:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	4618      	mov	r0, r3
 80013de:	f003 fa86 	bl	80048ee <USB_GetMode>
 80013e2:	4603      	mov	r3, r0
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	f040 848a 	bne.w	8001cfe <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	4618      	mov	r0, r3
 80013f0:	f003 f9ea 	bl	80047c8 <USB_ReadInterrupts>
 80013f4:	4603      	mov	r3, r0
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	f000 8480 	beq.w	8001cfc <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 80013fc:	69fb      	ldr	r3, [r7, #28]
 80013fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001402:	689b      	ldr	r3, [r3, #8]
 8001404:	0a1b      	lsrs	r3, r3, #8
 8001406:	f3c3 020d 	ubfx	r2, r3, #0, #14
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	4618      	mov	r0, r3
 8001416:	f003 f9d7 	bl	80047c8 <USB_ReadInterrupts>
 800141a:	4603      	mov	r3, r0
 800141c:	f003 0302 	and.w	r3, r3, #2
 8001420:	2b02      	cmp	r3, #2
 8001422:	d107      	bne.n	8001434 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	695a      	ldr	r2, [r3, #20]
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	f002 0202 	and.w	r2, r2, #2
 8001432:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	4618      	mov	r0, r3
 800143a:	f003 f9c5 	bl	80047c8 <USB_ReadInterrupts>
 800143e:	4603      	mov	r3, r0
 8001440:	f003 0310 	and.w	r3, r3, #16
 8001444:	2b10      	cmp	r3, #16
 8001446:	d161      	bne.n	800150c <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	699a      	ldr	r2, [r3, #24]
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	f022 0210 	bic.w	r2, r2, #16
 8001456:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8001458:	6a3b      	ldr	r3, [r7, #32]
 800145a:	6a1b      	ldr	r3, [r3, #32]
 800145c:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 800145e:	69bb      	ldr	r3, [r7, #24]
 8001460:	f003 020f 	and.w	r2, r3, #15
 8001464:	4613      	mov	r3, r2
 8001466:	00db      	lsls	r3, r3, #3
 8001468:	4413      	add	r3, r2
 800146a:	009b      	lsls	r3, r3, #2
 800146c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001470:	687a      	ldr	r2, [r7, #4]
 8001472:	4413      	add	r3, r2
 8001474:	3304      	adds	r3, #4
 8001476:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8001478:	69bb      	ldr	r3, [r7, #24]
 800147a:	0c5b      	lsrs	r3, r3, #17
 800147c:	f003 030f 	and.w	r3, r3, #15
 8001480:	2b02      	cmp	r3, #2
 8001482:	d124      	bne.n	80014ce <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8001484:	69ba      	ldr	r2, [r7, #24]
 8001486:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 800148a:	4013      	ands	r3, r2
 800148c:	2b00      	cmp	r3, #0
 800148e:	d035      	beq.n	80014fc <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001490:	697b      	ldr	r3, [r7, #20]
 8001492:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8001494:	69bb      	ldr	r3, [r7, #24]
 8001496:	091b      	lsrs	r3, r3, #4
 8001498:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800149a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800149e:	b29b      	uxth	r3, r3
 80014a0:	461a      	mov	r2, r3
 80014a2:	6a38      	ldr	r0, [r7, #32]
 80014a4:	f002 fffc 	bl	80044a0 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80014a8:	697b      	ldr	r3, [r7, #20]
 80014aa:	691a      	ldr	r2, [r3, #16]
 80014ac:	69bb      	ldr	r3, [r7, #24]
 80014ae:	091b      	lsrs	r3, r3, #4
 80014b0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80014b4:	441a      	add	r2, r3
 80014b6:	697b      	ldr	r3, [r7, #20]
 80014b8:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80014ba:	697b      	ldr	r3, [r7, #20]
 80014bc:	6a1a      	ldr	r2, [r3, #32]
 80014be:	69bb      	ldr	r3, [r7, #24]
 80014c0:	091b      	lsrs	r3, r3, #4
 80014c2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80014c6:	441a      	add	r2, r3
 80014c8:	697b      	ldr	r3, [r7, #20]
 80014ca:	621a      	str	r2, [r3, #32]
 80014cc:	e016      	b.n	80014fc <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 80014ce:	69bb      	ldr	r3, [r7, #24]
 80014d0:	0c5b      	lsrs	r3, r3, #17
 80014d2:	f003 030f 	and.w	r3, r3, #15
 80014d6:	2b06      	cmp	r3, #6
 80014d8:	d110      	bne.n	80014fc <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80014e0:	2208      	movs	r2, #8
 80014e2:	4619      	mov	r1, r3
 80014e4:	6a38      	ldr	r0, [r7, #32]
 80014e6:	f002 ffdb 	bl	80044a0 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80014ea:	697b      	ldr	r3, [r7, #20]
 80014ec:	6a1a      	ldr	r2, [r3, #32]
 80014ee:	69bb      	ldr	r3, [r7, #24]
 80014f0:	091b      	lsrs	r3, r3, #4
 80014f2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80014f6:	441a      	add	r2, r3
 80014f8:	697b      	ldr	r3, [r7, #20]
 80014fa:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	699a      	ldr	r2, [r3, #24]
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	f042 0210 	orr.w	r2, r2, #16
 800150a:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	4618      	mov	r0, r3
 8001512:	f003 f959 	bl	80047c8 <USB_ReadInterrupts>
 8001516:	4603      	mov	r3, r0
 8001518:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800151c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8001520:	f040 80a7 	bne.w	8001672 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8001524:	2300      	movs	r3, #0
 8001526:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	4618      	mov	r0, r3
 800152e:	f003 f95e 	bl	80047ee <USB_ReadDevAllOutEpInterrupt>
 8001532:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8001534:	e099      	b.n	800166a <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8001536:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001538:	f003 0301 	and.w	r3, r3, #1
 800153c:	2b00      	cmp	r3, #0
 800153e:	f000 808e 	beq.w	800165e <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001548:	b2d2      	uxtb	r2, r2
 800154a:	4611      	mov	r1, r2
 800154c:	4618      	mov	r0, r3
 800154e:	f003 f982 	bl	8004856 <USB_ReadDevOutEPInterrupt>
 8001552:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8001554:	693b      	ldr	r3, [r7, #16]
 8001556:	f003 0301 	and.w	r3, r3, #1
 800155a:	2b00      	cmp	r3, #0
 800155c:	d00c      	beq.n	8001578 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800155e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001560:	015a      	lsls	r2, r3, #5
 8001562:	69fb      	ldr	r3, [r7, #28]
 8001564:	4413      	add	r3, r2
 8001566:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800156a:	461a      	mov	r2, r3
 800156c:	2301      	movs	r3, #1
 800156e:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8001570:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001572:	6878      	ldr	r0, [r7, #4]
 8001574:	f000 fec2 	bl	80022fc <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8001578:	693b      	ldr	r3, [r7, #16]
 800157a:	f003 0308 	and.w	r3, r3, #8
 800157e:	2b00      	cmp	r3, #0
 8001580:	d00c      	beq.n	800159c <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8001582:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001584:	015a      	lsls	r2, r3, #5
 8001586:	69fb      	ldr	r3, [r7, #28]
 8001588:	4413      	add	r3, r2
 800158a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800158e:	461a      	mov	r2, r3
 8001590:	2308      	movs	r3, #8
 8001592:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8001594:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001596:	6878      	ldr	r0, [r7, #4]
 8001598:	f000 ff98 	bl	80024cc <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800159c:	693b      	ldr	r3, [r7, #16]
 800159e:	f003 0310 	and.w	r3, r3, #16
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d008      	beq.n	80015b8 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80015a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015a8:	015a      	lsls	r2, r3, #5
 80015aa:	69fb      	ldr	r3, [r7, #28]
 80015ac:	4413      	add	r3, r2
 80015ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80015b2:	461a      	mov	r2, r3
 80015b4:	2310      	movs	r3, #16
 80015b6:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 80015b8:	693b      	ldr	r3, [r7, #16]
 80015ba:	f003 0302 	and.w	r3, r3, #2
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d030      	beq.n	8001624 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 80015c2:	6a3b      	ldr	r3, [r7, #32]
 80015c4:	695b      	ldr	r3, [r3, #20]
 80015c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80015ca:	2b80      	cmp	r3, #128	; 0x80
 80015cc:	d109      	bne.n	80015e2 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 80015ce:	69fb      	ldr	r3, [r7, #28]
 80015d0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80015d4:	685b      	ldr	r3, [r3, #4]
 80015d6:	69fa      	ldr	r2, [r7, #28]
 80015d8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80015dc:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80015e0:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 80015e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80015e4:	4613      	mov	r3, r2
 80015e6:	00db      	lsls	r3, r3, #3
 80015e8:	4413      	add	r3, r2
 80015ea:	009b      	lsls	r3, r3, #2
 80015ec:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80015f0:	687a      	ldr	r2, [r7, #4]
 80015f2:	4413      	add	r3, r2
 80015f4:	3304      	adds	r3, #4
 80015f6:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80015f8:	697b      	ldr	r3, [r7, #20]
 80015fa:	78db      	ldrb	r3, [r3, #3]
 80015fc:	2b01      	cmp	r3, #1
 80015fe:	d108      	bne.n	8001612 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8001600:	697b      	ldr	r3, [r7, #20]
 8001602:	2200      	movs	r2, #0
 8001604:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8001606:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001608:	b2db      	uxtb	r3, r3
 800160a:	4619      	mov	r1, r3
 800160c:	6878      	ldr	r0, [r7, #4]
 800160e:	f005 fd1f 	bl	8007050 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8001612:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001614:	015a      	lsls	r2, r3, #5
 8001616:	69fb      	ldr	r3, [r7, #28]
 8001618:	4413      	add	r3, r2
 800161a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800161e:	461a      	mov	r2, r3
 8001620:	2302      	movs	r3, #2
 8001622:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8001624:	693b      	ldr	r3, [r7, #16]
 8001626:	f003 0320 	and.w	r3, r3, #32
 800162a:	2b00      	cmp	r3, #0
 800162c:	d008      	beq.n	8001640 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800162e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001630:	015a      	lsls	r2, r3, #5
 8001632:	69fb      	ldr	r3, [r7, #28]
 8001634:	4413      	add	r3, r2
 8001636:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800163a:	461a      	mov	r2, r3
 800163c:	2320      	movs	r3, #32
 800163e:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8001640:	693b      	ldr	r3, [r7, #16]
 8001642:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001646:	2b00      	cmp	r3, #0
 8001648:	d009      	beq.n	800165e <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800164a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800164c:	015a      	lsls	r2, r3, #5
 800164e:	69fb      	ldr	r3, [r7, #28]
 8001650:	4413      	add	r3, r2
 8001652:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001656:	461a      	mov	r2, r3
 8001658:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800165c:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800165e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001660:	3301      	adds	r3, #1
 8001662:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8001664:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001666:	085b      	lsrs	r3, r3, #1
 8001668:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800166a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800166c:	2b00      	cmp	r3, #0
 800166e:	f47f af62 	bne.w	8001536 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	4618      	mov	r0, r3
 8001678:	f003 f8a6 	bl	80047c8 <USB_ReadInterrupts>
 800167c:	4603      	mov	r3, r0
 800167e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001682:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8001686:	f040 80db 	bne.w	8001840 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	4618      	mov	r0, r3
 8001690:	f003 f8c7 	bl	8004822 <USB_ReadDevAllInEpInterrupt>
 8001694:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8001696:	2300      	movs	r3, #0
 8001698:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 800169a:	e0cd      	b.n	8001838 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800169c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800169e:	f003 0301 	and.w	r3, r3, #1
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	f000 80c2 	beq.w	800182c <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80016ae:	b2d2      	uxtb	r2, r2
 80016b0:	4611      	mov	r1, r2
 80016b2:	4618      	mov	r0, r3
 80016b4:	f003 f8ed 	bl	8004892 <USB_ReadDevInEPInterrupt>
 80016b8:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80016ba:	693b      	ldr	r3, [r7, #16]
 80016bc:	f003 0301 	and.w	r3, r3, #1
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d057      	beq.n	8001774 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80016c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016c6:	f003 030f 	and.w	r3, r3, #15
 80016ca:	2201      	movs	r2, #1
 80016cc:	fa02 f303 	lsl.w	r3, r2, r3
 80016d0:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80016d2:	69fb      	ldr	r3, [r7, #28]
 80016d4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80016d8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80016da:	68fb      	ldr	r3, [r7, #12]
 80016dc:	43db      	mvns	r3, r3
 80016de:	69f9      	ldr	r1, [r7, #28]
 80016e0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80016e4:	4013      	ands	r3, r2
 80016e6:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80016e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016ea:	015a      	lsls	r2, r3, #5
 80016ec:	69fb      	ldr	r3, [r7, #28]
 80016ee:	4413      	add	r3, r2
 80016f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80016f4:	461a      	mov	r2, r3
 80016f6:	2301      	movs	r3, #1
 80016f8:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	691b      	ldr	r3, [r3, #16]
 80016fe:	2b01      	cmp	r3, #1
 8001700:	d132      	bne.n	8001768 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8001702:	6879      	ldr	r1, [r7, #4]
 8001704:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001706:	4613      	mov	r3, r2
 8001708:	00db      	lsls	r3, r3, #3
 800170a:	4413      	add	r3, r2
 800170c:	009b      	lsls	r3, r3, #2
 800170e:	440b      	add	r3, r1
 8001710:	334c      	adds	r3, #76	; 0x4c
 8001712:	6819      	ldr	r1, [r3, #0]
 8001714:	6878      	ldr	r0, [r7, #4]
 8001716:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001718:	4613      	mov	r3, r2
 800171a:	00db      	lsls	r3, r3, #3
 800171c:	4413      	add	r3, r2
 800171e:	009b      	lsls	r3, r3, #2
 8001720:	4403      	add	r3, r0
 8001722:	3348      	adds	r3, #72	; 0x48
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	4419      	add	r1, r3
 8001728:	6878      	ldr	r0, [r7, #4]
 800172a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800172c:	4613      	mov	r3, r2
 800172e:	00db      	lsls	r3, r3, #3
 8001730:	4413      	add	r3, r2
 8001732:	009b      	lsls	r3, r3, #2
 8001734:	4403      	add	r3, r0
 8001736:	334c      	adds	r3, #76	; 0x4c
 8001738:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800173a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800173c:	2b00      	cmp	r3, #0
 800173e:	d113      	bne.n	8001768 <HAL_PCD_IRQHandler+0x3a2>
 8001740:	6879      	ldr	r1, [r7, #4]
 8001742:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001744:	4613      	mov	r3, r2
 8001746:	00db      	lsls	r3, r3, #3
 8001748:	4413      	add	r3, r2
 800174a:	009b      	lsls	r3, r3, #2
 800174c:	440b      	add	r3, r1
 800174e:	3354      	adds	r3, #84	; 0x54
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	2b00      	cmp	r3, #0
 8001754:	d108      	bne.n	8001768 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	6818      	ldr	r0, [r3, #0]
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8001760:	461a      	mov	r2, r3
 8001762:	2101      	movs	r1, #1
 8001764:	f003 f8f4 	bl	8004950 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8001768:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800176a:	b2db      	uxtb	r3, r3
 800176c:	4619      	mov	r1, r3
 800176e:	6878      	ldr	r0, [r7, #4]
 8001770:	f005 fbe9 	bl	8006f46 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8001774:	693b      	ldr	r3, [r7, #16]
 8001776:	f003 0308 	and.w	r3, r3, #8
 800177a:	2b00      	cmp	r3, #0
 800177c:	d008      	beq.n	8001790 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800177e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001780:	015a      	lsls	r2, r3, #5
 8001782:	69fb      	ldr	r3, [r7, #28]
 8001784:	4413      	add	r3, r2
 8001786:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800178a:	461a      	mov	r2, r3
 800178c:	2308      	movs	r3, #8
 800178e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8001790:	693b      	ldr	r3, [r7, #16]
 8001792:	f003 0310 	and.w	r3, r3, #16
 8001796:	2b00      	cmp	r3, #0
 8001798:	d008      	beq.n	80017ac <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800179a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800179c:	015a      	lsls	r2, r3, #5
 800179e:	69fb      	ldr	r3, [r7, #28]
 80017a0:	4413      	add	r3, r2
 80017a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80017a6:	461a      	mov	r2, r3
 80017a8:	2310      	movs	r3, #16
 80017aa:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80017ac:	693b      	ldr	r3, [r7, #16]
 80017ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d008      	beq.n	80017c8 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80017b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017b8:	015a      	lsls	r2, r3, #5
 80017ba:	69fb      	ldr	r3, [r7, #28]
 80017bc:	4413      	add	r3, r2
 80017be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80017c2:	461a      	mov	r2, r3
 80017c4:	2340      	movs	r3, #64	; 0x40
 80017c6:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80017c8:	693b      	ldr	r3, [r7, #16]
 80017ca:	f003 0302 	and.w	r3, r3, #2
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d023      	beq.n	800181a <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 80017d2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80017d4:	6a38      	ldr	r0, [r7, #32]
 80017d6:	f001 ffd5 	bl	8003784 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 80017da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80017dc:	4613      	mov	r3, r2
 80017de:	00db      	lsls	r3, r3, #3
 80017e0:	4413      	add	r3, r2
 80017e2:	009b      	lsls	r3, r3, #2
 80017e4:	3338      	adds	r3, #56	; 0x38
 80017e6:	687a      	ldr	r2, [r7, #4]
 80017e8:	4413      	add	r3, r2
 80017ea:	3304      	adds	r3, #4
 80017ec:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80017ee:	697b      	ldr	r3, [r7, #20]
 80017f0:	78db      	ldrb	r3, [r3, #3]
 80017f2:	2b01      	cmp	r3, #1
 80017f4:	d108      	bne.n	8001808 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 80017f6:	697b      	ldr	r3, [r7, #20]
 80017f8:	2200      	movs	r2, #0
 80017fa:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80017fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017fe:	b2db      	uxtb	r3, r3
 8001800:	4619      	mov	r1, r3
 8001802:	6878      	ldr	r0, [r7, #4]
 8001804:	f005 fc36 	bl	8007074 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8001808:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800180a:	015a      	lsls	r2, r3, #5
 800180c:	69fb      	ldr	r3, [r7, #28]
 800180e:	4413      	add	r3, r2
 8001810:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001814:	461a      	mov	r2, r3
 8001816:	2302      	movs	r3, #2
 8001818:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800181a:	693b      	ldr	r3, [r7, #16]
 800181c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001820:	2b00      	cmp	r3, #0
 8001822:	d003      	beq.n	800182c <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8001824:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001826:	6878      	ldr	r0, [r7, #4]
 8001828:	f000 fcdb 	bl	80021e2 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 800182c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800182e:	3301      	adds	r3, #1
 8001830:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8001832:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001834:	085b      	lsrs	r3, r3, #1
 8001836:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8001838:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800183a:	2b00      	cmp	r3, #0
 800183c:	f47f af2e 	bne.w	800169c <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	4618      	mov	r0, r3
 8001846:	f002 ffbf 	bl	80047c8 <USB_ReadInterrupts>
 800184a:	4603      	mov	r3, r0
 800184c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8001850:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001854:	d122      	bne.n	800189c <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001856:	69fb      	ldr	r3, [r7, #28]
 8001858:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800185c:	685b      	ldr	r3, [r3, #4]
 800185e:	69fa      	ldr	r2, [r7, #28]
 8001860:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001864:	f023 0301 	bic.w	r3, r3, #1
 8001868:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8001870:	2b01      	cmp	r3, #1
 8001872:	d108      	bne.n	8001886 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	2200      	movs	r2, #0
 8001878:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800187c:	2100      	movs	r1, #0
 800187e:	6878      	ldr	r0, [r7, #4]
 8001880:	f000 fec2 	bl	8002608 <HAL_PCDEx_LPM_Callback>
 8001884:	e002      	b.n	800188c <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8001886:	6878      	ldr	r0, [r7, #4]
 8001888:	f005 fbd4 	bl	8007034 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	695a      	ldr	r2, [r3, #20]
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 800189a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	4618      	mov	r0, r3
 80018a2:	f002 ff91 	bl	80047c8 <USB_ReadInterrupts>
 80018a6:	4603      	mov	r3, r0
 80018a8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80018ac:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80018b0:	d112      	bne.n	80018d8 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80018b2:	69fb      	ldr	r3, [r7, #28]
 80018b4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80018b8:	689b      	ldr	r3, [r3, #8]
 80018ba:	f003 0301 	and.w	r3, r3, #1
 80018be:	2b01      	cmp	r3, #1
 80018c0:	d102      	bne.n	80018c8 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80018c2:	6878      	ldr	r0, [r7, #4]
 80018c4:	f005 fb90 	bl	8006fe8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	695a      	ldr	r2, [r3, #20]
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 80018d6:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	4618      	mov	r0, r3
 80018de:	f002 ff73 	bl	80047c8 <USB_ReadInterrupts>
 80018e2:	4603      	mov	r3, r0
 80018e4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80018e8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80018ec:	f040 80b7 	bne.w	8001a5e <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80018f0:	69fb      	ldr	r3, [r7, #28]
 80018f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80018f6:	685b      	ldr	r3, [r3, #4]
 80018f8:	69fa      	ldr	r2, [r7, #28]
 80018fa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80018fe:	f023 0301 	bic.w	r3, r3, #1
 8001902:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	2110      	movs	r1, #16
 800190a:	4618      	mov	r0, r3
 800190c:	f001 ff3a 	bl	8003784 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001910:	2300      	movs	r3, #0
 8001912:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001914:	e046      	b.n	80019a4 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8001916:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001918:	015a      	lsls	r2, r3, #5
 800191a:	69fb      	ldr	r3, [r7, #28]
 800191c:	4413      	add	r3, r2
 800191e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001922:	461a      	mov	r2, r3
 8001924:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8001928:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800192a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800192c:	015a      	lsls	r2, r3, #5
 800192e:	69fb      	ldr	r3, [r7, #28]
 8001930:	4413      	add	r3, r2
 8001932:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800193a:	0151      	lsls	r1, r2, #5
 800193c:	69fa      	ldr	r2, [r7, #28]
 800193e:	440a      	add	r2, r1
 8001940:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8001944:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001948:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800194a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800194c:	015a      	lsls	r2, r3, #5
 800194e:	69fb      	ldr	r3, [r7, #28]
 8001950:	4413      	add	r3, r2
 8001952:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001956:	461a      	mov	r2, r3
 8001958:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800195c:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800195e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001960:	015a      	lsls	r2, r3, #5
 8001962:	69fb      	ldr	r3, [r7, #28]
 8001964:	4413      	add	r3, r2
 8001966:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800196e:	0151      	lsls	r1, r2, #5
 8001970:	69fa      	ldr	r2, [r7, #28]
 8001972:	440a      	add	r2, r1
 8001974:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8001978:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800197c:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800197e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001980:	015a      	lsls	r2, r3, #5
 8001982:	69fb      	ldr	r3, [r7, #28]
 8001984:	4413      	add	r3, r2
 8001986:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800198e:	0151      	lsls	r1, r2, #5
 8001990:	69fa      	ldr	r2, [r7, #28]
 8001992:	440a      	add	r2, r1
 8001994:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8001998:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800199c:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800199e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80019a0:	3301      	adds	r3, #1
 80019a2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	685b      	ldr	r3, [r3, #4]
 80019a8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80019aa:	429a      	cmp	r2, r3
 80019ac:	d3b3      	bcc.n	8001916 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80019ae:	69fb      	ldr	r3, [r7, #28]
 80019b0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80019b4:	69db      	ldr	r3, [r3, #28]
 80019b6:	69fa      	ldr	r2, [r7, #28]
 80019b8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80019bc:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 80019c0:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d016      	beq.n	80019f8 <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80019ca:	69fb      	ldr	r3, [r7, #28]
 80019cc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80019d0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80019d4:	69fa      	ldr	r2, [r7, #28]
 80019d6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80019da:	f043 030b 	orr.w	r3, r3, #11
 80019de:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80019e2:	69fb      	ldr	r3, [r7, #28]
 80019e4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80019e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019ea:	69fa      	ldr	r2, [r7, #28]
 80019ec:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80019f0:	f043 030b 	orr.w	r3, r3, #11
 80019f4:	6453      	str	r3, [r2, #68]	; 0x44
 80019f6:	e015      	b.n	8001a24 <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80019f8:	69fb      	ldr	r3, [r7, #28]
 80019fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80019fe:	695b      	ldr	r3, [r3, #20]
 8001a00:	69fa      	ldr	r2, [r7, #28]
 8001a02:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001a06:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001a0a:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8001a0e:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8001a10:	69fb      	ldr	r3, [r7, #28]
 8001a12:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001a16:	691b      	ldr	r3, [r3, #16]
 8001a18:	69fa      	ldr	r2, [r7, #28]
 8001a1a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001a1e:	f043 030b 	orr.w	r3, r3, #11
 8001a22:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8001a24:	69fb      	ldr	r3, [r7, #28]
 8001a26:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	69fa      	ldr	r2, [r7, #28]
 8001a2e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001a32:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8001a36:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	6818      	ldr	r0, [r3, #0]
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	691b      	ldr	r3, [r3, #16]
 8001a40:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8001a48:	461a      	mov	r2, r3
 8001a4a:	f002 ff81 	bl	8004950 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	695a      	ldr	r2, [r3, #20]
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8001a5c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	4618      	mov	r0, r3
 8001a64:	f002 feb0 	bl	80047c8 <USB_ReadInterrupts>
 8001a68:	4603      	mov	r3, r0
 8001a6a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001a6e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001a72:	d124      	bne.n	8001abe <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	4618      	mov	r0, r3
 8001a7a:	f002 ff46 	bl	800490a <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	4618      	mov	r0, r3
 8001a84:	f001 fefb 	bl	800387e <USB_GetDevSpeed>
 8001a88:	4603      	mov	r3, r0
 8001a8a:	461a      	mov	r2, r3
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681c      	ldr	r4, [r3, #0]
 8001a94:	f001 fa28 	bl	8002ee8 <HAL_RCC_GetHCLKFreq>
 8001a98:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001a9e:	b2db      	uxtb	r3, r3
 8001aa0:	461a      	mov	r2, r3
 8001aa2:	4620      	mov	r0, r4
 8001aa4:	f001 fbfa 	bl	800329c <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8001aa8:	6878      	ldr	r0, [r7, #4]
 8001aaa:	f005 fa74 	bl	8006f96 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	695a      	ldr	r2, [r3, #20]
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8001abc:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	4618      	mov	r0, r3
 8001ac4:	f002 fe80 	bl	80047c8 <USB_ReadInterrupts>
 8001ac8:	4603      	mov	r3, r0
 8001aca:	f003 0308 	and.w	r3, r3, #8
 8001ace:	2b08      	cmp	r3, #8
 8001ad0:	d10a      	bne.n	8001ae8 <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8001ad2:	6878      	ldr	r0, [r7, #4]
 8001ad4:	f005 fa51 	bl	8006f7a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	695a      	ldr	r2, [r3, #20]
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	f002 0208 	and.w	r2, r2, #8
 8001ae6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	4618      	mov	r0, r3
 8001aee:	f002 fe6b 	bl	80047c8 <USB_ReadInterrupts>
 8001af2:	4603      	mov	r3, r0
 8001af4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001af8:	2b80      	cmp	r3, #128	; 0x80
 8001afa:	d122      	bne.n	8001b42 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8001afc:	6a3b      	ldr	r3, [r7, #32]
 8001afe:	699b      	ldr	r3, [r3, #24]
 8001b00:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001b04:	6a3b      	ldr	r3, [r7, #32]
 8001b06:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001b08:	2301      	movs	r3, #1
 8001b0a:	627b      	str	r3, [r7, #36]	; 0x24
 8001b0c:	e014      	b.n	8001b38 <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8001b0e:	6879      	ldr	r1, [r7, #4]
 8001b10:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001b12:	4613      	mov	r3, r2
 8001b14:	00db      	lsls	r3, r3, #3
 8001b16:	4413      	add	r3, r2
 8001b18:	009b      	lsls	r3, r3, #2
 8001b1a:	440b      	add	r3, r1
 8001b1c:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8001b20:	781b      	ldrb	r3, [r3, #0]
 8001b22:	2b01      	cmp	r3, #1
 8001b24:	d105      	bne.n	8001b32 <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8001b26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b28:	b2db      	uxtb	r3, r3
 8001b2a:	4619      	mov	r1, r3
 8001b2c:	6878      	ldr	r0, [r7, #4]
 8001b2e:	f000 fb27 	bl	8002180 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001b32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b34:	3301      	adds	r3, #1
 8001b36:	627b      	str	r3, [r7, #36]	; 0x24
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	685b      	ldr	r3, [r3, #4]
 8001b3c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001b3e:	429a      	cmp	r2, r3
 8001b40:	d3e5      	bcc.n	8001b0e <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	4618      	mov	r0, r3
 8001b48:	f002 fe3e 	bl	80047c8 <USB_ReadInterrupts>
 8001b4c:	4603      	mov	r3, r0
 8001b4e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001b52:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001b56:	d13b      	bne.n	8001bd0 <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001b58:	2301      	movs	r3, #1
 8001b5a:	627b      	str	r3, [r7, #36]	; 0x24
 8001b5c:	e02b      	b.n	8001bb6 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8001b5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b60:	015a      	lsls	r2, r3, #5
 8001b62:	69fb      	ldr	r3, [r7, #28]
 8001b64:	4413      	add	r3, r2
 8001b66:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8001b6e:	6879      	ldr	r1, [r7, #4]
 8001b70:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001b72:	4613      	mov	r3, r2
 8001b74:	00db      	lsls	r3, r3, #3
 8001b76:	4413      	add	r3, r2
 8001b78:	009b      	lsls	r3, r3, #2
 8001b7a:	440b      	add	r3, r1
 8001b7c:	3340      	adds	r3, #64	; 0x40
 8001b7e:	781b      	ldrb	r3, [r3, #0]
 8001b80:	2b01      	cmp	r3, #1
 8001b82:	d115      	bne.n	8001bb0 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8001b84:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	da12      	bge.n	8001bb0 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8001b8a:	6879      	ldr	r1, [r7, #4]
 8001b8c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001b8e:	4613      	mov	r3, r2
 8001b90:	00db      	lsls	r3, r3, #3
 8001b92:	4413      	add	r3, r2
 8001b94:	009b      	lsls	r3, r3, #2
 8001b96:	440b      	add	r3, r1
 8001b98:	333f      	adds	r3, #63	; 0x3f
 8001b9a:	2201      	movs	r2, #1
 8001b9c:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8001b9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ba0:	b2db      	uxtb	r3, r3
 8001ba2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001ba6:	b2db      	uxtb	r3, r3
 8001ba8:	4619      	mov	r1, r3
 8001baa:	6878      	ldr	r0, [r7, #4]
 8001bac:	f000 fae8 	bl	8002180 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001bb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bb2:	3301      	adds	r3, #1
 8001bb4:	627b      	str	r3, [r7, #36]	; 0x24
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	685b      	ldr	r3, [r3, #4]
 8001bba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001bbc:	429a      	cmp	r2, r3
 8001bbe:	d3ce      	bcc.n	8001b5e <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	695a      	ldr	r2, [r3, #20]
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8001bce:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	4618      	mov	r0, r3
 8001bd6:	f002 fdf7 	bl	80047c8 <USB_ReadInterrupts>
 8001bda:	4603      	mov	r3, r0
 8001bdc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001be0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001be4:	d155      	bne.n	8001c92 <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001be6:	2301      	movs	r3, #1
 8001be8:	627b      	str	r3, [r7, #36]	; 0x24
 8001bea:	e045      	b.n	8001c78 <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8001bec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bee:	015a      	lsls	r2, r3, #5
 8001bf0:	69fb      	ldr	r3, [r7, #28]
 8001bf2:	4413      	add	r3, r2
 8001bf4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8001bfc:	6879      	ldr	r1, [r7, #4]
 8001bfe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001c00:	4613      	mov	r3, r2
 8001c02:	00db      	lsls	r3, r3, #3
 8001c04:	4413      	add	r3, r2
 8001c06:	009b      	lsls	r3, r3, #2
 8001c08:	440b      	add	r3, r1
 8001c0a:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8001c0e:	781b      	ldrb	r3, [r3, #0]
 8001c10:	2b01      	cmp	r3, #1
 8001c12:	d12e      	bne.n	8001c72 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8001c14:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	da2b      	bge.n	8001c72 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8001c1a:	69bb      	ldr	r3, [r7, #24]
 8001c1c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8001c26:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8001c2a:	429a      	cmp	r2, r3
 8001c2c:	d121      	bne.n	8001c72 <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8001c2e:	6879      	ldr	r1, [r7, #4]
 8001c30:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001c32:	4613      	mov	r3, r2
 8001c34:	00db      	lsls	r3, r3, #3
 8001c36:	4413      	add	r3, r2
 8001c38:	009b      	lsls	r3, r3, #2
 8001c3a:	440b      	add	r3, r1
 8001c3c:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8001c40:	2201      	movs	r2, #1
 8001c42:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8001c44:	6a3b      	ldr	r3, [r7, #32]
 8001c46:	699b      	ldr	r3, [r3, #24]
 8001c48:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8001c4c:	6a3b      	ldr	r3, [r7, #32]
 8001c4e:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8001c50:	6a3b      	ldr	r3, [r7, #32]
 8001c52:	695b      	ldr	r3, [r3, #20]
 8001c54:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d10a      	bne.n	8001c72 <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8001c5c:	69fb      	ldr	r3, [r7, #28]
 8001c5e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001c62:	685b      	ldr	r3, [r3, #4]
 8001c64:	69fa      	ldr	r2, [r7, #28]
 8001c66:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001c6a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001c6e:	6053      	str	r3, [r2, #4]
            break;
 8001c70:	e007      	b.n	8001c82 <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001c72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c74:	3301      	adds	r3, #1
 8001c76:	627b      	str	r3, [r7, #36]	; 0x24
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	685b      	ldr	r3, [r3, #4]
 8001c7c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001c7e:	429a      	cmp	r2, r3
 8001c80:	d3b4      	bcc.n	8001bec <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	695a      	ldr	r2, [r3, #20]
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8001c90:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	4618      	mov	r0, r3
 8001c98:	f002 fd96 	bl	80047c8 <USB_ReadInterrupts>
 8001c9c:	4603      	mov	r3, r0
 8001c9e:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8001ca2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001ca6:	d10a      	bne.n	8001cbe <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8001ca8:	6878      	ldr	r0, [r7, #4]
 8001caa:	f005 f9f5 	bl	8007098 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	695a      	ldr	r2, [r3, #20]
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8001cbc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	4618      	mov	r0, r3
 8001cc4:	f002 fd80 	bl	80047c8 <USB_ReadInterrupts>
 8001cc8:	4603      	mov	r3, r0
 8001cca:	f003 0304 	and.w	r3, r3, #4
 8001cce:	2b04      	cmp	r3, #4
 8001cd0:	d115      	bne.n	8001cfe <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	685b      	ldr	r3, [r3, #4]
 8001cd8:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8001cda:	69bb      	ldr	r3, [r7, #24]
 8001cdc:	f003 0304 	and.w	r3, r3, #4
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d002      	beq.n	8001cea <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8001ce4:	6878      	ldr	r0, [r7, #4]
 8001ce6:	f005 f9e5 	bl	80070b4 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	6859      	ldr	r1, [r3, #4]
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	69ba      	ldr	r2, [r7, #24]
 8001cf6:	430a      	orrs	r2, r1
 8001cf8:	605a      	str	r2, [r3, #4]
 8001cfa:	e000      	b.n	8001cfe <HAL_PCD_IRQHandler+0x938>
      return;
 8001cfc:	bf00      	nop
    }
  }
}
 8001cfe:	3734      	adds	r7, #52	; 0x34
 8001d00:	46bd      	mov	sp, r7
 8001d02:	bd90      	pop	{r4, r7, pc}

08001d04 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001d04:	b580      	push	{r7, lr}
 8001d06:	b082      	sub	sp, #8
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	6078      	str	r0, [r7, #4]
 8001d0c:	460b      	mov	r3, r1
 8001d0e:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001d16:	2b01      	cmp	r3, #1
 8001d18:	d101      	bne.n	8001d1e <HAL_PCD_SetAddress+0x1a>
 8001d1a:	2302      	movs	r3, #2
 8001d1c:	e013      	b.n	8001d46 <HAL_PCD_SetAddress+0x42>
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	2201      	movs	r2, #1
 8001d22:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	78fa      	ldrb	r2, [r7, #3]
 8001d2a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	78fa      	ldrb	r2, [r7, #3]
 8001d34:	4611      	mov	r1, r2
 8001d36:	4618      	mov	r0, r3
 8001d38:	f002 fcde 	bl	80046f8 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	2200      	movs	r2, #0
 8001d40:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8001d44:	2300      	movs	r3, #0
}
 8001d46:	4618      	mov	r0, r3
 8001d48:	3708      	adds	r7, #8
 8001d4a:	46bd      	mov	sp, r7
 8001d4c:	bd80      	pop	{r7, pc}

08001d4e <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8001d4e:	b580      	push	{r7, lr}
 8001d50:	b084      	sub	sp, #16
 8001d52:	af00      	add	r7, sp, #0
 8001d54:	6078      	str	r0, [r7, #4]
 8001d56:	4608      	mov	r0, r1
 8001d58:	4611      	mov	r1, r2
 8001d5a:	461a      	mov	r2, r3
 8001d5c:	4603      	mov	r3, r0
 8001d5e:	70fb      	strb	r3, [r7, #3]
 8001d60:	460b      	mov	r3, r1
 8001d62:	803b      	strh	r3, [r7, #0]
 8001d64:	4613      	mov	r3, r2
 8001d66:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8001d68:	2300      	movs	r3, #0
 8001d6a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001d6c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	da0f      	bge.n	8001d94 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001d74:	78fb      	ldrb	r3, [r7, #3]
 8001d76:	f003 020f 	and.w	r2, r3, #15
 8001d7a:	4613      	mov	r3, r2
 8001d7c:	00db      	lsls	r3, r3, #3
 8001d7e:	4413      	add	r3, r2
 8001d80:	009b      	lsls	r3, r3, #2
 8001d82:	3338      	adds	r3, #56	; 0x38
 8001d84:	687a      	ldr	r2, [r7, #4]
 8001d86:	4413      	add	r3, r2
 8001d88:	3304      	adds	r3, #4
 8001d8a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	2201      	movs	r2, #1
 8001d90:	705a      	strb	r2, [r3, #1]
 8001d92:	e00f      	b.n	8001db4 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001d94:	78fb      	ldrb	r3, [r7, #3]
 8001d96:	f003 020f 	and.w	r2, r3, #15
 8001d9a:	4613      	mov	r3, r2
 8001d9c:	00db      	lsls	r3, r3, #3
 8001d9e:	4413      	add	r3, r2
 8001da0:	009b      	lsls	r3, r3, #2
 8001da2:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001da6:	687a      	ldr	r2, [r7, #4]
 8001da8:	4413      	add	r3, r2
 8001daa:	3304      	adds	r3, #4
 8001dac:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	2200      	movs	r2, #0
 8001db2:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001db4:	78fb      	ldrb	r3, [r7, #3]
 8001db6:	f003 030f 	and.w	r3, r3, #15
 8001dba:	b2da      	uxtb	r2, r3
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8001dc0:	883a      	ldrh	r2, [r7, #0]
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	78ba      	ldrb	r2, [r7, #2]
 8001dca:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	785b      	ldrb	r3, [r3, #1]
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d004      	beq.n	8001dde <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	781b      	ldrb	r3, [r3, #0]
 8001dd8:	b29a      	uxth	r2, r3
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001dde:	78bb      	ldrb	r3, [r7, #2]
 8001de0:	2b02      	cmp	r3, #2
 8001de2:	d102      	bne.n	8001dea <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	2200      	movs	r2, #0
 8001de8:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001df0:	2b01      	cmp	r3, #1
 8001df2:	d101      	bne.n	8001df8 <HAL_PCD_EP_Open+0xaa>
 8001df4:	2302      	movs	r3, #2
 8001df6:	e00e      	b.n	8001e16 <HAL_PCD_EP_Open+0xc8>
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	2201      	movs	r2, #1
 8001dfc:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	68f9      	ldr	r1, [r7, #12]
 8001e06:	4618      	mov	r0, r3
 8001e08:	f001 fd5e 	bl	80038c8 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	2200      	movs	r2, #0
 8001e10:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8001e14:	7afb      	ldrb	r3, [r7, #11]
}
 8001e16:	4618      	mov	r0, r3
 8001e18:	3710      	adds	r7, #16
 8001e1a:	46bd      	mov	sp, r7
 8001e1c:	bd80      	pop	{r7, pc}

08001e1e <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001e1e:	b580      	push	{r7, lr}
 8001e20:	b084      	sub	sp, #16
 8001e22:	af00      	add	r7, sp, #0
 8001e24:	6078      	str	r0, [r7, #4]
 8001e26:	460b      	mov	r3, r1
 8001e28:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001e2a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	da0f      	bge.n	8001e52 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001e32:	78fb      	ldrb	r3, [r7, #3]
 8001e34:	f003 020f 	and.w	r2, r3, #15
 8001e38:	4613      	mov	r3, r2
 8001e3a:	00db      	lsls	r3, r3, #3
 8001e3c:	4413      	add	r3, r2
 8001e3e:	009b      	lsls	r3, r3, #2
 8001e40:	3338      	adds	r3, #56	; 0x38
 8001e42:	687a      	ldr	r2, [r7, #4]
 8001e44:	4413      	add	r3, r2
 8001e46:	3304      	adds	r3, #4
 8001e48:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	2201      	movs	r2, #1
 8001e4e:	705a      	strb	r2, [r3, #1]
 8001e50:	e00f      	b.n	8001e72 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001e52:	78fb      	ldrb	r3, [r7, #3]
 8001e54:	f003 020f 	and.w	r2, r3, #15
 8001e58:	4613      	mov	r3, r2
 8001e5a:	00db      	lsls	r3, r3, #3
 8001e5c:	4413      	add	r3, r2
 8001e5e:	009b      	lsls	r3, r3, #2
 8001e60:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001e64:	687a      	ldr	r2, [r7, #4]
 8001e66:	4413      	add	r3, r2
 8001e68:	3304      	adds	r3, #4
 8001e6a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	2200      	movs	r2, #0
 8001e70:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8001e72:	78fb      	ldrb	r3, [r7, #3]
 8001e74:	f003 030f 	and.w	r3, r3, #15
 8001e78:	b2da      	uxtb	r2, r3
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001e84:	2b01      	cmp	r3, #1
 8001e86:	d101      	bne.n	8001e8c <HAL_PCD_EP_Close+0x6e>
 8001e88:	2302      	movs	r3, #2
 8001e8a:	e00e      	b.n	8001eaa <HAL_PCD_EP_Close+0x8c>
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	2201      	movs	r2, #1
 8001e90:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	68f9      	ldr	r1, [r7, #12]
 8001e9a:	4618      	mov	r0, r3
 8001e9c:	f001 fd9c 	bl	80039d8 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	2200      	movs	r2, #0
 8001ea4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8001ea8:	2300      	movs	r3, #0
}
 8001eaa:	4618      	mov	r0, r3
 8001eac:	3710      	adds	r7, #16
 8001eae:	46bd      	mov	sp, r7
 8001eb0:	bd80      	pop	{r7, pc}

08001eb2 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001eb2:	b580      	push	{r7, lr}
 8001eb4:	b086      	sub	sp, #24
 8001eb6:	af00      	add	r7, sp, #0
 8001eb8:	60f8      	str	r0, [r7, #12]
 8001eba:	607a      	str	r2, [r7, #4]
 8001ebc:	603b      	str	r3, [r7, #0]
 8001ebe:	460b      	mov	r3, r1
 8001ec0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001ec2:	7afb      	ldrb	r3, [r7, #11]
 8001ec4:	f003 020f 	and.w	r2, r3, #15
 8001ec8:	4613      	mov	r3, r2
 8001eca:	00db      	lsls	r3, r3, #3
 8001ecc:	4413      	add	r3, r2
 8001ece:	009b      	lsls	r3, r3, #2
 8001ed0:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001ed4:	68fa      	ldr	r2, [r7, #12]
 8001ed6:	4413      	add	r3, r2
 8001ed8:	3304      	adds	r3, #4
 8001eda:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001edc:	697b      	ldr	r3, [r7, #20]
 8001ede:	687a      	ldr	r2, [r7, #4]
 8001ee0:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8001ee2:	697b      	ldr	r3, [r7, #20]
 8001ee4:	683a      	ldr	r2, [r7, #0]
 8001ee6:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8001ee8:	697b      	ldr	r3, [r7, #20]
 8001eea:	2200      	movs	r2, #0
 8001eec:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8001eee:	697b      	ldr	r3, [r7, #20]
 8001ef0:	2200      	movs	r2, #0
 8001ef2:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001ef4:	7afb      	ldrb	r3, [r7, #11]
 8001ef6:	f003 030f 	and.w	r3, r3, #15
 8001efa:	b2da      	uxtb	r2, r3
 8001efc:	697b      	ldr	r3, [r7, #20]
 8001efe:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	691b      	ldr	r3, [r3, #16]
 8001f04:	2b01      	cmp	r3, #1
 8001f06:	d102      	bne.n	8001f0e <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8001f08:	687a      	ldr	r2, [r7, #4]
 8001f0a:	697b      	ldr	r3, [r7, #20]
 8001f0c:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001f0e:	7afb      	ldrb	r3, [r7, #11]
 8001f10:	f003 030f 	and.w	r3, r3, #15
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d109      	bne.n	8001f2c <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	6818      	ldr	r0, [r3, #0]
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	691b      	ldr	r3, [r3, #16]
 8001f20:	b2db      	uxtb	r3, r3
 8001f22:	461a      	mov	r2, r3
 8001f24:	6979      	ldr	r1, [r7, #20]
 8001f26:	f002 f87b 	bl	8004020 <USB_EP0StartXfer>
 8001f2a:	e008      	b.n	8001f3e <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	6818      	ldr	r0, [r3, #0]
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	691b      	ldr	r3, [r3, #16]
 8001f34:	b2db      	uxtb	r3, r3
 8001f36:	461a      	mov	r2, r3
 8001f38:	6979      	ldr	r1, [r7, #20]
 8001f3a:	f001 fe29 	bl	8003b90 <USB_EPStartXfer>
  }

  return HAL_OK;
 8001f3e:	2300      	movs	r3, #0
}
 8001f40:	4618      	mov	r0, r3
 8001f42:	3718      	adds	r7, #24
 8001f44:	46bd      	mov	sp, r7
 8001f46:	bd80      	pop	{r7, pc}

08001f48 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001f48:	b480      	push	{r7}
 8001f4a:	b083      	sub	sp, #12
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	6078      	str	r0, [r7, #4]
 8001f50:	460b      	mov	r3, r1
 8001f52:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8001f54:	78fb      	ldrb	r3, [r7, #3]
 8001f56:	f003 020f 	and.w	r2, r3, #15
 8001f5a:	6879      	ldr	r1, [r7, #4]
 8001f5c:	4613      	mov	r3, r2
 8001f5e:	00db      	lsls	r3, r3, #3
 8001f60:	4413      	add	r3, r2
 8001f62:	009b      	lsls	r3, r3, #2
 8001f64:	440b      	add	r3, r1
 8001f66:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8001f6a:	681b      	ldr	r3, [r3, #0]
}
 8001f6c:	4618      	mov	r0, r3
 8001f6e:	370c      	adds	r7, #12
 8001f70:	46bd      	mov	sp, r7
 8001f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f76:	4770      	bx	lr

08001f78 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001f78:	b580      	push	{r7, lr}
 8001f7a:	b086      	sub	sp, #24
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	60f8      	str	r0, [r7, #12]
 8001f80:	607a      	str	r2, [r7, #4]
 8001f82:	603b      	str	r3, [r7, #0]
 8001f84:	460b      	mov	r3, r1
 8001f86:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001f88:	7afb      	ldrb	r3, [r7, #11]
 8001f8a:	f003 020f 	and.w	r2, r3, #15
 8001f8e:	4613      	mov	r3, r2
 8001f90:	00db      	lsls	r3, r3, #3
 8001f92:	4413      	add	r3, r2
 8001f94:	009b      	lsls	r3, r3, #2
 8001f96:	3338      	adds	r3, #56	; 0x38
 8001f98:	68fa      	ldr	r2, [r7, #12]
 8001f9a:	4413      	add	r3, r2
 8001f9c:	3304      	adds	r3, #4
 8001f9e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001fa0:	697b      	ldr	r3, [r7, #20]
 8001fa2:	687a      	ldr	r2, [r7, #4]
 8001fa4:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8001fa6:	697b      	ldr	r3, [r7, #20]
 8001fa8:	683a      	ldr	r2, [r7, #0]
 8001faa:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8001fac:	697b      	ldr	r3, [r7, #20]
 8001fae:	2200      	movs	r2, #0
 8001fb0:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 8001fb2:	697b      	ldr	r3, [r7, #20]
 8001fb4:	2201      	movs	r2, #1
 8001fb6:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001fb8:	7afb      	ldrb	r3, [r7, #11]
 8001fba:	f003 030f 	and.w	r3, r3, #15
 8001fbe:	b2da      	uxtb	r2, r3
 8001fc0:	697b      	ldr	r3, [r7, #20]
 8001fc2:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	691b      	ldr	r3, [r3, #16]
 8001fc8:	2b01      	cmp	r3, #1
 8001fca:	d102      	bne.n	8001fd2 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8001fcc:	687a      	ldr	r2, [r7, #4]
 8001fce:	697b      	ldr	r3, [r7, #20]
 8001fd0:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001fd2:	7afb      	ldrb	r3, [r7, #11]
 8001fd4:	f003 030f 	and.w	r3, r3, #15
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d109      	bne.n	8001ff0 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	6818      	ldr	r0, [r3, #0]
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	691b      	ldr	r3, [r3, #16]
 8001fe4:	b2db      	uxtb	r3, r3
 8001fe6:	461a      	mov	r2, r3
 8001fe8:	6979      	ldr	r1, [r7, #20]
 8001fea:	f002 f819 	bl	8004020 <USB_EP0StartXfer>
 8001fee:	e008      	b.n	8002002 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	6818      	ldr	r0, [r3, #0]
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	691b      	ldr	r3, [r3, #16]
 8001ff8:	b2db      	uxtb	r3, r3
 8001ffa:	461a      	mov	r2, r3
 8001ffc:	6979      	ldr	r1, [r7, #20]
 8001ffe:	f001 fdc7 	bl	8003b90 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002002:	2300      	movs	r3, #0
}
 8002004:	4618      	mov	r0, r3
 8002006:	3718      	adds	r7, #24
 8002008:	46bd      	mov	sp, r7
 800200a:	bd80      	pop	{r7, pc}

0800200c <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800200c:	b580      	push	{r7, lr}
 800200e:	b084      	sub	sp, #16
 8002010:	af00      	add	r7, sp, #0
 8002012:	6078      	str	r0, [r7, #4]
 8002014:	460b      	mov	r3, r1
 8002016:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002018:	78fb      	ldrb	r3, [r7, #3]
 800201a:	f003 020f 	and.w	r2, r3, #15
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	685b      	ldr	r3, [r3, #4]
 8002022:	429a      	cmp	r2, r3
 8002024:	d901      	bls.n	800202a <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002026:	2301      	movs	r3, #1
 8002028:	e050      	b.n	80020cc <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800202a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800202e:	2b00      	cmp	r3, #0
 8002030:	da0f      	bge.n	8002052 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002032:	78fb      	ldrb	r3, [r7, #3]
 8002034:	f003 020f 	and.w	r2, r3, #15
 8002038:	4613      	mov	r3, r2
 800203a:	00db      	lsls	r3, r3, #3
 800203c:	4413      	add	r3, r2
 800203e:	009b      	lsls	r3, r3, #2
 8002040:	3338      	adds	r3, #56	; 0x38
 8002042:	687a      	ldr	r2, [r7, #4]
 8002044:	4413      	add	r3, r2
 8002046:	3304      	adds	r3, #4
 8002048:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	2201      	movs	r2, #1
 800204e:	705a      	strb	r2, [r3, #1]
 8002050:	e00d      	b.n	800206e <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002052:	78fa      	ldrb	r2, [r7, #3]
 8002054:	4613      	mov	r3, r2
 8002056:	00db      	lsls	r3, r3, #3
 8002058:	4413      	add	r3, r2
 800205a:	009b      	lsls	r3, r3, #2
 800205c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002060:	687a      	ldr	r2, [r7, #4]
 8002062:	4413      	add	r3, r2
 8002064:	3304      	adds	r3, #4
 8002066:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	2200      	movs	r2, #0
 800206c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	2201      	movs	r2, #1
 8002072:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002074:	78fb      	ldrb	r3, [r7, #3]
 8002076:	f003 030f 	and.w	r3, r3, #15
 800207a:	b2da      	uxtb	r2, r3
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002086:	2b01      	cmp	r3, #1
 8002088:	d101      	bne.n	800208e <HAL_PCD_EP_SetStall+0x82>
 800208a:	2302      	movs	r3, #2
 800208c:	e01e      	b.n	80020cc <HAL_PCD_EP_SetStall+0xc0>
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	2201      	movs	r2, #1
 8002092:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	68f9      	ldr	r1, [r7, #12]
 800209c:	4618      	mov	r0, r3
 800209e:	f002 fa57 	bl	8004550 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80020a2:	78fb      	ldrb	r3, [r7, #3]
 80020a4:	f003 030f 	and.w	r3, r3, #15
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d10a      	bne.n	80020c2 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	6818      	ldr	r0, [r3, #0]
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	691b      	ldr	r3, [r3, #16]
 80020b4:	b2d9      	uxtb	r1, r3
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80020bc:	461a      	mov	r2, r3
 80020be:	f002 fc47 	bl	8004950 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	2200      	movs	r2, #0
 80020c6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80020ca:	2300      	movs	r3, #0
}
 80020cc:	4618      	mov	r0, r3
 80020ce:	3710      	adds	r7, #16
 80020d0:	46bd      	mov	sp, r7
 80020d2:	bd80      	pop	{r7, pc}

080020d4 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80020d4:	b580      	push	{r7, lr}
 80020d6:	b084      	sub	sp, #16
 80020d8:	af00      	add	r7, sp, #0
 80020da:	6078      	str	r0, [r7, #4]
 80020dc:	460b      	mov	r3, r1
 80020de:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80020e0:	78fb      	ldrb	r3, [r7, #3]
 80020e2:	f003 020f 	and.w	r2, r3, #15
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	685b      	ldr	r3, [r3, #4]
 80020ea:	429a      	cmp	r2, r3
 80020ec:	d901      	bls.n	80020f2 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80020ee:	2301      	movs	r3, #1
 80020f0:	e042      	b.n	8002178 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80020f2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	da0f      	bge.n	800211a <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80020fa:	78fb      	ldrb	r3, [r7, #3]
 80020fc:	f003 020f 	and.w	r2, r3, #15
 8002100:	4613      	mov	r3, r2
 8002102:	00db      	lsls	r3, r3, #3
 8002104:	4413      	add	r3, r2
 8002106:	009b      	lsls	r3, r3, #2
 8002108:	3338      	adds	r3, #56	; 0x38
 800210a:	687a      	ldr	r2, [r7, #4]
 800210c:	4413      	add	r3, r2
 800210e:	3304      	adds	r3, #4
 8002110:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	2201      	movs	r2, #1
 8002116:	705a      	strb	r2, [r3, #1]
 8002118:	e00f      	b.n	800213a <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800211a:	78fb      	ldrb	r3, [r7, #3]
 800211c:	f003 020f 	and.w	r2, r3, #15
 8002120:	4613      	mov	r3, r2
 8002122:	00db      	lsls	r3, r3, #3
 8002124:	4413      	add	r3, r2
 8002126:	009b      	lsls	r3, r3, #2
 8002128:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800212c:	687a      	ldr	r2, [r7, #4]
 800212e:	4413      	add	r3, r2
 8002130:	3304      	adds	r3, #4
 8002132:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	2200      	movs	r2, #0
 8002138:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	2200      	movs	r2, #0
 800213e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002140:	78fb      	ldrb	r3, [r7, #3]
 8002142:	f003 030f 	and.w	r3, r3, #15
 8002146:	b2da      	uxtb	r2, r3
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002152:	2b01      	cmp	r3, #1
 8002154:	d101      	bne.n	800215a <HAL_PCD_EP_ClrStall+0x86>
 8002156:	2302      	movs	r3, #2
 8002158:	e00e      	b.n	8002178 <HAL_PCD_EP_ClrStall+0xa4>
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	2201      	movs	r2, #1
 800215e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	68f9      	ldr	r1, [r7, #12]
 8002168:	4618      	mov	r0, r3
 800216a:	f002 fa5f 	bl	800462c <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	2200      	movs	r2, #0
 8002172:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002176:	2300      	movs	r3, #0
}
 8002178:	4618      	mov	r0, r3
 800217a:	3710      	adds	r7, #16
 800217c:	46bd      	mov	sp, r7
 800217e:	bd80      	pop	{r7, pc}

08002180 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002180:	b580      	push	{r7, lr}
 8002182:	b084      	sub	sp, #16
 8002184:	af00      	add	r7, sp, #0
 8002186:	6078      	str	r0, [r7, #4]
 8002188:	460b      	mov	r3, r1
 800218a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 800218c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002190:	2b00      	cmp	r3, #0
 8002192:	da0c      	bge.n	80021ae <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002194:	78fb      	ldrb	r3, [r7, #3]
 8002196:	f003 020f 	and.w	r2, r3, #15
 800219a:	4613      	mov	r3, r2
 800219c:	00db      	lsls	r3, r3, #3
 800219e:	4413      	add	r3, r2
 80021a0:	009b      	lsls	r3, r3, #2
 80021a2:	3338      	adds	r3, #56	; 0x38
 80021a4:	687a      	ldr	r2, [r7, #4]
 80021a6:	4413      	add	r3, r2
 80021a8:	3304      	adds	r3, #4
 80021aa:	60fb      	str	r3, [r7, #12]
 80021ac:	e00c      	b.n	80021c8 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80021ae:	78fb      	ldrb	r3, [r7, #3]
 80021b0:	f003 020f 	and.w	r2, r3, #15
 80021b4:	4613      	mov	r3, r2
 80021b6:	00db      	lsls	r3, r3, #3
 80021b8:	4413      	add	r3, r2
 80021ba:	009b      	lsls	r3, r3, #2
 80021bc:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80021c0:	687a      	ldr	r2, [r7, #4]
 80021c2:	4413      	add	r3, r2
 80021c4:	3304      	adds	r3, #4
 80021c6:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	68f9      	ldr	r1, [r7, #12]
 80021ce:	4618      	mov	r0, r3
 80021d0:	f002 f87e 	bl	80042d0 <USB_EPStopXfer>
 80021d4:	4603      	mov	r3, r0
 80021d6:	72fb      	strb	r3, [r7, #11]

  return ret;
 80021d8:	7afb      	ldrb	r3, [r7, #11]
}
 80021da:	4618      	mov	r0, r3
 80021dc:	3710      	adds	r7, #16
 80021de:	46bd      	mov	sp, r7
 80021e0:	bd80      	pop	{r7, pc}

080021e2 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80021e2:	b580      	push	{r7, lr}
 80021e4:	b08a      	sub	sp, #40	; 0x28
 80021e6:	af02      	add	r7, sp, #8
 80021e8:	6078      	str	r0, [r7, #4]
 80021ea:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80021f2:	697b      	ldr	r3, [r7, #20]
 80021f4:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80021f6:	683a      	ldr	r2, [r7, #0]
 80021f8:	4613      	mov	r3, r2
 80021fa:	00db      	lsls	r3, r3, #3
 80021fc:	4413      	add	r3, r2
 80021fe:	009b      	lsls	r3, r3, #2
 8002200:	3338      	adds	r3, #56	; 0x38
 8002202:	687a      	ldr	r2, [r7, #4]
 8002204:	4413      	add	r3, r2
 8002206:	3304      	adds	r3, #4
 8002208:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	6a1a      	ldr	r2, [r3, #32]
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	699b      	ldr	r3, [r3, #24]
 8002212:	429a      	cmp	r2, r3
 8002214:	d901      	bls.n	800221a <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8002216:	2301      	movs	r3, #1
 8002218:	e06c      	b.n	80022f4 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	699a      	ldr	r2, [r3, #24]
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	6a1b      	ldr	r3, [r3, #32]
 8002222:	1ad3      	subs	r3, r2, r3
 8002224:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	68db      	ldr	r3, [r3, #12]
 800222a:	69fa      	ldr	r2, [r7, #28]
 800222c:	429a      	cmp	r2, r3
 800222e:	d902      	bls.n	8002236 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	68db      	ldr	r3, [r3, #12]
 8002234:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8002236:	69fb      	ldr	r3, [r7, #28]
 8002238:	3303      	adds	r3, #3
 800223a:	089b      	lsrs	r3, r3, #2
 800223c:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800223e:	e02b      	b.n	8002298 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	699a      	ldr	r2, [r3, #24]
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	6a1b      	ldr	r3, [r3, #32]
 8002248:	1ad3      	subs	r3, r2, r3
 800224a:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	68db      	ldr	r3, [r3, #12]
 8002250:	69fa      	ldr	r2, [r7, #28]
 8002252:	429a      	cmp	r2, r3
 8002254:	d902      	bls.n	800225c <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	68db      	ldr	r3, [r3, #12]
 800225a:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800225c:	69fb      	ldr	r3, [r7, #28]
 800225e:	3303      	adds	r3, #3
 8002260:	089b      	lsrs	r3, r3, #2
 8002262:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	6919      	ldr	r1, [r3, #16]
 8002268:	683b      	ldr	r3, [r7, #0]
 800226a:	b2da      	uxtb	r2, r3
 800226c:	69fb      	ldr	r3, [r7, #28]
 800226e:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002274:	b2db      	uxtb	r3, r3
 8002276:	9300      	str	r3, [sp, #0]
 8002278:	4603      	mov	r3, r0
 800227a:	6978      	ldr	r0, [r7, #20]
 800227c:	f002 f8d2 	bl	8004424 <USB_WritePacket>

    ep->xfer_buff  += len;
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	691a      	ldr	r2, [r3, #16]
 8002284:	69fb      	ldr	r3, [r7, #28]
 8002286:	441a      	add	r2, r3
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	6a1a      	ldr	r2, [r3, #32]
 8002290:	69fb      	ldr	r3, [r7, #28]
 8002292:	441a      	add	r2, r3
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002298:	683b      	ldr	r3, [r7, #0]
 800229a:	015a      	lsls	r2, r3, #5
 800229c:	693b      	ldr	r3, [r7, #16]
 800229e:	4413      	add	r3, r2
 80022a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80022a4:	699b      	ldr	r3, [r3, #24]
 80022a6:	b29b      	uxth	r3, r3
 80022a8:	69ba      	ldr	r2, [r7, #24]
 80022aa:	429a      	cmp	r2, r3
 80022ac:	d809      	bhi.n	80022c2 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	6a1a      	ldr	r2, [r3, #32]
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80022b6:	429a      	cmp	r2, r3
 80022b8:	d203      	bcs.n	80022c2 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	699b      	ldr	r3, [r3, #24]
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d1be      	bne.n	8002240 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	699a      	ldr	r2, [r3, #24]
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	6a1b      	ldr	r3, [r3, #32]
 80022ca:	429a      	cmp	r2, r3
 80022cc:	d811      	bhi.n	80022f2 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80022ce:	683b      	ldr	r3, [r7, #0]
 80022d0:	f003 030f 	and.w	r3, r3, #15
 80022d4:	2201      	movs	r2, #1
 80022d6:	fa02 f303 	lsl.w	r3, r2, r3
 80022da:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80022dc:	693b      	ldr	r3, [r7, #16]
 80022de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80022e2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80022e4:	68bb      	ldr	r3, [r7, #8]
 80022e6:	43db      	mvns	r3, r3
 80022e8:	6939      	ldr	r1, [r7, #16]
 80022ea:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80022ee:	4013      	ands	r3, r2
 80022f0:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 80022f2:	2300      	movs	r3, #0
}
 80022f4:	4618      	mov	r0, r3
 80022f6:	3720      	adds	r7, #32
 80022f8:	46bd      	mov	sp, r7
 80022fa:	bd80      	pop	{r7, pc}

080022fc <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80022fc:	b580      	push	{r7, lr}
 80022fe:	b088      	sub	sp, #32
 8002300:	af00      	add	r7, sp, #0
 8002302:	6078      	str	r0, [r7, #4]
 8002304:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800230c:	69fb      	ldr	r3, [r7, #28]
 800230e:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002310:	69fb      	ldr	r3, [r7, #28]
 8002312:	333c      	adds	r3, #60	; 0x3c
 8002314:	3304      	adds	r3, #4
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800231a:	683b      	ldr	r3, [r7, #0]
 800231c:	015a      	lsls	r2, r3, #5
 800231e:	69bb      	ldr	r3, [r7, #24]
 8002320:	4413      	add	r3, r2
 8002322:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002326:	689b      	ldr	r3, [r3, #8]
 8002328:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	691b      	ldr	r3, [r3, #16]
 800232e:	2b01      	cmp	r3, #1
 8002330:	d17b      	bne.n	800242a <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8002332:	693b      	ldr	r3, [r7, #16]
 8002334:	f003 0308 	and.w	r3, r3, #8
 8002338:	2b00      	cmp	r3, #0
 800233a:	d015      	beq.n	8002368 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800233c:	697b      	ldr	r3, [r7, #20]
 800233e:	4a61      	ldr	r2, [pc, #388]	; (80024c4 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8002340:	4293      	cmp	r3, r2
 8002342:	f240 80b9 	bls.w	80024b8 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002346:	693b      	ldr	r3, [r7, #16]
 8002348:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800234c:	2b00      	cmp	r3, #0
 800234e:	f000 80b3 	beq.w	80024b8 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002352:	683b      	ldr	r3, [r7, #0]
 8002354:	015a      	lsls	r2, r3, #5
 8002356:	69bb      	ldr	r3, [r7, #24]
 8002358:	4413      	add	r3, r2
 800235a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800235e:	461a      	mov	r2, r3
 8002360:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002364:	6093      	str	r3, [r2, #8]
 8002366:	e0a7      	b.n	80024b8 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8002368:	693b      	ldr	r3, [r7, #16]
 800236a:	f003 0320 	and.w	r3, r3, #32
 800236e:	2b00      	cmp	r3, #0
 8002370:	d009      	beq.n	8002386 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002372:	683b      	ldr	r3, [r7, #0]
 8002374:	015a      	lsls	r2, r3, #5
 8002376:	69bb      	ldr	r3, [r7, #24]
 8002378:	4413      	add	r3, r2
 800237a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800237e:	461a      	mov	r2, r3
 8002380:	2320      	movs	r3, #32
 8002382:	6093      	str	r3, [r2, #8]
 8002384:	e098      	b.n	80024b8 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8002386:	693b      	ldr	r3, [r7, #16]
 8002388:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800238c:	2b00      	cmp	r3, #0
 800238e:	f040 8093 	bne.w	80024b8 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002392:	697b      	ldr	r3, [r7, #20]
 8002394:	4a4b      	ldr	r2, [pc, #300]	; (80024c4 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8002396:	4293      	cmp	r3, r2
 8002398:	d90f      	bls.n	80023ba <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800239a:	693b      	ldr	r3, [r7, #16]
 800239c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d00a      	beq.n	80023ba <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80023a4:	683b      	ldr	r3, [r7, #0]
 80023a6:	015a      	lsls	r2, r3, #5
 80023a8:	69bb      	ldr	r3, [r7, #24]
 80023aa:	4413      	add	r3, r2
 80023ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80023b0:	461a      	mov	r2, r3
 80023b2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80023b6:	6093      	str	r3, [r2, #8]
 80023b8:	e07e      	b.n	80024b8 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 80023ba:	683a      	ldr	r2, [r7, #0]
 80023bc:	4613      	mov	r3, r2
 80023be:	00db      	lsls	r3, r3, #3
 80023c0:	4413      	add	r3, r2
 80023c2:	009b      	lsls	r3, r3, #2
 80023c4:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80023c8:	687a      	ldr	r2, [r7, #4]
 80023ca:	4413      	add	r3, r2
 80023cc:	3304      	adds	r3, #4
 80023ce:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	69da      	ldr	r2, [r3, #28]
 80023d4:	683b      	ldr	r3, [r7, #0]
 80023d6:	0159      	lsls	r1, r3, #5
 80023d8:	69bb      	ldr	r3, [r7, #24]
 80023da:	440b      	add	r3, r1
 80023dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80023e0:	691b      	ldr	r3, [r3, #16]
 80023e2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80023e6:	1ad2      	subs	r2, r2, r3
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 80023ec:	683b      	ldr	r3, [r7, #0]
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d114      	bne.n	800241c <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	699b      	ldr	r3, [r3, #24]
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d109      	bne.n	800240e <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	6818      	ldr	r0, [r3, #0]
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002404:	461a      	mov	r2, r3
 8002406:	2101      	movs	r1, #1
 8002408:	f002 faa2 	bl	8004950 <USB_EP0_OutStart>
 800240c:	e006      	b.n	800241c <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	691a      	ldr	r2, [r3, #16]
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	6a1b      	ldr	r3, [r3, #32]
 8002416:	441a      	add	r2, r3
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800241c:	683b      	ldr	r3, [r7, #0]
 800241e:	b2db      	uxtb	r3, r3
 8002420:	4619      	mov	r1, r3
 8002422:	6878      	ldr	r0, [r7, #4]
 8002424:	f004 fd74 	bl	8006f10 <HAL_PCD_DataOutStageCallback>
 8002428:	e046      	b.n	80024b8 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800242a:	697b      	ldr	r3, [r7, #20]
 800242c:	4a26      	ldr	r2, [pc, #152]	; (80024c8 <PCD_EP_OutXfrComplete_int+0x1cc>)
 800242e:	4293      	cmp	r3, r2
 8002430:	d124      	bne.n	800247c <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8002432:	693b      	ldr	r3, [r7, #16]
 8002434:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002438:	2b00      	cmp	r3, #0
 800243a:	d00a      	beq.n	8002452 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800243c:	683b      	ldr	r3, [r7, #0]
 800243e:	015a      	lsls	r2, r3, #5
 8002440:	69bb      	ldr	r3, [r7, #24]
 8002442:	4413      	add	r3, r2
 8002444:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002448:	461a      	mov	r2, r3
 800244a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800244e:	6093      	str	r3, [r2, #8]
 8002450:	e032      	b.n	80024b8 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002452:	693b      	ldr	r3, [r7, #16]
 8002454:	f003 0320 	and.w	r3, r3, #32
 8002458:	2b00      	cmp	r3, #0
 800245a:	d008      	beq.n	800246e <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800245c:	683b      	ldr	r3, [r7, #0]
 800245e:	015a      	lsls	r2, r3, #5
 8002460:	69bb      	ldr	r3, [r7, #24]
 8002462:	4413      	add	r3, r2
 8002464:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002468:	461a      	mov	r2, r3
 800246a:	2320      	movs	r3, #32
 800246c:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800246e:	683b      	ldr	r3, [r7, #0]
 8002470:	b2db      	uxtb	r3, r3
 8002472:	4619      	mov	r1, r3
 8002474:	6878      	ldr	r0, [r7, #4]
 8002476:	f004 fd4b 	bl	8006f10 <HAL_PCD_DataOutStageCallback>
 800247a:	e01d      	b.n	80024b8 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800247c:	683b      	ldr	r3, [r7, #0]
 800247e:	2b00      	cmp	r3, #0
 8002480:	d114      	bne.n	80024ac <PCD_EP_OutXfrComplete_int+0x1b0>
 8002482:	6879      	ldr	r1, [r7, #4]
 8002484:	683a      	ldr	r2, [r7, #0]
 8002486:	4613      	mov	r3, r2
 8002488:	00db      	lsls	r3, r3, #3
 800248a:	4413      	add	r3, r2
 800248c:	009b      	lsls	r3, r3, #2
 800248e:	440b      	add	r3, r1
 8002490:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	2b00      	cmp	r3, #0
 8002498:	d108      	bne.n	80024ac <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	6818      	ldr	r0, [r3, #0]
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80024a4:	461a      	mov	r2, r3
 80024a6:	2100      	movs	r1, #0
 80024a8:	f002 fa52 	bl	8004950 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80024ac:	683b      	ldr	r3, [r7, #0]
 80024ae:	b2db      	uxtb	r3, r3
 80024b0:	4619      	mov	r1, r3
 80024b2:	6878      	ldr	r0, [r7, #4]
 80024b4:	f004 fd2c 	bl	8006f10 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80024b8:	2300      	movs	r3, #0
}
 80024ba:	4618      	mov	r0, r3
 80024bc:	3720      	adds	r7, #32
 80024be:	46bd      	mov	sp, r7
 80024c0:	bd80      	pop	{r7, pc}
 80024c2:	bf00      	nop
 80024c4:	4f54300a 	.word	0x4f54300a
 80024c8:	4f54310a 	.word	0x4f54310a

080024cc <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80024cc:	b580      	push	{r7, lr}
 80024ce:	b086      	sub	sp, #24
 80024d0:	af00      	add	r7, sp, #0
 80024d2:	6078      	str	r0, [r7, #4]
 80024d4:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80024dc:	697b      	ldr	r3, [r7, #20]
 80024de:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80024e0:	697b      	ldr	r3, [r7, #20]
 80024e2:	333c      	adds	r3, #60	; 0x3c
 80024e4:	3304      	adds	r3, #4
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80024ea:	683b      	ldr	r3, [r7, #0]
 80024ec:	015a      	lsls	r2, r3, #5
 80024ee:	693b      	ldr	r3, [r7, #16]
 80024f0:	4413      	add	r3, r2
 80024f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80024f6:	689b      	ldr	r3, [r3, #8]
 80024f8:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	4a15      	ldr	r2, [pc, #84]	; (8002554 <PCD_EP_OutSetupPacket_int+0x88>)
 80024fe:	4293      	cmp	r3, r2
 8002500:	d90e      	bls.n	8002520 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002502:	68bb      	ldr	r3, [r7, #8]
 8002504:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002508:	2b00      	cmp	r3, #0
 800250a:	d009      	beq.n	8002520 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800250c:	683b      	ldr	r3, [r7, #0]
 800250e:	015a      	lsls	r2, r3, #5
 8002510:	693b      	ldr	r3, [r7, #16]
 8002512:	4413      	add	r3, r2
 8002514:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002518:	461a      	mov	r2, r3
 800251a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800251e:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8002520:	6878      	ldr	r0, [r7, #4]
 8002522:	f004 fce3 	bl	8006eec <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	4a0a      	ldr	r2, [pc, #40]	; (8002554 <PCD_EP_OutSetupPacket_int+0x88>)
 800252a:	4293      	cmp	r3, r2
 800252c:	d90c      	bls.n	8002548 <PCD_EP_OutSetupPacket_int+0x7c>
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	691b      	ldr	r3, [r3, #16]
 8002532:	2b01      	cmp	r3, #1
 8002534:	d108      	bne.n	8002548 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	6818      	ldr	r0, [r3, #0]
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002540:	461a      	mov	r2, r3
 8002542:	2101      	movs	r1, #1
 8002544:	f002 fa04 	bl	8004950 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8002548:	2300      	movs	r3, #0
}
 800254a:	4618      	mov	r0, r3
 800254c:	3718      	adds	r7, #24
 800254e:	46bd      	mov	sp, r7
 8002550:	bd80      	pop	{r7, pc}
 8002552:	bf00      	nop
 8002554:	4f54300a 	.word	0x4f54300a

08002558 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8002558:	b480      	push	{r7}
 800255a:	b085      	sub	sp, #20
 800255c:	af00      	add	r7, sp, #0
 800255e:	6078      	str	r0, [r7, #4]
 8002560:	460b      	mov	r3, r1
 8002562:	70fb      	strb	r3, [r7, #3]
 8002564:	4613      	mov	r3, r2
 8002566:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800256e:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8002570:	78fb      	ldrb	r3, [r7, #3]
 8002572:	2b00      	cmp	r3, #0
 8002574:	d107      	bne.n	8002586 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8002576:	883b      	ldrh	r3, [r7, #0]
 8002578:	0419      	lsls	r1, r3, #16
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	68ba      	ldr	r2, [r7, #8]
 8002580:	430a      	orrs	r2, r1
 8002582:	629a      	str	r2, [r3, #40]	; 0x28
 8002584:	e028      	b.n	80025d8 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800258c:	0c1b      	lsrs	r3, r3, #16
 800258e:	68ba      	ldr	r2, [r7, #8]
 8002590:	4413      	add	r3, r2
 8002592:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002594:	2300      	movs	r3, #0
 8002596:	73fb      	strb	r3, [r7, #15]
 8002598:	e00d      	b.n	80025b6 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681a      	ldr	r2, [r3, #0]
 800259e:	7bfb      	ldrb	r3, [r7, #15]
 80025a0:	3340      	adds	r3, #64	; 0x40
 80025a2:	009b      	lsls	r3, r3, #2
 80025a4:	4413      	add	r3, r2
 80025a6:	685b      	ldr	r3, [r3, #4]
 80025a8:	0c1b      	lsrs	r3, r3, #16
 80025aa:	68ba      	ldr	r2, [r7, #8]
 80025ac:	4413      	add	r3, r2
 80025ae:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80025b0:	7bfb      	ldrb	r3, [r7, #15]
 80025b2:	3301      	adds	r3, #1
 80025b4:	73fb      	strb	r3, [r7, #15]
 80025b6:	7bfa      	ldrb	r2, [r7, #15]
 80025b8:	78fb      	ldrb	r3, [r7, #3]
 80025ba:	3b01      	subs	r3, #1
 80025bc:	429a      	cmp	r2, r3
 80025be:	d3ec      	bcc.n	800259a <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80025c0:	883b      	ldrh	r3, [r7, #0]
 80025c2:	0418      	lsls	r0, r3, #16
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	6819      	ldr	r1, [r3, #0]
 80025c8:	78fb      	ldrb	r3, [r7, #3]
 80025ca:	3b01      	subs	r3, #1
 80025cc:	68ba      	ldr	r2, [r7, #8]
 80025ce:	4302      	orrs	r2, r0
 80025d0:	3340      	adds	r3, #64	; 0x40
 80025d2:	009b      	lsls	r3, r3, #2
 80025d4:	440b      	add	r3, r1
 80025d6:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80025d8:	2300      	movs	r3, #0
}
 80025da:	4618      	mov	r0, r3
 80025dc:	3714      	adds	r7, #20
 80025de:	46bd      	mov	sp, r7
 80025e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e4:	4770      	bx	lr

080025e6 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80025e6:	b480      	push	{r7}
 80025e8:	b083      	sub	sp, #12
 80025ea:	af00      	add	r7, sp, #0
 80025ec:	6078      	str	r0, [r7, #4]
 80025ee:	460b      	mov	r3, r1
 80025f0:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	887a      	ldrh	r2, [r7, #2]
 80025f8:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80025fa:	2300      	movs	r3, #0
}
 80025fc:	4618      	mov	r0, r3
 80025fe:	370c      	adds	r7, #12
 8002600:	46bd      	mov	sp, r7
 8002602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002606:	4770      	bx	lr

08002608 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8002608:	b480      	push	{r7}
 800260a:	b083      	sub	sp, #12
 800260c:	af00      	add	r7, sp, #0
 800260e:	6078      	str	r0, [r7, #4]
 8002610:	460b      	mov	r3, r1
 8002612:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8002614:	bf00      	nop
 8002616:	370c      	adds	r7, #12
 8002618:	46bd      	mov	sp, r7
 800261a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800261e:	4770      	bx	lr

08002620 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002620:	b580      	push	{r7, lr}
 8002622:	b086      	sub	sp, #24
 8002624:	af00      	add	r7, sp, #0
 8002626:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	2b00      	cmp	r3, #0
 800262c:	d101      	bne.n	8002632 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800262e:	2301      	movs	r3, #1
 8002630:	e267      	b.n	8002b02 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	f003 0301 	and.w	r3, r3, #1
 800263a:	2b00      	cmp	r3, #0
 800263c:	d075      	beq.n	800272a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800263e:	4b88      	ldr	r3, [pc, #544]	; (8002860 <HAL_RCC_OscConfig+0x240>)
 8002640:	689b      	ldr	r3, [r3, #8]
 8002642:	f003 030c 	and.w	r3, r3, #12
 8002646:	2b04      	cmp	r3, #4
 8002648:	d00c      	beq.n	8002664 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800264a:	4b85      	ldr	r3, [pc, #532]	; (8002860 <HAL_RCC_OscConfig+0x240>)
 800264c:	689b      	ldr	r3, [r3, #8]
 800264e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002652:	2b08      	cmp	r3, #8
 8002654:	d112      	bne.n	800267c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002656:	4b82      	ldr	r3, [pc, #520]	; (8002860 <HAL_RCC_OscConfig+0x240>)
 8002658:	685b      	ldr	r3, [r3, #4]
 800265a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800265e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002662:	d10b      	bne.n	800267c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002664:	4b7e      	ldr	r3, [pc, #504]	; (8002860 <HAL_RCC_OscConfig+0x240>)
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800266c:	2b00      	cmp	r3, #0
 800266e:	d05b      	beq.n	8002728 <HAL_RCC_OscConfig+0x108>
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	685b      	ldr	r3, [r3, #4]
 8002674:	2b00      	cmp	r3, #0
 8002676:	d157      	bne.n	8002728 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002678:	2301      	movs	r3, #1
 800267a:	e242      	b.n	8002b02 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	685b      	ldr	r3, [r3, #4]
 8002680:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002684:	d106      	bne.n	8002694 <HAL_RCC_OscConfig+0x74>
 8002686:	4b76      	ldr	r3, [pc, #472]	; (8002860 <HAL_RCC_OscConfig+0x240>)
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	4a75      	ldr	r2, [pc, #468]	; (8002860 <HAL_RCC_OscConfig+0x240>)
 800268c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002690:	6013      	str	r3, [r2, #0]
 8002692:	e01d      	b.n	80026d0 <HAL_RCC_OscConfig+0xb0>
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	685b      	ldr	r3, [r3, #4]
 8002698:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800269c:	d10c      	bne.n	80026b8 <HAL_RCC_OscConfig+0x98>
 800269e:	4b70      	ldr	r3, [pc, #448]	; (8002860 <HAL_RCC_OscConfig+0x240>)
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	4a6f      	ldr	r2, [pc, #444]	; (8002860 <HAL_RCC_OscConfig+0x240>)
 80026a4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80026a8:	6013      	str	r3, [r2, #0]
 80026aa:	4b6d      	ldr	r3, [pc, #436]	; (8002860 <HAL_RCC_OscConfig+0x240>)
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	4a6c      	ldr	r2, [pc, #432]	; (8002860 <HAL_RCC_OscConfig+0x240>)
 80026b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80026b4:	6013      	str	r3, [r2, #0]
 80026b6:	e00b      	b.n	80026d0 <HAL_RCC_OscConfig+0xb0>
 80026b8:	4b69      	ldr	r3, [pc, #420]	; (8002860 <HAL_RCC_OscConfig+0x240>)
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	4a68      	ldr	r2, [pc, #416]	; (8002860 <HAL_RCC_OscConfig+0x240>)
 80026be:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80026c2:	6013      	str	r3, [r2, #0]
 80026c4:	4b66      	ldr	r3, [pc, #408]	; (8002860 <HAL_RCC_OscConfig+0x240>)
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	4a65      	ldr	r2, [pc, #404]	; (8002860 <HAL_RCC_OscConfig+0x240>)
 80026ca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80026ce:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	685b      	ldr	r3, [r3, #4]
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d013      	beq.n	8002700 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026d8:	f7fe fa16 	bl	8000b08 <HAL_GetTick>
 80026dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80026de:	e008      	b.n	80026f2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80026e0:	f7fe fa12 	bl	8000b08 <HAL_GetTick>
 80026e4:	4602      	mov	r2, r0
 80026e6:	693b      	ldr	r3, [r7, #16]
 80026e8:	1ad3      	subs	r3, r2, r3
 80026ea:	2b64      	cmp	r3, #100	; 0x64
 80026ec:	d901      	bls.n	80026f2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80026ee:	2303      	movs	r3, #3
 80026f0:	e207      	b.n	8002b02 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80026f2:	4b5b      	ldr	r3, [pc, #364]	; (8002860 <HAL_RCC_OscConfig+0x240>)
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d0f0      	beq.n	80026e0 <HAL_RCC_OscConfig+0xc0>
 80026fe:	e014      	b.n	800272a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002700:	f7fe fa02 	bl	8000b08 <HAL_GetTick>
 8002704:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002706:	e008      	b.n	800271a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002708:	f7fe f9fe 	bl	8000b08 <HAL_GetTick>
 800270c:	4602      	mov	r2, r0
 800270e:	693b      	ldr	r3, [r7, #16]
 8002710:	1ad3      	subs	r3, r2, r3
 8002712:	2b64      	cmp	r3, #100	; 0x64
 8002714:	d901      	bls.n	800271a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002716:	2303      	movs	r3, #3
 8002718:	e1f3      	b.n	8002b02 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800271a:	4b51      	ldr	r3, [pc, #324]	; (8002860 <HAL_RCC_OscConfig+0x240>)
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002722:	2b00      	cmp	r3, #0
 8002724:	d1f0      	bne.n	8002708 <HAL_RCC_OscConfig+0xe8>
 8002726:	e000      	b.n	800272a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002728:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	f003 0302 	and.w	r3, r3, #2
 8002732:	2b00      	cmp	r3, #0
 8002734:	d063      	beq.n	80027fe <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002736:	4b4a      	ldr	r3, [pc, #296]	; (8002860 <HAL_RCC_OscConfig+0x240>)
 8002738:	689b      	ldr	r3, [r3, #8]
 800273a:	f003 030c 	and.w	r3, r3, #12
 800273e:	2b00      	cmp	r3, #0
 8002740:	d00b      	beq.n	800275a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002742:	4b47      	ldr	r3, [pc, #284]	; (8002860 <HAL_RCC_OscConfig+0x240>)
 8002744:	689b      	ldr	r3, [r3, #8]
 8002746:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800274a:	2b08      	cmp	r3, #8
 800274c:	d11c      	bne.n	8002788 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800274e:	4b44      	ldr	r3, [pc, #272]	; (8002860 <HAL_RCC_OscConfig+0x240>)
 8002750:	685b      	ldr	r3, [r3, #4]
 8002752:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002756:	2b00      	cmp	r3, #0
 8002758:	d116      	bne.n	8002788 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800275a:	4b41      	ldr	r3, [pc, #260]	; (8002860 <HAL_RCC_OscConfig+0x240>)
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	f003 0302 	and.w	r3, r3, #2
 8002762:	2b00      	cmp	r3, #0
 8002764:	d005      	beq.n	8002772 <HAL_RCC_OscConfig+0x152>
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	68db      	ldr	r3, [r3, #12]
 800276a:	2b01      	cmp	r3, #1
 800276c:	d001      	beq.n	8002772 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800276e:	2301      	movs	r3, #1
 8002770:	e1c7      	b.n	8002b02 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002772:	4b3b      	ldr	r3, [pc, #236]	; (8002860 <HAL_RCC_OscConfig+0x240>)
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	691b      	ldr	r3, [r3, #16]
 800277e:	00db      	lsls	r3, r3, #3
 8002780:	4937      	ldr	r1, [pc, #220]	; (8002860 <HAL_RCC_OscConfig+0x240>)
 8002782:	4313      	orrs	r3, r2
 8002784:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002786:	e03a      	b.n	80027fe <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	68db      	ldr	r3, [r3, #12]
 800278c:	2b00      	cmp	r3, #0
 800278e:	d020      	beq.n	80027d2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002790:	4b34      	ldr	r3, [pc, #208]	; (8002864 <HAL_RCC_OscConfig+0x244>)
 8002792:	2201      	movs	r2, #1
 8002794:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002796:	f7fe f9b7 	bl	8000b08 <HAL_GetTick>
 800279a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800279c:	e008      	b.n	80027b0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800279e:	f7fe f9b3 	bl	8000b08 <HAL_GetTick>
 80027a2:	4602      	mov	r2, r0
 80027a4:	693b      	ldr	r3, [r7, #16]
 80027a6:	1ad3      	subs	r3, r2, r3
 80027a8:	2b02      	cmp	r3, #2
 80027aa:	d901      	bls.n	80027b0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80027ac:	2303      	movs	r3, #3
 80027ae:	e1a8      	b.n	8002b02 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80027b0:	4b2b      	ldr	r3, [pc, #172]	; (8002860 <HAL_RCC_OscConfig+0x240>)
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	f003 0302 	and.w	r3, r3, #2
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d0f0      	beq.n	800279e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80027bc:	4b28      	ldr	r3, [pc, #160]	; (8002860 <HAL_RCC_OscConfig+0x240>)
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	691b      	ldr	r3, [r3, #16]
 80027c8:	00db      	lsls	r3, r3, #3
 80027ca:	4925      	ldr	r1, [pc, #148]	; (8002860 <HAL_RCC_OscConfig+0x240>)
 80027cc:	4313      	orrs	r3, r2
 80027ce:	600b      	str	r3, [r1, #0]
 80027d0:	e015      	b.n	80027fe <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80027d2:	4b24      	ldr	r3, [pc, #144]	; (8002864 <HAL_RCC_OscConfig+0x244>)
 80027d4:	2200      	movs	r2, #0
 80027d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027d8:	f7fe f996 	bl	8000b08 <HAL_GetTick>
 80027dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80027de:	e008      	b.n	80027f2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80027e0:	f7fe f992 	bl	8000b08 <HAL_GetTick>
 80027e4:	4602      	mov	r2, r0
 80027e6:	693b      	ldr	r3, [r7, #16]
 80027e8:	1ad3      	subs	r3, r2, r3
 80027ea:	2b02      	cmp	r3, #2
 80027ec:	d901      	bls.n	80027f2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80027ee:	2303      	movs	r3, #3
 80027f0:	e187      	b.n	8002b02 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80027f2:	4b1b      	ldr	r3, [pc, #108]	; (8002860 <HAL_RCC_OscConfig+0x240>)
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	f003 0302 	and.w	r3, r3, #2
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d1f0      	bne.n	80027e0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	f003 0308 	and.w	r3, r3, #8
 8002806:	2b00      	cmp	r3, #0
 8002808:	d036      	beq.n	8002878 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	695b      	ldr	r3, [r3, #20]
 800280e:	2b00      	cmp	r3, #0
 8002810:	d016      	beq.n	8002840 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002812:	4b15      	ldr	r3, [pc, #84]	; (8002868 <HAL_RCC_OscConfig+0x248>)
 8002814:	2201      	movs	r2, #1
 8002816:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002818:	f7fe f976 	bl	8000b08 <HAL_GetTick>
 800281c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800281e:	e008      	b.n	8002832 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002820:	f7fe f972 	bl	8000b08 <HAL_GetTick>
 8002824:	4602      	mov	r2, r0
 8002826:	693b      	ldr	r3, [r7, #16]
 8002828:	1ad3      	subs	r3, r2, r3
 800282a:	2b02      	cmp	r3, #2
 800282c:	d901      	bls.n	8002832 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800282e:	2303      	movs	r3, #3
 8002830:	e167      	b.n	8002b02 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002832:	4b0b      	ldr	r3, [pc, #44]	; (8002860 <HAL_RCC_OscConfig+0x240>)
 8002834:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002836:	f003 0302 	and.w	r3, r3, #2
 800283a:	2b00      	cmp	r3, #0
 800283c:	d0f0      	beq.n	8002820 <HAL_RCC_OscConfig+0x200>
 800283e:	e01b      	b.n	8002878 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002840:	4b09      	ldr	r3, [pc, #36]	; (8002868 <HAL_RCC_OscConfig+0x248>)
 8002842:	2200      	movs	r2, #0
 8002844:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002846:	f7fe f95f 	bl	8000b08 <HAL_GetTick>
 800284a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800284c:	e00e      	b.n	800286c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800284e:	f7fe f95b 	bl	8000b08 <HAL_GetTick>
 8002852:	4602      	mov	r2, r0
 8002854:	693b      	ldr	r3, [r7, #16]
 8002856:	1ad3      	subs	r3, r2, r3
 8002858:	2b02      	cmp	r3, #2
 800285a:	d907      	bls.n	800286c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800285c:	2303      	movs	r3, #3
 800285e:	e150      	b.n	8002b02 <HAL_RCC_OscConfig+0x4e2>
 8002860:	40023800 	.word	0x40023800
 8002864:	42470000 	.word	0x42470000
 8002868:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800286c:	4b88      	ldr	r3, [pc, #544]	; (8002a90 <HAL_RCC_OscConfig+0x470>)
 800286e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002870:	f003 0302 	and.w	r3, r3, #2
 8002874:	2b00      	cmp	r3, #0
 8002876:	d1ea      	bne.n	800284e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	f003 0304 	and.w	r3, r3, #4
 8002880:	2b00      	cmp	r3, #0
 8002882:	f000 8097 	beq.w	80029b4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002886:	2300      	movs	r3, #0
 8002888:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800288a:	4b81      	ldr	r3, [pc, #516]	; (8002a90 <HAL_RCC_OscConfig+0x470>)
 800288c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800288e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002892:	2b00      	cmp	r3, #0
 8002894:	d10f      	bne.n	80028b6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002896:	2300      	movs	r3, #0
 8002898:	60bb      	str	r3, [r7, #8]
 800289a:	4b7d      	ldr	r3, [pc, #500]	; (8002a90 <HAL_RCC_OscConfig+0x470>)
 800289c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800289e:	4a7c      	ldr	r2, [pc, #496]	; (8002a90 <HAL_RCC_OscConfig+0x470>)
 80028a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80028a4:	6413      	str	r3, [r2, #64]	; 0x40
 80028a6:	4b7a      	ldr	r3, [pc, #488]	; (8002a90 <HAL_RCC_OscConfig+0x470>)
 80028a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028ae:	60bb      	str	r3, [r7, #8]
 80028b0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80028b2:	2301      	movs	r3, #1
 80028b4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028b6:	4b77      	ldr	r3, [pc, #476]	; (8002a94 <HAL_RCC_OscConfig+0x474>)
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d118      	bne.n	80028f4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80028c2:	4b74      	ldr	r3, [pc, #464]	; (8002a94 <HAL_RCC_OscConfig+0x474>)
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	4a73      	ldr	r2, [pc, #460]	; (8002a94 <HAL_RCC_OscConfig+0x474>)
 80028c8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80028cc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80028ce:	f7fe f91b 	bl	8000b08 <HAL_GetTick>
 80028d2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028d4:	e008      	b.n	80028e8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80028d6:	f7fe f917 	bl	8000b08 <HAL_GetTick>
 80028da:	4602      	mov	r2, r0
 80028dc:	693b      	ldr	r3, [r7, #16]
 80028de:	1ad3      	subs	r3, r2, r3
 80028e0:	2b02      	cmp	r3, #2
 80028e2:	d901      	bls.n	80028e8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80028e4:	2303      	movs	r3, #3
 80028e6:	e10c      	b.n	8002b02 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028e8:	4b6a      	ldr	r3, [pc, #424]	; (8002a94 <HAL_RCC_OscConfig+0x474>)
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d0f0      	beq.n	80028d6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	689b      	ldr	r3, [r3, #8]
 80028f8:	2b01      	cmp	r3, #1
 80028fa:	d106      	bne.n	800290a <HAL_RCC_OscConfig+0x2ea>
 80028fc:	4b64      	ldr	r3, [pc, #400]	; (8002a90 <HAL_RCC_OscConfig+0x470>)
 80028fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002900:	4a63      	ldr	r2, [pc, #396]	; (8002a90 <HAL_RCC_OscConfig+0x470>)
 8002902:	f043 0301 	orr.w	r3, r3, #1
 8002906:	6713      	str	r3, [r2, #112]	; 0x70
 8002908:	e01c      	b.n	8002944 <HAL_RCC_OscConfig+0x324>
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	689b      	ldr	r3, [r3, #8]
 800290e:	2b05      	cmp	r3, #5
 8002910:	d10c      	bne.n	800292c <HAL_RCC_OscConfig+0x30c>
 8002912:	4b5f      	ldr	r3, [pc, #380]	; (8002a90 <HAL_RCC_OscConfig+0x470>)
 8002914:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002916:	4a5e      	ldr	r2, [pc, #376]	; (8002a90 <HAL_RCC_OscConfig+0x470>)
 8002918:	f043 0304 	orr.w	r3, r3, #4
 800291c:	6713      	str	r3, [r2, #112]	; 0x70
 800291e:	4b5c      	ldr	r3, [pc, #368]	; (8002a90 <HAL_RCC_OscConfig+0x470>)
 8002920:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002922:	4a5b      	ldr	r2, [pc, #364]	; (8002a90 <HAL_RCC_OscConfig+0x470>)
 8002924:	f043 0301 	orr.w	r3, r3, #1
 8002928:	6713      	str	r3, [r2, #112]	; 0x70
 800292a:	e00b      	b.n	8002944 <HAL_RCC_OscConfig+0x324>
 800292c:	4b58      	ldr	r3, [pc, #352]	; (8002a90 <HAL_RCC_OscConfig+0x470>)
 800292e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002930:	4a57      	ldr	r2, [pc, #348]	; (8002a90 <HAL_RCC_OscConfig+0x470>)
 8002932:	f023 0301 	bic.w	r3, r3, #1
 8002936:	6713      	str	r3, [r2, #112]	; 0x70
 8002938:	4b55      	ldr	r3, [pc, #340]	; (8002a90 <HAL_RCC_OscConfig+0x470>)
 800293a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800293c:	4a54      	ldr	r2, [pc, #336]	; (8002a90 <HAL_RCC_OscConfig+0x470>)
 800293e:	f023 0304 	bic.w	r3, r3, #4
 8002942:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	689b      	ldr	r3, [r3, #8]
 8002948:	2b00      	cmp	r3, #0
 800294a:	d015      	beq.n	8002978 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800294c:	f7fe f8dc 	bl	8000b08 <HAL_GetTick>
 8002950:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002952:	e00a      	b.n	800296a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002954:	f7fe f8d8 	bl	8000b08 <HAL_GetTick>
 8002958:	4602      	mov	r2, r0
 800295a:	693b      	ldr	r3, [r7, #16]
 800295c:	1ad3      	subs	r3, r2, r3
 800295e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002962:	4293      	cmp	r3, r2
 8002964:	d901      	bls.n	800296a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002966:	2303      	movs	r3, #3
 8002968:	e0cb      	b.n	8002b02 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800296a:	4b49      	ldr	r3, [pc, #292]	; (8002a90 <HAL_RCC_OscConfig+0x470>)
 800296c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800296e:	f003 0302 	and.w	r3, r3, #2
 8002972:	2b00      	cmp	r3, #0
 8002974:	d0ee      	beq.n	8002954 <HAL_RCC_OscConfig+0x334>
 8002976:	e014      	b.n	80029a2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002978:	f7fe f8c6 	bl	8000b08 <HAL_GetTick>
 800297c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800297e:	e00a      	b.n	8002996 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002980:	f7fe f8c2 	bl	8000b08 <HAL_GetTick>
 8002984:	4602      	mov	r2, r0
 8002986:	693b      	ldr	r3, [r7, #16]
 8002988:	1ad3      	subs	r3, r2, r3
 800298a:	f241 3288 	movw	r2, #5000	; 0x1388
 800298e:	4293      	cmp	r3, r2
 8002990:	d901      	bls.n	8002996 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002992:	2303      	movs	r3, #3
 8002994:	e0b5      	b.n	8002b02 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002996:	4b3e      	ldr	r3, [pc, #248]	; (8002a90 <HAL_RCC_OscConfig+0x470>)
 8002998:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800299a:	f003 0302 	and.w	r3, r3, #2
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d1ee      	bne.n	8002980 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80029a2:	7dfb      	ldrb	r3, [r7, #23]
 80029a4:	2b01      	cmp	r3, #1
 80029a6:	d105      	bne.n	80029b4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80029a8:	4b39      	ldr	r3, [pc, #228]	; (8002a90 <HAL_RCC_OscConfig+0x470>)
 80029aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029ac:	4a38      	ldr	r2, [pc, #224]	; (8002a90 <HAL_RCC_OscConfig+0x470>)
 80029ae:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80029b2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	699b      	ldr	r3, [r3, #24]
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	f000 80a1 	beq.w	8002b00 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80029be:	4b34      	ldr	r3, [pc, #208]	; (8002a90 <HAL_RCC_OscConfig+0x470>)
 80029c0:	689b      	ldr	r3, [r3, #8]
 80029c2:	f003 030c 	and.w	r3, r3, #12
 80029c6:	2b08      	cmp	r3, #8
 80029c8:	d05c      	beq.n	8002a84 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	699b      	ldr	r3, [r3, #24]
 80029ce:	2b02      	cmp	r3, #2
 80029d0:	d141      	bne.n	8002a56 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80029d2:	4b31      	ldr	r3, [pc, #196]	; (8002a98 <HAL_RCC_OscConfig+0x478>)
 80029d4:	2200      	movs	r2, #0
 80029d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029d8:	f7fe f896 	bl	8000b08 <HAL_GetTick>
 80029dc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80029de:	e008      	b.n	80029f2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80029e0:	f7fe f892 	bl	8000b08 <HAL_GetTick>
 80029e4:	4602      	mov	r2, r0
 80029e6:	693b      	ldr	r3, [r7, #16]
 80029e8:	1ad3      	subs	r3, r2, r3
 80029ea:	2b02      	cmp	r3, #2
 80029ec:	d901      	bls.n	80029f2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80029ee:	2303      	movs	r3, #3
 80029f0:	e087      	b.n	8002b02 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80029f2:	4b27      	ldr	r3, [pc, #156]	; (8002a90 <HAL_RCC_OscConfig+0x470>)
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d1f0      	bne.n	80029e0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	69da      	ldr	r2, [r3, #28]
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	6a1b      	ldr	r3, [r3, #32]
 8002a06:	431a      	orrs	r2, r3
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a0c:	019b      	lsls	r3, r3, #6
 8002a0e:	431a      	orrs	r2, r3
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a14:	085b      	lsrs	r3, r3, #1
 8002a16:	3b01      	subs	r3, #1
 8002a18:	041b      	lsls	r3, r3, #16
 8002a1a:	431a      	orrs	r2, r3
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a20:	061b      	lsls	r3, r3, #24
 8002a22:	491b      	ldr	r1, [pc, #108]	; (8002a90 <HAL_RCC_OscConfig+0x470>)
 8002a24:	4313      	orrs	r3, r2
 8002a26:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002a28:	4b1b      	ldr	r3, [pc, #108]	; (8002a98 <HAL_RCC_OscConfig+0x478>)
 8002a2a:	2201      	movs	r2, #1
 8002a2c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a2e:	f7fe f86b 	bl	8000b08 <HAL_GetTick>
 8002a32:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a34:	e008      	b.n	8002a48 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002a36:	f7fe f867 	bl	8000b08 <HAL_GetTick>
 8002a3a:	4602      	mov	r2, r0
 8002a3c:	693b      	ldr	r3, [r7, #16]
 8002a3e:	1ad3      	subs	r3, r2, r3
 8002a40:	2b02      	cmp	r3, #2
 8002a42:	d901      	bls.n	8002a48 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002a44:	2303      	movs	r3, #3
 8002a46:	e05c      	b.n	8002b02 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a48:	4b11      	ldr	r3, [pc, #68]	; (8002a90 <HAL_RCC_OscConfig+0x470>)
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d0f0      	beq.n	8002a36 <HAL_RCC_OscConfig+0x416>
 8002a54:	e054      	b.n	8002b00 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a56:	4b10      	ldr	r3, [pc, #64]	; (8002a98 <HAL_RCC_OscConfig+0x478>)
 8002a58:	2200      	movs	r2, #0
 8002a5a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a5c:	f7fe f854 	bl	8000b08 <HAL_GetTick>
 8002a60:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a62:	e008      	b.n	8002a76 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002a64:	f7fe f850 	bl	8000b08 <HAL_GetTick>
 8002a68:	4602      	mov	r2, r0
 8002a6a:	693b      	ldr	r3, [r7, #16]
 8002a6c:	1ad3      	subs	r3, r2, r3
 8002a6e:	2b02      	cmp	r3, #2
 8002a70:	d901      	bls.n	8002a76 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002a72:	2303      	movs	r3, #3
 8002a74:	e045      	b.n	8002b02 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a76:	4b06      	ldr	r3, [pc, #24]	; (8002a90 <HAL_RCC_OscConfig+0x470>)
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d1f0      	bne.n	8002a64 <HAL_RCC_OscConfig+0x444>
 8002a82:	e03d      	b.n	8002b00 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	699b      	ldr	r3, [r3, #24]
 8002a88:	2b01      	cmp	r3, #1
 8002a8a:	d107      	bne.n	8002a9c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002a8c:	2301      	movs	r3, #1
 8002a8e:	e038      	b.n	8002b02 <HAL_RCC_OscConfig+0x4e2>
 8002a90:	40023800 	.word	0x40023800
 8002a94:	40007000 	.word	0x40007000
 8002a98:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002a9c:	4b1b      	ldr	r3, [pc, #108]	; (8002b0c <HAL_RCC_OscConfig+0x4ec>)
 8002a9e:	685b      	ldr	r3, [r3, #4]
 8002aa0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	699b      	ldr	r3, [r3, #24]
 8002aa6:	2b01      	cmp	r3, #1
 8002aa8:	d028      	beq.n	8002afc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002ab4:	429a      	cmp	r2, r3
 8002ab6:	d121      	bne.n	8002afc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ac2:	429a      	cmp	r2, r3
 8002ac4:	d11a      	bne.n	8002afc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002ac6:	68fa      	ldr	r2, [r7, #12]
 8002ac8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002acc:	4013      	ands	r3, r2
 8002ace:	687a      	ldr	r2, [r7, #4]
 8002ad0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002ad2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002ad4:	4293      	cmp	r3, r2
 8002ad6:	d111      	bne.n	8002afc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ae2:	085b      	lsrs	r3, r3, #1
 8002ae4:	3b01      	subs	r3, #1
 8002ae6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002ae8:	429a      	cmp	r2, r3
 8002aea:	d107      	bne.n	8002afc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002af6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002af8:	429a      	cmp	r2, r3
 8002afa:	d001      	beq.n	8002b00 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002afc:	2301      	movs	r3, #1
 8002afe:	e000      	b.n	8002b02 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002b00:	2300      	movs	r3, #0
}
 8002b02:	4618      	mov	r0, r3
 8002b04:	3718      	adds	r7, #24
 8002b06:	46bd      	mov	sp, r7
 8002b08:	bd80      	pop	{r7, pc}
 8002b0a:	bf00      	nop
 8002b0c:	40023800 	.word	0x40023800

08002b10 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002b10:	b580      	push	{r7, lr}
 8002b12:	b084      	sub	sp, #16
 8002b14:	af00      	add	r7, sp, #0
 8002b16:	6078      	str	r0, [r7, #4]
 8002b18:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d101      	bne.n	8002b24 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002b20:	2301      	movs	r3, #1
 8002b22:	e0cc      	b.n	8002cbe <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002b24:	4b68      	ldr	r3, [pc, #416]	; (8002cc8 <HAL_RCC_ClockConfig+0x1b8>)
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	f003 0307 	and.w	r3, r3, #7
 8002b2c:	683a      	ldr	r2, [r7, #0]
 8002b2e:	429a      	cmp	r2, r3
 8002b30:	d90c      	bls.n	8002b4c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b32:	4b65      	ldr	r3, [pc, #404]	; (8002cc8 <HAL_RCC_ClockConfig+0x1b8>)
 8002b34:	683a      	ldr	r2, [r7, #0]
 8002b36:	b2d2      	uxtb	r2, r2
 8002b38:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b3a:	4b63      	ldr	r3, [pc, #396]	; (8002cc8 <HAL_RCC_ClockConfig+0x1b8>)
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	f003 0307 	and.w	r3, r3, #7
 8002b42:	683a      	ldr	r2, [r7, #0]
 8002b44:	429a      	cmp	r2, r3
 8002b46:	d001      	beq.n	8002b4c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002b48:	2301      	movs	r3, #1
 8002b4a:	e0b8      	b.n	8002cbe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	f003 0302 	and.w	r3, r3, #2
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d020      	beq.n	8002b9a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	f003 0304 	and.w	r3, r3, #4
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d005      	beq.n	8002b70 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002b64:	4b59      	ldr	r3, [pc, #356]	; (8002ccc <HAL_RCC_ClockConfig+0x1bc>)
 8002b66:	689b      	ldr	r3, [r3, #8]
 8002b68:	4a58      	ldr	r2, [pc, #352]	; (8002ccc <HAL_RCC_ClockConfig+0x1bc>)
 8002b6a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002b6e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	f003 0308 	and.w	r3, r3, #8
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d005      	beq.n	8002b88 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002b7c:	4b53      	ldr	r3, [pc, #332]	; (8002ccc <HAL_RCC_ClockConfig+0x1bc>)
 8002b7e:	689b      	ldr	r3, [r3, #8]
 8002b80:	4a52      	ldr	r2, [pc, #328]	; (8002ccc <HAL_RCC_ClockConfig+0x1bc>)
 8002b82:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002b86:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002b88:	4b50      	ldr	r3, [pc, #320]	; (8002ccc <HAL_RCC_ClockConfig+0x1bc>)
 8002b8a:	689b      	ldr	r3, [r3, #8]
 8002b8c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	689b      	ldr	r3, [r3, #8]
 8002b94:	494d      	ldr	r1, [pc, #308]	; (8002ccc <HAL_RCC_ClockConfig+0x1bc>)
 8002b96:	4313      	orrs	r3, r2
 8002b98:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	f003 0301 	and.w	r3, r3, #1
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d044      	beq.n	8002c30 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	685b      	ldr	r3, [r3, #4]
 8002baa:	2b01      	cmp	r3, #1
 8002bac:	d107      	bne.n	8002bbe <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002bae:	4b47      	ldr	r3, [pc, #284]	; (8002ccc <HAL_RCC_ClockConfig+0x1bc>)
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d119      	bne.n	8002bee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002bba:	2301      	movs	r3, #1
 8002bbc:	e07f      	b.n	8002cbe <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	685b      	ldr	r3, [r3, #4]
 8002bc2:	2b02      	cmp	r3, #2
 8002bc4:	d003      	beq.n	8002bce <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002bca:	2b03      	cmp	r3, #3
 8002bcc:	d107      	bne.n	8002bde <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002bce:	4b3f      	ldr	r3, [pc, #252]	; (8002ccc <HAL_RCC_ClockConfig+0x1bc>)
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d109      	bne.n	8002bee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002bda:	2301      	movs	r3, #1
 8002bdc:	e06f      	b.n	8002cbe <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002bde:	4b3b      	ldr	r3, [pc, #236]	; (8002ccc <HAL_RCC_ClockConfig+0x1bc>)
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	f003 0302 	and.w	r3, r3, #2
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d101      	bne.n	8002bee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002bea:	2301      	movs	r3, #1
 8002bec:	e067      	b.n	8002cbe <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002bee:	4b37      	ldr	r3, [pc, #220]	; (8002ccc <HAL_RCC_ClockConfig+0x1bc>)
 8002bf0:	689b      	ldr	r3, [r3, #8]
 8002bf2:	f023 0203 	bic.w	r2, r3, #3
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	685b      	ldr	r3, [r3, #4]
 8002bfa:	4934      	ldr	r1, [pc, #208]	; (8002ccc <HAL_RCC_ClockConfig+0x1bc>)
 8002bfc:	4313      	orrs	r3, r2
 8002bfe:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002c00:	f7fd ff82 	bl	8000b08 <HAL_GetTick>
 8002c04:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c06:	e00a      	b.n	8002c1e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002c08:	f7fd ff7e 	bl	8000b08 <HAL_GetTick>
 8002c0c:	4602      	mov	r2, r0
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	1ad3      	subs	r3, r2, r3
 8002c12:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c16:	4293      	cmp	r3, r2
 8002c18:	d901      	bls.n	8002c1e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002c1a:	2303      	movs	r3, #3
 8002c1c:	e04f      	b.n	8002cbe <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c1e:	4b2b      	ldr	r3, [pc, #172]	; (8002ccc <HAL_RCC_ClockConfig+0x1bc>)
 8002c20:	689b      	ldr	r3, [r3, #8]
 8002c22:	f003 020c 	and.w	r2, r3, #12
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	685b      	ldr	r3, [r3, #4]
 8002c2a:	009b      	lsls	r3, r3, #2
 8002c2c:	429a      	cmp	r2, r3
 8002c2e:	d1eb      	bne.n	8002c08 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002c30:	4b25      	ldr	r3, [pc, #148]	; (8002cc8 <HAL_RCC_ClockConfig+0x1b8>)
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	f003 0307 	and.w	r3, r3, #7
 8002c38:	683a      	ldr	r2, [r7, #0]
 8002c3a:	429a      	cmp	r2, r3
 8002c3c:	d20c      	bcs.n	8002c58 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c3e:	4b22      	ldr	r3, [pc, #136]	; (8002cc8 <HAL_RCC_ClockConfig+0x1b8>)
 8002c40:	683a      	ldr	r2, [r7, #0]
 8002c42:	b2d2      	uxtb	r2, r2
 8002c44:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c46:	4b20      	ldr	r3, [pc, #128]	; (8002cc8 <HAL_RCC_ClockConfig+0x1b8>)
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	f003 0307 	and.w	r3, r3, #7
 8002c4e:	683a      	ldr	r2, [r7, #0]
 8002c50:	429a      	cmp	r2, r3
 8002c52:	d001      	beq.n	8002c58 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002c54:	2301      	movs	r3, #1
 8002c56:	e032      	b.n	8002cbe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	f003 0304 	and.w	r3, r3, #4
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d008      	beq.n	8002c76 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002c64:	4b19      	ldr	r3, [pc, #100]	; (8002ccc <HAL_RCC_ClockConfig+0x1bc>)
 8002c66:	689b      	ldr	r3, [r3, #8]
 8002c68:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	68db      	ldr	r3, [r3, #12]
 8002c70:	4916      	ldr	r1, [pc, #88]	; (8002ccc <HAL_RCC_ClockConfig+0x1bc>)
 8002c72:	4313      	orrs	r3, r2
 8002c74:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	f003 0308 	and.w	r3, r3, #8
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d009      	beq.n	8002c96 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002c82:	4b12      	ldr	r3, [pc, #72]	; (8002ccc <HAL_RCC_ClockConfig+0x1bc>)
 8002c84:	689b      	ldr	r3, [r3, #8]
 8002c86:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	691b      	ldr	r3, [r3, #16]
 8002c8e:	00db      	lsls	r3, r3, #3
 8002c90:	490e      	ldr	r1, [pc, #56]	; (8002ccc <HAL_RCC_ClockConfig+0x1bc>)
 8002c92:	4313      	orrs	r3, r2
 8002c94:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002c96:	f000 f821 	bl	8002cdc <HAL_RCC_GetSysClockFreq>
 8002c9a:	4602      	mov	r2, r0
 8002c9c:	4b0b      	ldr	r3, [pc, #44]	; (8002ccc <HAL_RCC_ClockConfig+0x1bc>)
 8002c9e:	689b      	ldr	r3, [r3, #8]
 8002ca0:	091b      	lsrs	r3, r3, #4
 8002ca2:	f003 030f 	and.w	r3, r3, #15
 8002ca6:	490a      	ldr	r1, [pc, #40]	; (8002cd0 <HAL_RCC_ClockConfig+0x1c0>)
 8002ca8:	5ccb      	ldrb	r3, [r1, r3]
 8002caa:	fa22 f303 	lsr.w	r3, r2, r3
 8002cae:	4a09      	ldr	r2, [pc, #36]	; (8002cd4 <HAL_RCC_ClockConfig+0x1c4>)
 8002cb0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002cb2:	4b09      	ldr	r3, [pc, #36]	; (8002cd8 <HAL_RCC_ClockConfig+0x1c8>)
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	4618      	mov	r0, r3
 8002cb8:	f7fd fee2 	bl	8000a80 <HAL_InitTick>

  return HAL_OK;
 8002cbc:	2300      	movs	r3, #0
}
 8002cbe:	4618      	mov	r0, r3
 8002cc0:	3710      	adds	r7, #16
 8002cc2:	46bd      	mov	sp, r7
 8002cc4:	bd80      	pop	{r7, pc}
 8002cc6:	bf00      	nop
 8002cc8:	40023c00 	.word	0x40023c00
 8002ccc:	40023800 	.word	0x40023800
 8002cd0:	08007548 	.word	0x08007548
 8002cd4:	20000000 	.word	0x20000000
 8002cd8:	20000004 	.word	0x20000004

08002cdc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002cdc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002ce0:	b094      	sub	sp, #80	; 0x50
 8002ce2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002ce4:	2300      	movs	r3, #0
 8002ce6:	647b      	str	r3, [r7, #68]	; 0x44
 8002ce8:	2300      	movs	r3, #0
 8002cea:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002cec:	2300      	movs	r3, #0
 8002cee:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8002cf0:	2300      	movs	r3, #0
 8002cf2:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002cf4:	4b79      	ldr	r3, [pc, #484]	; (8002edc <HAL_RCC_GetSysClockFreq+0x200>)
 8002cf6:	689b      	ldr	r3, [r3, #8]
 8002cf8:	f003 030c 	and.w	r3, r3, #12
 8002cfc:	2b08      	cmp	r3, #8
 8002cfe:	d00d      	beq.n	8002d1c <HAL_RCC_GetSysClockFreq+0x40>
 8002d00:	2b08      	cmp	r3, #8
 8002d02:	f200 80e1 	bhi.w	8002ec8 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d002      	beq.n	8002d10 <HAL_RCC_GetSysClockFreq+0x34>
 8002d0a:	2b04      	cmp	r3, #4
 8002d0c:	d003      	beq.n	8002d16 <HAL_RCC_GetSysClockFreq+0x3a>
 8002d0e:	e0db      	b.n	8002ec8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002d10:	4b73      	ldr	r3, [pc, #460]	; (8002ee0 <HAL_RCC_GetSysClockFreq+0x204>)
 8002d12:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8002d14:	e0db      	b.n	8002ece <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002d16:	4b73      	ldr	r3, [pc, #460]	; (8002ee4 <HAL_RCC_GetSysClockFreq+0x208>)
 8002d18:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002d1a:	e0d8      	b.n	8002ece <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002d1c:	4b6f      	ldr	r3, [pc, #444]	; (8002edc <HAL_RCC_GetSysClockFreq+0x200>)
 8002d1e:	685b      	ldr	r3, [r3, #4]
 8002d20:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002d24:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002d26:	4b6d      	ldr	r3, [pc, #436]	; (8002edc <HAL_RCC_GetSysClockFreq+0x200>)
 8002d28:	685b      	ldr	r3, [r3, #4]
 8002d2a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d063      	beq.n	8002dfa <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002d32:	4b6a      	ldr	r3, [pc, #424]	; (8002edc <HAL_RCC_GetSysClockFreq+0x200>)
 8002d34:	685b      	ldr	r3, [r3, #4]
 8002d36:	099b      	lsrs	r3, r3, #6
 8002d38:	2200      	movs	r2, #0
 8002d3a:	63bb      	str	r3, [r7, #56]	; 0x38
 8002d3c:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002d3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d40:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002d44:	633b      	str	r3, [r7, #48]	; 0x30
 8002d46:	2300      	movs	r3, #0
 8002d48:	637b      	str	r3, [r7, #52]	; 0x34
 8002d4a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002d4e:	4622      	mov	r2, r4
 8002d50:	462b      	mov	r3, r5
 8002d52:	f04f 0000 	mov.w	r0, #0
 8002d56:	f04f 0100 	mov.w	r1, #0
 8002d5a:	0159      	lsls	r1, r3, #5
 8002d5c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002d60:	0150      	lsls	r0, r2, #5
 8002d62:	4602      	mov	r2, r0
 8002d64:	460b      	mov	r3, r1
 8002d66:	4621      	mov	r1, r4
 8002d68:	1a51      	subs	r1, r2, r1
 8002d6a:	6139      	str	r1, [r7, #16]
 8002d6c:	4629      	mov	r1, r5
 8002d6e:	eb63 0301 	sbc.w	r3, r3, r1
 8002d72:	617b      	str	r3, [r7, #20]
 8002d74:	f04f 0200 	mov.w	r2, #0
 8002d78:	f04f 0300 	mov.w	r3, #0
 8002d7c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002d80:	4659      	mov	r1, fp
 8002d82:	018b      	lsls	r3, r1, #6
 8002d84:	4651      	mov	r1, sl
 8002d86:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002d8a:	4651      	mov	r1, sl
 8002d8c:	018a      	lsls	r2, r1, #6
 8002d8e:	4651      	mov	r1, sl
 8002d90:	ebb2 0801 	subs.w	r8, r2, r1
 8002d94:	4659      	mov	r1, fp
 8002d96:	eb63 0901 	sbc.w	r9, r3, r1
 8002d9a:	f04f 0200 	mov.w	r2, #0
 8002d9e:	f04f 0300 	mov.w	r3, #0
 8002da2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002da6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002daa:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002dae:	4690      	mov	r8, r2
 8002db0:	4699      	mov	r9, r3
 8002db2:	4623      	mov	r3, r4
 8002db4:	eb18 0303 	adds.w	r3, r8, r3
 8002db8:	60bb      	str	r3, [r7, #8]
 8002dba:	462b      	mov	r3, r5
 8002dbc:	eb49 0303 	adc.w	r3, r9, r3
 8002dc0:	60fb      	str	r3, [r7, #12]
 8002dc2:	f04f 0200 	mov.w	r2, #0
 8002dc6:	f04f 0300 	mov.w	r3, #0
 8002dca:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002dce:	4629      	mov	r1, r5
 8002dd0:	024b      	lsls	r3, r1, #9
 8002dd2:	4621      	mov	r1, r4
 8002dd4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002dd8:	4621      	mov	r1, r4
 8002dda:	024a      	lsls	r2, r1, #9
 8002ddc:	4610      	mov	r0, r2
 8002dde:	4619      	mov	r1, r3
 8002de0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002de2:	2200      	movs	r2, #0
 8002de4:	62bb      	str	r3, [r7, #40]	; 0x28
 8002de6:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002de8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002dec:	f7fd f9ec 	bl	80001c8 <__aeabi_uldivmod>
 8002df0:	4602      	mov	r2, r0
 8002df2:	460b      	mov	r3, r1
 8002df4:	4613      	mov	r3, r2
 8002df6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002df8:	e058      	b.n	8002eac <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002dfa:	4b38      	ldr	r3, [pc, #224]	; (8002edc <HAL_RCC_GetSysClockFreq+0x200>)
 8002dfc:	685b      	ldr	r3, [r3, #4]
 8002dfe:	099b      	lsrs	r3, r3, #6
 8002e00:	2200      	movs	r2, #0
 8002e02:	4618      	mov	r0, r3
 8002e04:	4611      	mov	r1, r2
 8002e06:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002e0a:	623b      	str	r3, [r7, #32]
 8002e0c:	2300      	movs	r3, #0
 8002e0e:	627b      	str	r3, [r7, #36]	; 0x24
 8002e10:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002e14:	4642      	mov	r2, r8
 8002e16:	464b      	mov	r3, r9
 8002e18:	f04f 0000 	mov.w	r0, #0
 8002e1c:	f04f 0100 	mov.w	r1, #0
 8002e20:	0159      	lsls	r1, r3, #5
 8002e22:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002e26:	0150      	lsls	r0, r2, #5
 8002e28:	4602      	mov	r2, r0
 8002e2a:	460b      	mov	r3, r1
 8002e2c:	4641      	mov	r1, r8
 8002e2e:	ebb2 0a01 	subs.w	sl, r2, r1
 8002e32:	4649      	mov	r1, r9
 8002e34:	eb63 0b01 	sbc.w	fp, r3, r1
 8002e38:	f04f 0200 	mov.w	r2, #0
 8002e3c:	f04f 0300 	mov.w	r3, #0
 8002e40:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002e44:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002e48:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002e4c:	ebb2 040a 	subs.w	r4, r2, sl
 8002e50:	eb63 050b 	sbc.w	r5, r3, fp
 8002e54:	f04f 0200 	mov.w	r2, #0
 8002e58:	f04f 0300 	mov.w	r3, #0
 8002e5c:	00eb      	lsls	r3, r5, #3
 8002e5e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002e62:	00e2      	lsls	r2, r4, #3
 8002e64:	4614      	mov	r4, r2
 8002e66:	461d      	mov	r5, r3
 8002e68:	4643      	mov	r3, r8
 8002e6a:	18e3      	adds	r3, r4, r3
 8002e6c:	603b      	str	r3, [r7, #0]
 8002e6e:	464b      	mov	r3, r9
 8002e70:	eb45 0303 	adc.w	r3, r5, r3
 8002e74:	607b      	str	r3, [r7, #4]
 8002e76:	f04f 0200 	mov.w	r2, #0
 8002e7a:	f04f 0300 	mov.w	r3, #0
 8002e7e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002e82:	4629      	mov	r1, r5
 8002e84:	028b      	lsls	r3, r1, #10
 8002e86:	4621      	mov	r1, r4
 8002e88:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002e8c:	4621      	mov	r1, r4
 8002e8e:	028a      	lsls	r2, r1, #10
 8002e90:	4610      	mov	r0, r2
 8002e92:	4619      	mov	r1, r3
 8002e94:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002e96:	2200      	movs	r2, #0
 8002e98:	61bb      	str	r3, [r7, #24]
 8002e9a:	61fa      	str	r2, [r7, #28]
 8002e9c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002ea0:	f7fd f992 	bl	80001c8 <__aeabi_uldivmod>
 8002ea4:	4602      	mov	r2, r0
 8002ea6:	460b      	mov	r3, r1
 8002ea8:	4613      	mov	r3, r2
 8002eaa:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002eac:	4b0b      	ldr	r3, [pc, #44]	; (8002edc <HAL_RCC_GetSysClockFreq+0x200>)
 8002eae:	685b      	ldr	r3, [r3, #4]
 8002eb0:	0c1b      	lsrs	r3, r3, #16
 8002eb2:	f003 0303 	and.w	r3, r3, #3
 8002eb6:	3301      	adds	r3, #1
 8002eb8:	005b      	lsls	r3, r3, #1
 8002eba:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8002ebc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002ebe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002ec0:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ec4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002ec6:	e002      	b.n	8002ece <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002ec8:	4b05      	ldr	r3, [pc, #20]	; (8002ee0 <HAL_RCC_GetSysClockFreq+0x204>)
 8002eca:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002ecc:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002ece:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8002ed0:	4618      	mov	r0, r3
 8002ed2:	3750      	adds	r7, #80	; 0x50
 8002ed4:	46bd      	mov	sp, r7
 8002ed6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002eda:	bf00      	nop
 8002edc:	40023800 	.word	0x40023800
 8002ee0:	00f42400 	.word	0x00f42400
 8002ee4:	007a1200 	.word	0x007a1200

08002ee8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002ee8:	b480      	push	{r7}
 8002eea:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002eec:	4b03      	ldr	r3, [pc, #12]	; (8002efc <HAL_RCC_GetHCLKFreq+0x14>)
 8002eee:	681b      	ldr	r3, [r3, #0]
}
 8002ef0:	4618      	mov	r0, r3
 8002ef2:	46bd      	mov	sp, r7
 8002ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef8:	4770      	bx	lr
 8002efa:	bf00      	nop
 8002efc:	20000000 	.word	0x20000000

08002f00 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002f00:	b580      	push	{r7, lr}
 8002f02:	b082      	sub	sp, #8
 8002f04:	af00      	add	r7, sp, #0
 8002f06:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d101      	bne.n	8002f12 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002f0e:	2301      	movs	r3, #1
 8002f10:	e041      	b.n	8002f96 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f18:	b2db      	uxtb	r3, r3
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d106      	bne.n	8002f2c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	2200      	movs	r2, #0
 8002f22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002f26:	6878      	ldr	r0, [r7, #4]
 8002f28:	f7fd fce0 	bl	80008ec <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	2202      	movs	r2, #2
 8002f30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681a      	ldr	r2, [r3, #0]
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	3304      	adds	r3, #4
 8002f3c:	4619      	mov	r1, r3
 8002f3e:	4610      	mov	r0, r2
 8002f40:	f000 f82e 	bl	8002fa0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	2201      	movs	r2, #1
 8002f48:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	2201      	movs	r2, #1
 8002f50:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	2201      	movs	r2, #1
 8002f58:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	2201      	movs	r2, #1
 8002f60:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	2201      	movs	r2, #1
 8002f68:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	2201      	movs	r2, #1
 8002f70:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	2201      	movs	r2, #1
 8002f78:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	2201      	movs	r2, #1
 8002f80:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	2201      	movs	r2, #1
 8002f88:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	2201      	movs	r2, #1
 8002f90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002f94:	2300      	movs	r3, #0
}
 8002f96:	4618      	mov	r0, r3
 8002f98:	3708      	adds	r7, #8
 8002f9a:	46bd      	mov	sp, r7
 8002f9c:	bd80      	pop	{r7, pc}
	...

08002fa0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002fa0:	b480      	push	{r7}
 8002fa2:	b085      	sub	sp, #20
 8002fa4:	af00      	add	r7, sp, #0
 8002fa6:	6078      	str	r0, [r7, #4]
 8002fa8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	4a40      	ldr	r2, [pc, #256]	; (80030b4 <TIM_Base_SetConfig+0x114>)
 8002fb4:	4293      	cmp	r3, r2
 8002fb6:	d013      	beq.n	8002fe0 <TIM_Base_SetConfig+0x40>
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002fbe:	d00f      	beq.n	8002fe0 <TIM_Base_SetConfig+0x40>
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	4a3d      	ldr	r2, [pc, #244]	; (80030b8 <TIM_Base_SetConfig+0x118>)
 8002fc4:	4293      	cmp	r3, r2
 8002fc6:	d00b      	beq.n	8002fe0 <TIM_Base_SetConfig+0x40>
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	4a3c      	ldr	r2, [pc, #240]	; (80030bc <TIM_Base_SetConfig+0x11c>)
 8002fcc:	4293      	cmp	r3, r2
 8002fce:	d007      	beq.n	8002fe0 <TIM_Base_SetConfig+0x40>
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	4a3b      	ldr	r2, [pc, #236]	; (80030c0 <TIM_Base_SetConfig+0x120>)
 8002fd4:	4293      	cmp	r3, r2
 8002fd6:	d003      	beq.n	8002fe0 <TIM_Base_SetConfig+0x40>
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	4a3a      	ldr	r2, [pc, #232]	; (80030c4 <TIM_Base_SetConfig+0x124>)
 8002fdc:	4293      	cmp	r3, r2
 8002fde:	d108      	bne.n	8002ff2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002fe6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002fe8:	683b      	ldr	r3, [r7, #0]
 8002fea:	685b      	ldr	r3, [r3, #4]
 8002fec:	68fa      	ldr	r2, [r7, #12]
 8002fee:	4313      	orrs	r3, r2
 8002ff0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	4a2f      	ldr	r2, [pc, #188]	; (80030b4 <TIM_Base_SetConfig+0x114>)
 8002ff6:	4293      	cmp	r3, r2
 8002ff8:	d02b      	beq.n	8003052 <TIM_Base_SetConfig+0xb2>
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003000:	d027      	beq.n	8003052 <TIM_Base_SetConfig+0xb2>
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	4a2c      	ldr	r2, [pc, #176]	; (80030b8 <TIM_Base_SetConfig+0x118>)
 8003006:	4293      	cmp	r3, r2
 8003008:	d023      	beq.n	8003052 <TIM_Base_SetConfig+0xb2>
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	4a2b      	ldr	r2, [pc, #172]	; (80030bc <TIM_Base_SetConfig+0x11c>)
 800300e:	4293      	cmp	r3, r2
 8003010:	d01f      	beq.n	8003052 <TIM_Base_SetConfig+0xb2>
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	4a2a      	ldr	r2, [pc, #168]	; (80030c0 <TIM_Base_SetConfig+0x120>)
 8003016:	4293      	cmp	r3, r2
 8003018:	d01b      	beq.n	8003052 <TIM_Base_SetConfig+0xb2>
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	4a29      	ldr	r2, [pc, #164]	; (80030c4 <TIM_Base_SetConfig+0x124>)
 800301e:	4293      	cmp	r3, r2
 8003020:	d017      	beq.n	8003052 <TIM_Base_SetConfig+0xb2>
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	4a28      	ldr	r2, [pc, #160]	; (80030c8 <TIM_Base_SetConfig+0x128>)
 8003026:	4293      	cmp	r3, r2
 8003028:	d013      	beq.n	8003052 <TIM_Base_SetConfig+0xb2>
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	4a27      	ldr	r2, [pc, #156]	; (80030cc <TIM_Base_SetConfig+0x12c>)
 800302e:	4293      	cmp	r3, r2
 8003030:	d00f      	beq.n	8003052 <TIM_Base_SetConfig+0xb2>
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	4a26      	ldr	r2, [pc, #152]	; (80030d0 <TIM_Base_SetConfig+0x130>)
 8003036:	4293      	cmp	r3, r2
 8003038:	d00b      	beq.n	8003052 <TIM_Base_SetConfig+0xb2>
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	4a25      	ldr	r2, [pc, #148]	; (80030d4 <TIM_Base_SetConfig+0x134>)
 800303e:	4293      	cmp	r3, r2
 8003040:	d007      	beq.n	8003052 <TIM_Base_SetConfig+0xb2>
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	4a24      	ldr	r2, [pc, #144]	; (80030d8 <TIM_Base_SetConfig+0x138>)
 8003046:	4293      	cmp	r3, r2
 8003048:	d003      	beq.n	8003052 <TIM_Base_SetConfig+0xb2>
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	4a23      	ldr	r2, [pc, #140]	; (80030dc <TIM_Base_SetConfig+0x13c>)
 800304e:	4293      	cmp	r3, r2
 8003050:	d108      	bne.n	8003064 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003058:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800305a:	683b      	ldr	r3, [r7, #0]
 800305c:	68db      	ldr	r3, [r3, #12]
 800305e:	68fa      	ldr	r2, [r7, #12]
 8003060:	4313      	orrs	r3, r2
 8003062:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800306a:	683b      	ldr	r3, [r7, #0]
 800306c:	695b      	ldr	r3, [r3, #20]
 800306e:	4313      	orrs	r3, r2
 8003070:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	68fa      	ldr	r2, [r7, #12]
 8003076:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003078:	683b      	ldr	r3, [r7, #0]
 800307a:	689a      	ldr	r2, [r3, #8]
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003080:	683b      	ldr	r3, [r7, #0]
 8003082:	681a      	ldr	r2, [r3, #0]
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	4a0a      	ldr	r2, [pc, #40]	; (80030b4 <TIM_Base_SetConfig+0x114>)
 800308c:	4293      	cmp	r3, r2
 800308e:	d003      	beq.n	8003098 <TIM_Base_SetConfig+0xf8>
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	4a0c      	ldr	r2, [pc, #48]	; (80030c4 <TIM_Base_SetConfig+0x124>)
 8003094:	4293      	cmp	r3, r2
 8003096:	d103      	bne.n	80030a0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003098:	683b      	ldr	r3, [r7, #0]
 800309a:	691a      	ldr	r2, [r3, #16]
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	2201      	movs	r2, #1
 80030a4:	615a      	str	r2, [r3, #20]
}
 80030a6:	bf00      	nop
 80030a8:	3714      	adds	r7, #20
 80030aa:	46bd      	mov	sp, r7
 80030ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b0:	4770      	bx	lr
 80030b2:	bf00      	nop
 80030b4:	40010000 	.word	0x40010000
 80030b8:	40000400 	.word	0x40000400
 80030bc:	40000800 	.word	0x40000800
 80030c0:	40000c00 	.word	0x40000c00
 80030c4:	40010400 	.word	0x40010400
 80030c8:	40014000 	.word	0x40014000
 80030cc:	40014400 	.word	0x40014400
 80030d0:	40014800 	.word	0x40014800
 80030d4:	40001800 	.word	0x40001800
 80030d8:	40001c00 	.word	0x40001c00
 80030dc:	40002000 	.word	0x40002000

080030e0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80030e0:	b480      	push	{r7}
 80030e2:	b085      	sub	sp, #20
 80030e4:	af00      	add	r7, sp, #0
 80030e6:	6078      	str	r0, [r7, #4]
 80030e8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80030f0:	2b01      	cmp	r3, #1
 80030f2:	d101      	bne.n	80030f8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80030f4:	2302      	movs	r3, #2
 80030f6:	e05a      	b.n	80031ae <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	2201      	movs	r2, #1
 80030fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	2202      	movs	r2, #2
 8003104:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	685b      	ldr	r3, [r3, #4]
 800310e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	689b      	ldr	r3, [r3, #8]
 8003116:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800311e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003120:	683b      	ldr	r3, [r7, #0]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	68fa      	ldr	r2, [r7, #12]
 8003126:	4313      	orrs	r3, r2
 8003128:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	68fa      	ldr	r2, [r7, #12]
 8003130:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	4a21      	ldr	r2, [pc, #132]	; (80031bc <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8003138:	4293      	cmp	r3, r2
 800313a:	d022      	beq.n	8003182 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003144:	d01d      	beq.n	8003182 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	4a1d      	ldr	r2, [pc, #116]	; (80031c0 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800314c:	4293      	cmp	r3, r2
 800314e:	d018      	beq.n	8003182 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	4a1b      	ldr	r2, [pc, #108]	; (80031c4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8003156:	4293      	cmp	r3, r2
 8003158:	d013      	beq.n	8003182 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	4a1a      	ldr	r2, [pc, #104]	; (80031c8 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8003160:	4293      	cmp	r3, r2
 8003162:	d00e      	beq.n	8003182 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	4a18      	ldr	r2, [pc, #96]	; (80031cc <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800316a:	4293      	cmp	r3, r2
 800316c:	d009      	beq.n	8003182 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	4a17      	ldr	r2, [pc, #92]	; (80031d0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8003174:	4293      	cmp	r3, r2
 8003176:	d004      	beq.n	8003182 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	4a15      	ldr	r2, [pc, #84]	; (80031d4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800317e:	4293      	cmp	r3, r2
 8003180:	d10c      	bne.n	800319c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003182:	68bb      	ldr	r3, [r7, #8]
 8003184:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003188:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800318a:	683b      	ldr	r3, [r7, #0]
 800318c:	685b      	ldr	r3, [r3, #4]
 800318e:	68ba      	ldr	r2, [r7, #8]
 8003190:	4313      	orrs	r3, r2
 8003192:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	68ba      	ldr	r2, [r7, #8]
 800319a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	2201      	movs	r2, #1
 80031a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	2200      	movs	r2, #0
 80031a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80031ac:	2300      	movs	r3, #0
}
 80031ae:	4618      	mov	r0, r3
 80031b0:	3714      	adds	r7, #20
 80031b2:	46bd      	mov	sp, r7
 80031b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b8:	4770      	bx	lr
 80031ba:	bf00      	nop
 80031bc:	40010000 	.word	0x40010000
 80031c0:	40000400 	.word	0x40000400
 80031c4:	40000800 	.word	0x40000800
 80031c8:	40000c00 	.word	0x40000c00
 80031cc:	40010400 	.word	0x40010400
 80031d0:	40014000 	.word	0x40014000
 80031d4:	40001800 	.word	0x40001800

080031d8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80031d8:	b084      	sub	sp, #16
 80031da:	b580      	push	{r7, lr}
 80031dc:	b084      	sub	sp, #16
 80031de:	af00      	add	r7, sp, #0
 80031e0:	6078      	str	r0, [r7, #4]
 80031e2:	f107 001c 	add.w	r0, r7, #28
 80031e6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80031ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031ec:	2b01      	cmp	r3, #1
 80031ee:	d122      	bne.n	8003236 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031f4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	68db      	ldr	r3, [r3, #12]
 8003200:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8003204:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003208:	687a      	ldr	r2, [r7, #4]
 800320a:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	68db      	ldr	r3, [r3, #12]
 8003210:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8003218:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800321a:	2b01      	cmp	r3, #1
 800321c:	d105      	bne.n	800322a <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	68db      	ldr	r3, [r3, #12]
 8003222:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800322a:	6878      	ldr	r0, [r7, #4]
 800322c:	f001 fbee 	bl	8004a0c <USB_CoreReset>
 8003230:	4603      	mov	r3, r0
 8003232:	73fb      	strb	r3, [r7, #15]
 8003234:	e01a      	b.n	800326c <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	68db      	ldr	r3, [r3, #12]
 800323a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8003242:	6878      	ldr	r0, [r7, #4]
 8003244:	f001 fbe2 	bl	8004a0c <USB_CoreReset>
 8003248:	4603      	mov	r3, r0
 800324a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800324c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800324e:	2b00      	cmp	r3, #0
 8003250:	d106      	bne.n	8003260 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003256:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	639a      	str	r2, [r3, #56]	; 0x38
 800325e:	e005      	b.n	800326c <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003264:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800326c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800326e:	2b01      	cmp	r3, #1
 8003270:	d10b      	bne.n	800328a <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	689b      	ldr	r3, [r3, #8]
 8003276:	f043 0206 	orr.w	r2, r3, #6
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	689b      	ldr	r3, [r3, #8]
 8003282:	f043 0220 	orr.w	r2, r3, #32
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800328a:	7bfb      	ldrb	r3, [r7, #15]
}
 800328c:	4618      	mov	r0, r3
 800328e:	3710      	adds	r7, #16
 8003290:	46bd      	mov	sp, r7
 8003292:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003296:	b004      	add	sp, #16
 8003298:	4770      	bx	lr
	...

0800329c <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800329c:	b480      	push	{r7}
 800329e:	b087      	sub	sp, #28
 80032a0:	af00      	add	r7, sp, #0
 80032a2:	60f8      	str	r0, [r7, #12]
 80032a4:	60b9      	str	r1, [r7, #8]
 80032a6:	4613      	mov	r3, r2
 80032a8:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 80032aa:	79fb      	ldrb	r3, [r7, #7]
 80032ac:	2b02      	cmp	r3, #2
 80032ae:	d165      	bne.n	800337c <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80032b0:	68bb      	ldr	r3, [r7, #8]
 80032b2:	4a41      	ldr	r2, [pc, #260]	; (80033b8 <USB_SetTurnaroundTime+0x11c>)
 80032b4:	4293      	cmp	r3, r2
 80032b6:	d906      	bls.n	80032c6 <USB_SetTurnaroundTime+0x2a>
 80032b8:	68bb      	ldr	r3, [r7, #8]
 80032ba:	4a40      	ldr	r2, [pc, #256]	; (80033bc <USB_SetTurnaroundTime+0x120>)
 80032bc:	4293      	cmp	r3, r2
 80032be:	d202      	bcs.n	80032c6 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80032c0:	230f      	movs	r3, #15
 80032c2:	617b      	str	r3, [r7, #20]
 80032c4:	e062      	b.n	800338c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80032c6:	68bb      	ldr	r3, [r7, #8]
 80032c8:	4a3c      	ldr	r2, [pc, #240]	; (80033bc <USB_SetTurnaroundTime+0x120>)
 80032ca:	4293      	cmp	r3, r2
 80032cc:	d306      	bcc.n	80032dc <USB_SetTurnaroundTime+0x40>
 80032ce:	68bb      	ldr	r3, [r7, #8]
 80032d0:	4a3b      	ldr	r2, [pc, #236]	; (80033c0 <USB_SetTurnaroundTime+0x124>)
 80032d2:	4293      	cmp	r3, r2
 80032d4:	d202      	bcs.n	80032dc <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80032d6:	230e      	movs	r3, #14
 80032d8:	617b      	str	r3, [r7, #20]
 80032da:	e057      	b.n	800338c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80032dc:	68bb      	ldr	r3, [r7, #8]
 80032de:	4a38      	ldr	r2, [pc, #224]	; (80033c0 <USB_SetTurnaroundTime+0x124>)
 80032e0:	4293      	cmp	r3, r2
 80032e2:	d306      	bcc.n	80032f2 <USB_SetTurnaroundTime+0x56>
 80032e4:	68bb      	ldr	r3, [r7, #8]
 80032e6:	4a37      	ldr	r2, [pc, #220]	; (80033c4 <USB_SetTurnaroundTime+0x128>)
 80032e8:	4293      	cmp	r3, r2
 80032ea:	d202      	bcs.n	80032f2 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80032ec:	230d      	movs	r3, #13
 80032ee:	617b      	str	r3, [r7, #20]
 80032f0:	e04c      	b.n	800338c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80032f2:	68bb      	ldr	r3, [r7, #8]
 80032f4:	4a33      	ldr	r2, [pc, #204]	; (80033c4 <USB_SetTurnaroundTime+0x128>)
 80032f6:	4293      	cmp	r3, r2
 80032f8:	d306      	bcc.n	8003308 <USB_SetTurnaroundTime+0x6c>
 80032fa:	68bb      	ldr	r3, [r7, #8]
 80032fc:	4a32      	ldr	r2, [pc, #200]	; (80033c8 <USB_SetTurnaroundTime+0x12c>)
 80032fe:	4293      	cmp	r3, r2
 8003300:	d802      	bhi.n	8003308 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8003302:	230c      	movs	r3, #12
 8003304:	617b      	str	r3, [r7, #20]
 8003306:	e041      	b.n	800338c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8003308:	68bb      	ldr	r3, [r7, #8]
 800330a:	4a2f      	ldr	r2, [pc, #188]	; (80033c8 <USB_SetTurnaroundTime+0x12c>)
 800330c:	4293      	cmp	r3, r2
 800330e:	d906      	bls.n	800331e <USB_SetTurnaroundTime+0x82>
 8003310:	68bb      	ldr	r3, [r7, #8]
 8003312:	4a2e      	ldr	r2, [pc, #184]	; (80033cc <USB_SetTurnaroundTime+0x130>)
 8003314:	4293      	cmp	r3, r2
 8003316:	d802      	bhi.n	800331e <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8003318:	230b      	movs	r3, #11
 800331a:	617b      	str	r3, [r7, #20]
 800331c:	e036      	b.n	800338c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800331e:	68bb      	ldr	r3, [r7, #8]
 8003320:	4a2a      	ldr	r2, [pc, #168]	; (80033cc <USB_SetTurnaroundTime+0x130>)
 8003322:	4293      	cmp	r3, r2
 8003324:	d906      	bls.n	8003334 <USB_SetTurnaroundTime+0x98>
 8003326:	68bb      	ldr	r3, [r7, #8]
 8003328:	4a29      	ldr	r2, [pc, #164]	; (80033d0 <USB_SetTurnaroundTime+0x134>)
 800332a:	4293      	cmp	r3, r2
 800332c:	d802      	bhi.n	8003334 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800332e:	230a      	movs	r3, #10
 8003330:	617b      	str	r3, [r7, #20]
 8003332:	e02b      	b.n	800338c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8003334:	68bb      	ldr	r3, [r7, #8]
 8003336:	4a26      	ldr	r2, [pc, #152]	; (80033d0 <USB_SetTurnaroundTime+0x134>)
 8003338:	4293      	cmp	r3, r2
 800333a:	d906      	bls.n	800334a <USB_SetTurnaroundTime+0xae>
 800333c:	68bb      	ldr	r3, [r7, #8]
 800333e:	4a25      	ldr	r2, [pc, #148]	; (80033d4 <USB_SetTurnaroundTime+0x138>)
 8003340:	4293      	cmp	r3, r2
 8003342:	d202      	bcs.n	800334a <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8003344:	2309      	movs	r3, #9
 8003346:	617b      	str	r3, [r7, #20]
 8003348:	e020      	b.n	800338c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800334a:	68bb      	ldr	r3, [r7, #8]
 800334c:	4a21      	ldr	r2, [pc, #132]	; (80033d4 <USB_SetTurnaroundTime+0x138>)
 800334e:	4293      	cmp	r3, r2
 8003350:	d306      	bcc.n	8003360 <USB_SetTurnaroundTime+0xc4>
 8003352:	68bb      	ldr	r3, [r7, #8]
 8003354:	4a20      	ldr	r2, [pc, #128]	; (80033d8 <USB_SetTurnaroundTime+0x13c>)
 8003356:	4293      	cmp	r3, r2
 8003358:	d802      	bhi.n	8003360 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800335a:	2308      	movs	r3, #8
 800335c:	617b      	str	r3, [r7, #20]
 800335e:	e015      	b.n	800338c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8003360:	68bb      	ldr	r3, [r7, #8]
 8003362:	4a1d      	ldr	r2, [pc, #116]	; (80033d8 <USB_SetTurnaroundTime+0x13c>)
 8003364:	4293      	cmp	r3, r2
 8003366:	d906      	bls.n	8003376 <USB_SetTurnaroundTime+0xda>
 8003368:	68bb      	ldr	r3, [r7, #8]
 800336a:	4a1c      	ldr	r2, [pc, #112]	; (80033dc <USB_SetTurnaroundTime+0x140>)
 800336c:	4293      	cmp	r3, r2
 800336e:	d202      	bcs.n	8003376 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8003370:	2307      	movs	r3, #7
 8003372:	617b      	str	r3, [r7, #20]
 8003374:	e00a      	b.n	800338c <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8003376:	2306      	movs	r3, #6
 8003378:	617b      	str	r3, [r7, #20]
 800337a:	e007      	b.n	800338c <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800337c:	79fb      	ldrb	r3, [r7, #7]
 800337e:	2b00      	cmp	r3, #0
 8003380:	d102      	bne.n	8003388 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8003382:	2309      	movs	r3, #9
 8003384:	617b      	str	r3, [r7, #20]
 8003386:	e001      	b.n	800338c <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8003388:	2309      	movs	r3, #9
 800338a:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	68db      	ldr	r3, [r3, #12]
 8003390:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	68da      	ldr	r2, [r3, #12]
 800339c:	697b      	ldr	r3, [r7, #20]
 800339e:	029b      	lsls	r3, r3, #10
 80033a0:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 80033a4:	431a      	orrs	r2, r3
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80033aa:	2300      	movs	r3, #0
}
 80033ac:	4618      	mov	r0, r3
 80033ae:	371c      	adds	r7, #28
 80033b0:	46bd      	mov	sp, r7
 80033b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b6:	4770      	bx	lr
 80033b8:	00d8acbf 	.word	0x00d8acbf
 80033bc:	00e4e1c0 	.word	0x00e4e1c0
 80033c0:	00f42400 	.word	0x00f42400
 80033c4:	01067380 	.word	0x01067380
 80033c8:	011a499f 	.word	0x011a499f
 80033cc:	01312cff 	.word	0x01312cff
 80033d0:	014ca43f 	.word	0x014ca43f
 80033d4:	016e3600 	.word	0x016e3600
 80033d8:	01a6ab1f 	.word	0x01a6ab1f
 80033dc:	01e84800 	.word	0x01e84800

080033e0 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80033e0:	b480      	push	{r7}
 80033e2:	b083      	sub	sp, #12
 80033e4:	af00      	add	r7, sp, #0
 80033e6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	689b      	ldr	r3, [r3, #8]
 80033ec:	f043 0201 	orr.w	r2, r3, #1
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80033f4:	2300      	movs	r3, #0
}
 80033f6:	4618      	mov	r0, r3
 80033f8:	370c      	adds	r7, #12
 80033fa:	46bd      	mov	sp, r7
 80033fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003400:	4770      	bx	lr

08003402 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003402:	b480      	push	{r7}
 8003404:	b083      	sub	sp, #12
 8003406:	af00      	add	r7, sp, #0
 8003408:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	689b      	ldr	r3, [r3, #8]
 800340e:	f023 0201 	bic.w	r2, r3, #1
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003416:	2300      	movs	r3, #0
}
 8003418:	4618      	mov	r0, r3
 800341a:	370c      	adds	r7, #12
 800341c:	46bd      	mov	sp, r7
 800341e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003422:	4770      	bx	lr

08003424 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8003424:	b580      	push	{r7, lr}
 8003426:	b084      	sub	sp, #16
 8003428:	af00      	add	r7, sp, #0
 800342a:	6078      	str	r0, [r7, #4]
 800342c:	460b      	mov	r3, r1
 800342e:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8003430:	2300      	movs	r3, #0
 8003432:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	68db      	ldr	r3, [r3, #12]
 8003438:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8003440:	78fb      	ldrb	r3, [r7, #3]
 8003442:	2b01      	cmp	r3, #1
 8003444:	d115      	bne.n	8003472 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	68db      	ldr	r3, [r3, #12]
 800344a:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8003452:	2001      	movs	r0, #1
 8003454:	f7fd fb64 	bl	8000b20 <HAL_Delay>
      ms++;
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	3301      	adds	r3, #1
 800345c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800345e:	6878      	ldr	r0, [r7, #4]
 8003460:	f001 fa45 	bl	80048ee <USB_GetMode>
 8003464:	4603      	mov	r3, r0
 8003466:	2b01      	cmp	r3, #1
 8003468:	d01e      	beq.n	80034a8 <USB_SetCurrentMode+0x84>
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	2b31      	cmp	r3, #49	; 0x31
 800346e:	d9f0      	bls.n	8003452 <USB_SetCurrentMode+0x2e>
 8003470:	e01a      	b.n	80034a8 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8003472:	78fb      	ldrb	r3, [r7, #3]
 8003474:	2b00      	cmp	r3, #0
 8003476:	d115      	bne.n	80034a4 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	68db      	ldr	r3, [r3, #12]
 800347c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8003484:	2001      	movs	r0, #1
 8003486:	f7fd fb4b 	bl	8000b20 <HAL_Delay>
      ms++;
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	3301      	adds	r3, #1
 800348e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8003490:	6878      	ldr	r0, [r7, #4]
 8003492:	f001 fa2c 	bl	80048ee <USB_GetMode>
 8003496:	4603      	mov	r3, r0
 8003498:	2b00      	cmp	r3, #0
 800349a:	d005      	beq.n	80034a8 <USB_SetCurrentMode+0x84>
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	2b31      	cmp	r3, #49	; 0x31
 80034a0:	d9f0      	bls.n	8003484 <USB_SetCurrentMode+0x60>
 80034a2:	e001      	b.n	80034a8 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80034a4:	2301      	movs	r3, #1
 80034a6:	e005      	b.n	80034b4 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	2b32      	cmp	r3, #50	; 0x32
 80034ac:	d101      	bne.n	80034b2 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80034ae:	2301      	movs	r3, #1
 80034b0:	e000      	b.n	80034b4 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80034b2:	2300      	movs	r3, #0
}
 80034b4:	4618      	mov	r0, r3
 80034b6:	3710      	adds	r7, #16
 80034b8:	46bd      	mov	sp, r7
 80034ba:	bd80      	pop	{r7, pc}

080034bc <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80034bc:	b084      	sub	sp, #16
 80034be:	b580      	push	{r7, lr}
 80034c0:	b086      	sub	sp, #24
 80034c2:	af00      	add	r7, sp, #0
 80034c4:	6078      	str	r0, [r7, #4]
 80034c6:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80034ca:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80034ce:	2300      	movs	r3, #0
 80034d0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80034d6:	2300      	movs	r3, #0
 80034d8:	613b      	str	r3, [r7, #16]
 80034da:	e009      	b.n	80034f0 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80034dc:	687a      	ldr	r2, [r7, #4]
 80034de:	693b      	ldr	r3, [r7, #16]
 80034e0:	3340      	adds	r3, #64	; 0x40
 80034e2:	009b      	lsls	r3, r3, #2
 80034e4:	4413      	add	r3, r2
 80034e6:	2200      	movs	r2, #0
 80034e8:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80034ea:	693b      	ldr	r3, [r7, #16]
 80034ec:	3301      	adds	r3, #1
 80034ee:	613b      	str	r3, [r7, #16]
 80034f0:	693b      	ldr	r3, [r7, #16]
 80034f2:	2b0e      	cmp	r3, #14
 80034f4:	d9f2      	bls.n	80034dc <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80034f6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d11c      	bne.n	8003536 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003502:	685b      	ldr	r3, [r3, #4]
 8003504:	68fa      	ldr	r2, [r7, #12]
 8003506:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800350a:	f043 0302 	orr.w	r3, r3, #2
 800350e:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003514:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003520:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800352c:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	639a      	str	r2, [r3, #56]	; 0x38
 8003534:	e00b      	b.n	800354e <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800353a:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003546:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8003554:	461a      	mov	r2, r3
 8003556:	2300      	movs	r3, #0
 8003558:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003560:	4619      	mov	r1, r3
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003568:	461a      	mov	r2, r3
 800356a:	680b      	ldr	r3, [r1, #0]
 800356c:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800356e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003570:	2b01      	cmp	r3, #1
 8003572:	d10c      	bne.n	800358e <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8003574:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003576:	2b00      	cmp	r3, #0
 8003578:	d104      	bne.n	8003584 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800357a:	2100      	movs	r1, #0
 800357c:	6878      	ldr	r0, [r7, #4]
 800357e:	f000 f965 	bl	800384c <USB_SetDevSpeed>
 8003582:	e008      	b.n	8003596 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8003584:	2101      	movs	r1, #1
 8003586:	6878      	ldr	r0, [r7, #4]
 8003588:	f000 f960 	bl	800384c <USB_SetDevSpeed>
 800358c:	e003      	b.n	8003596 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800358e:	2103      	movs	r1, #3
 8003590:	6878      	ldr	r0, [r7, #4]
 8003592:	f000 f95b 	bl	800384c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8003596:	2110      	movs	r1, #16
 8003598:	6878      	ldr	r0, [r7, #4]
 800359a:	f000 f8f3 	bl	8003784 <USB_FlushTxFifo>
 800359e:	4603      	mov	r3, r0
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d001      	beq.n	80035a8 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 80035a4:	2301      	movs	r3, #1
 80035a6:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80035a8:	6878      	ldr	r0, [r7, #4]
 80035aa:	f000 f91f 	bl	80037ec <USB_FlushRxFifo>
 80035ae:	4603      	mov	r3, r0
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d001      	beq.n	80035b8 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 80035b4:	2301      	movs	r3, #1
 80035b6:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80035be:	461a      	mov	r2, r3
 80035c0:	2300      	movs	r3, #0
 80035c2:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80035ca:	461a      	mov	r2, r3
 80035cc:	2300      	movs	r3, #0
 80035ce:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80035d6:	461a      	mov	r2, r3
 80035d8:	2300      	movs	r3, #0
 80035da:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80035dc:	2300      	movs	r3, #0
 80035de:	613b      	str	r3, [r7, #16]
 80035e0:	e043      	b.n	800366a <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80035e2:	693b      	ldr	r3, [r7, #16]
 80035e4:	015a      	lsls	r2, r3, #5
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	4413      	add	r3, r2
 80035ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80035f4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80035f8:	d118      	bne.n	800362c <USB_DevInit+0x170>
    {
      if (i == 0U)
 80035fa:	693b      	ldr	r3, [r7, #16]
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d10a      	bne.n	8003616 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8003600:	693b      	ldr	r3, [r7, #16]
 8003602:	015a      	lsls	r2, r3, #5
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	4413      	add	r3, r2
 8003608:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800360c:	461a      	mov	r2, r3
 800360e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003612:	6013      	str	r3, [r2, #0]
 8003614:	e013      	b.n	800363e <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8003616:	693b      	ldr	r3, [r7, #16]
 8003618:	015a      	lsls	r2, r3, #5
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	4413      	add	r3, r2
 800361e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003622:	461a      	mov	r2, r3
 8003624:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003628:	6013      	str	r3, [r2, #0]
 800362a:	e008      	b.n	800363e <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800362c:	693b      	ldr	r3, [r7, #16]
 800362e:	015a      	lsls	r2, r3, #5
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	4413      	add	r3, r2
 8003634:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003638:	461a      	mov	r2, r3
 800363a:	2300      	movs	r3, #0
 800363c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800363e:	693b      	ldr	r3, [r7, #16]
 8003640:	015a      	lsls	r2, r3, #5
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	4413      	add	r3, r2
 8003646:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800364a:	461a      	mov	r2, r3
 800364c:	2300      	movs	r3, #0
 800364e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8003650:	693b      	ldr	r3, [r7, #16]
 8003652:	015a      	lsls	r2, r3, #5
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	4413      	add	r3, r2
 8003658:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800365c:	461a      	mov	r2, r3
 800365e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003662:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003664:	693b      	ldr	r3, [r7, #16]
 8003666:	3301      	adds	r3, #1
 8003668:	613b      	str	r3, [r7, #16]
 800366a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800366c:	693a      	ldr	r2, [r7, #16]
 800366e:	429a      	cmp	r2, r3
 8003670:	d3b7      	bcc.n	80035e2 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003672:	2300      	movs	r3, #0
 8003674:	613b      	str	r3, [r7, #16]
 8003676:	e043      	b.n	8003700 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003678:	693b      	ldr	r3, [r7, #16]
 800367a:	015a      	lsls	r2, r3, #5
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	4413      	add	r3, r2
 8003680:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800368a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800368e:	d118      	bne.n	80036c2 <USB_DevInit+0x206>
    {
      if (i == 0U)
 8003690:	693b      	ldr	r3, [r7, #16]
 8003692:	2b00      	cmp	r3, #0
 8003694:	d10a      	bne.n	80036ac <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8003696:	693b      	ldr	r3, [r7, #16]
 8003698:	015a      	lsls	r2, r3, #5
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	4413      	add	r3, r2
 800369e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80036a2:	461a      	mov	r2, r3
 80036a4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80036a8:	6013      	str	r3, [r2, #0]
 80036aa:	e013      	b.n	80036d4 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80036ac:	693b      	ldr	r3, [r7, #16]
 80036ae:	015a      	lsls	r2, r3, #5
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	4413      	add	r3, r2
 80036b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80036b8:	461a      	mov	r2, r3
 80036ba:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80036be:	6013      	str	r3, [r2, #0]
 80036c0:	e008      	b.n	80036d4 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80036c2:	693b      	ldr	r3, [r7, #16]
 80036c4:	015a      	lsls	r2, r3, #5
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	4413      	add	r3, r2
 80036ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80036ce:	461a      	mov	r2, r3
 80036d0:	2300      	movs	r3, #0
 80036d2:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80036d4:	693b      	ldr	r3, [r7, #16]
 80036d6:	015a      	lsls	r2, r3, #5
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	4413      	add	r3, r2
 80036dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80036e0:	461a      	mov	r2, r3
 80036e2:	2300      	movs	r3, #0
 80036e4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80036e6:	693b      	ldr	r3, [r7, #16]
 80036e8:	015a      	lsls	r2, r3, #5
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	4413      	add	r3, r2
 80036ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80036f2:	461a      	mov	r2, r3
 80036f4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80036f8:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80036fa:	693b      	ldr	r3, [r7, #16]
 80036fc:	3301      	adds	r3, #1
 80036fe:	613b      	str	r3, [r7, #16]
 8003700:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003702:	693a      	ldr	r2, [r7, #16]
 8003704:	429a      	cmp	r2, r3
 8003706:	d3b7      	bcc.n	8003678 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800370e:	691b      	ldr	r3, [r3, #16]
 8003710:	68fa      	ldr	r2, [r7, #12]
 8003712:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003716:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800371a:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	2200      	movs	r2, #0
 8003720:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8003728:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800372a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800372c:	2b00      	cmp	r3, #0
 800372e:	d105      	bne.n	800373c <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	699b      	ldr	r3, [r3, #24]
 8003734:	f043 0210 	orr.w	r2, r3, #16
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	699a      	ldr	r2, [r3, #24]
 8003740:	4b0f      	ldr	r3, [pc, #60]	; (8003780 <USB_DevInit+0x2c4>)
 8003742:	4313      	orrs	r3, r2
 8003744:	687a      	ldr	r2, [r7, #4]
 8003746:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8003748:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800374a:	2b00      	cmp	r3, #0
 800374c:	d005      	beq.n	800375a <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	699b      	ldr	r3, [r3, #24]
 8003752:	f043 0208 	orr.w	r2, r3, #8
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800375a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800375c:	2b01      	cmp	r3, #1
 800375e:	d107      	bne.n	8003770 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	699b      	ldr	r3, [r3, #24]
 8003764:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003768:	f043 0304 	orr.w	r3, r3, #4
 800376c:	687a      	ldr	r2, [r7, #4]
 800376e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8003770:	7dfb      	ldrb	r3, [r7, #23]
}
 8003772:	4618      	mov	r0, r3
 8003774:	3718      	adds	r7, #24
 8003776:	46bd      	mov	sp, r7
 8003778:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800377c:	b004      	add	sp, #16
 800377e:	4770      	bx	lr
 8003780:	803c3800 	.word	0x803c3800

08003784 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8003784:	b480      	push	{r7}
 8003786:	b085      	sub	sp, #20
 8003788:	af00      	add	r7, sp, #0
 800378a:	6078      	str	r0, [r7, #4]
 800378c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800378e:	2300      	movs	r3, #0
 8003790:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	3301      	adds	r3, #1
 8003796:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	4a13      	ldr	r2, [pc, #76]	; (80037e8 <USB_FlushTxFifo+0x64>)
 800379c:	4293      	cmp	r3, r2
 800379e:	d901      	bls.n	80037a4 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80037a0:	2303      	movs	r3, #3
 80037a2:	e01b      	b.n	80037dc <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	691b      	ldr	r3, [r3, #16]
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	daf2      	bge.n	8003792 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80037ac:	2300      	movs	r3, #0
 80037ae:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80037b0:	683b      	ldr	r3, [r7, #0]
 80037b2:	019b      	lsls	r3, r3, #6
 80037b4:	f043 0220 	orr.w	r2, r3, #32
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	3301      	adds	r3, #1
 80037c0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	4a08      	ldr	r2, [pc, #32]	; (80037e8 <USB_FlushTxFifo+0x64>)
 80037c6:	4293      	cmp	r3, r2
 80037c8:	d901      	bls.n	80037ce <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80037ca:	2303      	movs	r3, #3
 80037cc:	e006      	b.n	80037dc <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	691b      	ldr	r3, [r3, #16]
 80037d2:	f003 0320 	and.w	r3, r3, #32
 80037d6:	2b20      	cmp	r3, #32
 80037d8:	d0f0      	beq.n	80037bc <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80037da:	2300      	movs	r3, #0
}
 80037dc:	4618      	mov	r0, r3
 80037de:	3714      	adds	r7, #20
 80037e0:	46bd      	mov	sp, r7
 80037e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e6:	4770      	bx	lr
 80037e8:	00030d40 	.word	0x00030d40

080037ec <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80037ec:	b480      	push	{r7}
 80037ee:	b085      	sub	sp, #20
 80037f0:	af00      	add	r7, sp, #0
 80037f2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80037f4:	2300      	movs	r3, #0
 80037f6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	3301      	adds	r3, #1
 80037fc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	4a11      	ldr	r2, [pc, #68]	; (8003848 <USB_FlushRxFifo+0x5c>)
 8003802:	4293      	cmp	r3, r2
 8003804:	d901      	bls.n	800380a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8003806:	2303      	movs	r3, #3
 8003808:	e018      	b.n	800383c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	691b      	ldr	r3, [r3, #16]
 800380e:	2b00      	cmp	r3, #0
 8003810:	daf2      	bge.n	80037f8 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8003812:	2300      	movs	r3, #0
 8003814:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	2210      	movs	r2, #16
 800381a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	3301      	adds	r3, #1
 8003820:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	4a08      	ldr	r2, [pc, #32]	; (8003848 <USB_FlushRxFifo+0x5c>)
 8003826:	4293      	cmp	r3, r2
 8003828:	d901      	bls.n	800382e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800382a:	2303      	movs	r3, #3
 800382c:	e006      	b.n	800383c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	691b      	ldr	r3, [r3, #16]
 8003832:	f003 0310 	and.w	r3, r3, #16
 8003836:	2b10      	cmp	r3, #16
 8003838:	d0f0      	beq.n	800381c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800383a:	2300      	movs	r3, #0
}
 800383c:	4618      	mov	r0, r3
 800383e:	3714      	adds	r7, #20
 8003840:	46bd      	mov	sp, r7
 8003842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003846:	4770      	bx	lr
 8003848:	00030d40 	.word	0x00030d40

0800384c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800384c:	b480      	push	{r7}
 800384e:	b085      	sub	sp, #20
 8003850:	af00      	add	r7, sp, #0
 8003852:	6078      	str	r0, [r7, #4]
 8003854:	460b      	mov	r3, r1
 8003856:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003862:	681a      	ldr	r2, [r3, #0]
 8003864:	78fb      	ldrb	r3, [r7, #3]
 8003866:	68f9      	ldr	r1, [r7, #12]
 8003868:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800386c:	4313      	orrs	r3, r2
 800386e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8003870:	2300      	movs	r3, #0
}
 8003872:	4618      	mov	r0, r3
 8003874:	3714      	adds	r7, #20
 8003876:	46bd      	mov	sp, r7
 8003878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800387c:	4770      	bx	lr

0800387e <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800387e:	b480      	push	{r7}
 8003880:	b087      	sub	sp, #28
 8003882:	af00      	add	r7, sp, #0
 8003884:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800388a:	693b      	ldr	r3, [r7, #16]
 800388c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003890:	689b      	ldr	r3, [r3, #8]
 8003892:	f003 0306 	and.w	r3, r3, #6
 8003896:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	2b00      	cmp	r3, #0
 800389c:	d102      	bne.n	80038a4 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800389e:	2300      	movs	r3, #0
 80038a0:	75fb      	strb	r3, [r7, #23]
 80038a2:	e00a      	b.n	80038ba <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	2b02      	cmp	r3, #2
 80038a8:	d002      	beq.n	80038b0 <USB_GetDevSpeed+0x32>
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	2b06      	cmp	r3, #6
 80038ae:	d102      	bne.n	80038b6 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 80038b0:	2302      	movs	r3, #2
 80038b2:	75fb      	strb	r3, [r7, #23]
 80038b4:	e001      	b.n	80038ba <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 80038b6:	230f      	movs	r3, #15
 80038b8:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 80038ba:	7dfb      	ldrb	r3, [r7, #23]
}
 80038bc:	4618      	mov	r0, r3
 80038be:	371c      	adds	r7, #28
 80038c0:	46bd      	mov	sp, r7
 80038c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c6:	4770      	bx	lr

080038c8 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80038c8:	b480      	push	{r7}
 80038ca:	b085      	sub	sp, #20
 80038cc:	af00      	add	r7, sp, #0
 80038ce:	6078      	str	r0, [r7, #4]
 80038d0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80038d6:	683b      	ldr	r3, [r7, #0]
 80038d8:	781b      	ldrb	r3, [r3, #0]
 80038da:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80038dc:	683b      	ldr	r3, [r7, #0]
 80038de:	785b      	ldrb	r3, [r3, #1]
 80038e0:	2b01      	cmp	r3, #1
 80038e2:	d13a      	bne.n	800395a <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80038ea:	69da      	ldr	r2, [r3, #28]
 80038ec:	683b      	ldr	r3, [r7, #0]
 80038ee:	781b      	ldrb	r3, [r3, #0]
 80038f0:	f003 030f 	and.w	r3, r3, #15
 80038f4:	2101      	movs	r1, #1
 80038f6:	fa01 f303 	lsl.w	r3, r1, r3
 80038fa:	b29b      	uxth	r3, r3
 80038fc:	68f9      	ldr	r1, [r7, #12]
 80038fe:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003902:	4313      	orrs	r3, r2
 8003904:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8003906:	68bb      	ldr	r3, [r7, #8]
 8003908:	015a      	lsls	r2, r3, #5
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	4413      	add	r3, r2
 800390e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003918:	2b00      	cmp	r3, #0
 800391a:	d155      	bne.n	80039c8 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800391c:	68bb      	ldr	r3, [r7, #8]
 800391e:	015a      	lsls	r2, r3, #5
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	4413      	add	r3, r2
 8003924:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003928:	681a      	ldr	r2, [r3, #0]
 800392a:	683b      	ldr	r3, [r7, #0]
 800392c:	68db      	ldr	r3, [r3, #12]
 800392e:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8003932:	683b      	ldr	r3, [r7, #0]
 8003934:	791b      	ldrb	r3, [r3, #4]
 8003936:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003938:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800393a:	68bb      	ldr	r3, [r7, #8]
 800393c:	059b      	lsls	r3, r3, #22
 800393e:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003940:	4313      	orrs	r3, r2
 8003942:	68ba      	ldr	r2, [r7, #8]
 8003944:	0151      	lsls	r1, r2, #5
 8003946:	68fa      	ldr	r2, [r7, #12]
 8003948:	440a      	add	r2, r1
 800394a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800394e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003952:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003956:	6013      	str	r3, [r2, #0]
 8003958:	e036      	b.n	80039c8 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003960:	69da      	ldr	r2, [r3, #28]
 8003962:	683b      	ldr	r3, [r7, #0]
 8003964:	781b      	ldrb	r3, [r3, #0]
 8003966:	f003 030f 	and.w	r3, r3, #15
 800396a:	2101      	movs	r1, #1
 800396c:	fa01 f303 	lsl.w	r3, r1, r3
 8003970:	041b      	lsls	r3, r3, #16
 8003972:	68f9      	ldr	r1, [r7, #12]
 8003974:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003978:	4313      	orrs	r3, r2
 800397a:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800397c:	68bb      	ldr	r3, [r7, #8]
 800397e:	015a      	lsls	r2, r3, #5
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	4413      	add	r3, r2
 8003984:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800398e:	2b00      	cmp	r3, #0
 8003990:	d11a      	bne.n	80039c8 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8003992:	68bb      	ldr	r3, [r7, #8]
 8003994:	015a      	lsls	r2, r3, #5
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	4413      	add	r3, r2
 800399a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800399e:	681a      	ldr	r2, [r3, #0]
 80039a0:	683b      	ldr	r3, [r7, #0]
 80039a2:	68db      	ldr	r3, [r3, #12]
 80039a4:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80039a8:	683b      	ldr	r3, [r7, #0]
 80039aa:	791b      	ldrb	r3, [r3, #4]
 80039ac:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80039ae:	430b      	orrs	r3, r1
 80039b0:	4313      	orrs	r3, r2
 80039b2:	68ba      	ldr	r2, [r7, #8]
 80039b4:	0151      	lsls	r1, r2, #5
 80039b6:	68fa      	ldr	r2, [r7, #12]
 80039b8:	440a      	add	r2, r1
 80039ba:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80039be:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80039c2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80039c6:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 80039c8:	2300      	movs	r3, #0
}
 80039ca:	4618      	mov	r0, r3
 80039cc:	3714      	adds	r7, #20
 80039ce:	46bd      	mov	sp, r7
 80039d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d4:	4770      	bx	lr
	...

080039d8 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80039d8:	b480      	push	{r7}
 80039da:	b085      	sub	sp, #20
 80039dc:	af00      	add	r7, sp, #0
 80039de:	6078      	str	r0, [r7, #4]
 80039e0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80039e6:	683b      	ldr	r3, [r7, #0]
 80039e8:	781b      	ldrb	r3, [r3, #0]
 80039ea:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 80039ec:	683b      	ldr	r3, [r7, #0]
 80039ee:	785b      	ldrb	r3, [r3, #1]
 80039f0:	2b01      	cmp	r3, #1
 80039f2:	d161      	bne.n	8003ab8 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80039f4:	68bb      	ldr	r3, [r7, #8]
 80039f6:	015a      	lsls	r2, r3, #5
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	4413      	add	r3, r2
 80039fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003a06:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003a0a:	d11f      	bne.n	8003a4c <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8003a0c:	68bb      	ldr	r3, [r7, #8]
 8003a0e:	015a      	lsls	r2, r3, #5
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	4413      	add	r3, r2
 8003a14:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	68ba      	ldr	r2, [r7, #8]
 8003a1c:	0151      	lsls	r1, r2, #5
 8003a1e:	68fa      	ldr	r2, [r7, #12]
 8003a20:	440a      	add	r2, r1
 8003a22:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003a26:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003a2a:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8003a2c:	68bb      	ldr	r3, [r7, #8]
 8003a2e:	015a      	lsls	r2, r3, #5
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	4413      	add	r3, r2
 8003a34:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	68ba      	ldr	r2, [r7, #8]
 8003a3c:	0151      	lsls	r1, r2, #5
 8003a3e:	68fa      	ldr	r2, [r7, #12]
 8003a40:	440a      	add	r2, r1
 8003a42:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003a46:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003a4a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003a52:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003a54:	683b      	ldr	r3, [r7, #0]
 8003a56:	781b      	ldrb	r3, [r3, #0]
 8003a58:	f003 030f 	and.w	r3, r3, #15
 8003a5c:	2101      	movs	r1, #1
 8003a5e:	fa01 f303 	lsl.w	r3, r1, r3
 8003a62:	b29b      	uxth	r3, r3
 8003a64:	43db      	mvns	r3, r3
 8003a66:	68f9      	ldr	r1, [r7, #12]
 8003a68:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003a6c:	4013      	ands	r3, r2
 8003a6e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003a76:	69da      	ldr	r2, [r3, #28]
 8003a78:	683b      	ldr	r3, [r7, #0]
 8003a7a:	781b      	ldrb	r3, [r3, #0]
 8003a7c:	f003 030f 	and.w	r3, r3, #15
 8003a80:	2101      	movs	r1, #1
 8003a82:	fa01 f303 	lsl.w	r3, r1, r3
 8003a86:	b29b      	uxth	r3, r3
 8003a88:	43db      	mvns	r3, r3
 8003a8a:	68f9      	ldr	r1, [r7, #12]
 8003a8c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003a90:	4013      	ands	r3, r2
 8003a92:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8003a94:	68bb      	ldr	r3, [r7, #8]
 8003a96:	015a      	lsls	r2, r3, #5
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	4413      	add	r3, r2
 8003a9c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003aa0:	681a      	ldr	r2, [r3, #0]
 8003aa2:	68bb      	ldr	r3, [r7, #8]
 8003aa4:	0159      	lsls	r1, r3, #5
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	440b      	add	r3, r1
 8003aaa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003aae:	4619      	mov	r1, r3
 8003ab0:	4b35      	ldr	r3, [pc, #212]	; (8003b88 <USB_DeactivateEndpoint+0x1b0>)
 8003ab2:	4013      	ands	r3, r2
 8003ab4:	600b      	str	r3, [r1, #0]
 8003ab6:	e060      	b.n	8003b7a <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003ab8:	68bb      	ldr	r3, [r7, #8]
 8003aba:	015a      	lsls	r2, r3, #5
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	4413      	add	r3, r2
 8003ac0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003aca:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003ace:	d11f      	bne.n	8003b10 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8003ad0:	68bb      	ldr	r3, [r7, #8]
 8003ad2:	015a      	lsls	r2, r3, #5
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	4413      	add	r3, r2
 8003ad8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	68ba      	ldr	r2, [r7, #8]
 8003ae0:	0151      	lsls	r1, r2, #5
 8003ae2:	68fa      	ldr	r2, [r7, #12]
 8003ae4:	440a      	add	r2, r1
 8003ae6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003aea:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003aee:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8003af0:	68bb      	ldr	r3, [r7, #8]
 8003af2:	015a      	lsls	r2, r3, #5
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	4413      	add	r3, r2
 8003af8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	68ba      	ldr	r2, [r7, #8]
 8003b00:	0151      	lsls	r1, r2, #5
 8003b02:	68fa      	ldr	r2, [r7, #12]
 8003b04:	440a      	add	r2, r1
 8003b06:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003b0a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003b0e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003b16:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003b18:	683b      	ldr	r3, [r7, #0]
 8003b1a:	781b      	ldrb	r3, [r3, #0]
 8003b1c:	f003 030f 	and.w	r3, r3, #15
 8003b20:	2101      	movs	r1, #1
 8003b22:	fa01 f303 	lsl.w	r3, r1, r3
 8003b26:	041b      	lsls	r3, r3, #16
 8003b28:	43db      	mvns	r3, r3
 8003b2a:	68f9      	ldr	r1, [r7, #12]
 8003b2c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003b30:	4013      	ands	r3, r2
 8003b32:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003b3a:	69da      	ldr	r2, [r3, #28]
 8003b3c:	683b      	ldr	r3, [r7, #0]
 8003b3e:	781b      	ldrb	r3, [r3, #0]
 8003b40:	f003 030f 	and.w	r3, r3, #15
 8003b44:	2101      	movs	r1, #1
 8003b46:	fa01 f303 	lsl.w	r3, r1, r3
 8003b4a:	041b      	lsls	r3, r3, #16
 8003b4c:	43db      	mvns	r3, r3
 8003b4e:	68f9      	ldr	r1, [r7, #12]
 8003b50:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003b54:	4013      	ands	r3, r2
 8003b56:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8003b58:	68bb      	ldr	r3, [r7, #8]
 8003b5a:	015a      	lsls	r2, r3, #5
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	4413      	add	r3, r2
 8003b60:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003b64:	681a      	ldr	r2, [r3, #0]
 8003b66:	68bb      	ldr	r3, [r7, #8]
 8003b68:	0159      	lsls	r1, r3, #5
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	440b      	add	r3, r1
 8003b6e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003b72:	4619      	mov	r1, r3
 8003b74:	4b05      	ldr	r3, [pc, #20]	; (8003b8c <USB_DeactivateEndpoint+0x1b4>)
 8003b76:	4013      	ands	r3, r2
 8003b78:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8003b7a:	2300      	movs	r3, #0
}
 8003b7c:	4618      	mov	r0, r3
 8003b7e:	3714      	adds	r7, #20
 8003b80:	46bd      	mov	sp, r7
 8003b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b86:	4770      	bx	lr
 8003b88:	ec337800 	.word	0xec337800
 8003b8c:	eff37800 	.word	0xeff37800

08003b90 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8003b90:	b580      	push	{r7, lr}
 8003b92:	b08a      	sub	sp, #40	; 0x28
 8003b94:	af02      	add	r7, sp, #8
 8003b96:	60f8      	str	r0, [r7, #12]
 8003b98:	60b9      	str	r1, [r7, #8]
 8003b9a:	4613      	mov	r3, r2
 8003b9c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8003ba2:	68bb      	ldr	r3, [r7, #8]
 8003ba4:	781b      	ldrb	r3, [r3, #0]
 8003ba6:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8003ba8:	68bb      	ldr	r3, [r7, #8]
 8003baa:	785b      	ldrb	r3, [r3, #1]
 8003bac:	2b01      	cmp	r3, #1
 8003bae:	f040 815c 	bne.w	8003e6a <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8003bb2:	68bb      	ldr	r3, [r7, #8]
 8003bb4:	699b      	ldr	r3, [r3, #24]
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d132      	bne.n	8003c20 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8003bba:	69bb      	ldr	r3, [r7, #24]
 8003bbc:	015a      	lsls	r2, r3, #5
 8003bbe:	69fb      	ldr	r3, [r7, #28]
 8003bc0:	4413      	add	r3, r2
 8003bc2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003bc6:	691b      	ldr	r3, [r3, #16]
 8003bc8:	69ba      	ldr	r2, [r7, #24]
 8003bca:	0151      	lsls	r1, r2, #5
 8003bcc:	69fa      	ldr	r2, [r7, #28]
 8003bce:	440a      	add	r2, r1
 8003bd0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003bd4:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8003bd8:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8003bdc:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8003bde:	69bb      	ldr	r3, [r7, #24]
 8003be0:	015a      	lsls	r2, r3, #5
 8003be2:	69fb      	ldr	r3, [r7, #28]
 8003be4:	4413      	add	r3, r2
 8003be6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003bea:	691b      	ldr	r3, [r3, #16]
 8003bec:	69ba      	ldr	r2, [r7, #24]
 8003bee:	0151      	lsls	r1, r2, #5
 8003bf0:	69fa      	ldr	r2, [r7, #28]
 8003bf2:	440a      	add	r2, r1
 8003bf4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003bf8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003bfc:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8003bfe:	69bb      	ldr	r3, [r7, #24]
 8003c00:	015a      	lsls	r2, r3, #5
 8003c02:	69fb      	ldr	r3, [r7, #28]
 8003c04:	4413      	add	r3, r2
 8003c06:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c0a:	691b      	ldr	r3, [r3, #16]
 8003c0c:	69ba      	ldr	r2, [r7, #24]
 8003c0e:	0151      	lsls	r1, r2, #5
 8003c10:	69fa      	ldr	r2, [r7, #28]
 8003c12:	440a      	add	r2, r1
 8003c14:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003c18:	0cdb      	lsrs	r3, r3, #19
 8003c1a:	04db      	lsls	r3, r3, #19
 8003c1c:	6113      	str	r3, [r2, #16]
 8003c1e:	e074      	b.n	8003d0a <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8003c20:	69bb      	ldr	r3, [r7, #24]
 8003c22:	015a      	lsls	r2, r3, #5
 8003c24:	69fb      	ldr	r3, [r7, #28]
 8003c26:	4413      	add	r3, r2
 8003c28:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c2c:	691b      	ldr	r3, [r3, #16]
 8003c2e:	69ba      	ldr	r2, [r7, #24]
 8003c30:	0151      	lsls	r1, r2, #5
 8003c32:	69fa      	ldr	r2, [r7, #28]
 8003c34:	440a      	add	r2, r1
 8003c36:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003c3a:	0cdb      	lsrs	r3, r3, #19
 8003c3c:	04db      	lsls	r3, r3, #19
 8003c3e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8003c40:	69bb      	ldr	r3, [r7, #24]
 8003c42:	015a      	lsls	r2, r3, #5
 8003c44:	69fb      	ldr	r3, [r7, #28]
 8003c46:	4413      	add	r3, r2
 8003c48:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c4c:	691b      	ldr	r3, [r3, #16]
 8003c4e:	69ba      	ldr	r2, [r7, #24]
 8003c50:	0151      	lsls	r1, r2, #5
 8003c52:	69fa      	ldr	r2, [r7, #28]
 8003c54:	440a      	add	r2, r1
 8003c56:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003c5a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8003c5e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8003c62:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8003c64:	69bb      	ldr	r3, [r7, #24]
 8003c66:	015a      	lsls	r2, r3, #5
 8003c68:	69fb      	ldr	r3, [r7, #28]
 8003c6a:	4413      	add	r3, r2
 8003c6c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c70:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8003c72:	68bb      	ldr	r3, [r7, #8]
 8003c74:	6999      	ldr	r1, [r3, #24]
 8003c76:	68bb      	ldr	r3, [r7, #8]
 8003c78:	68db      	ldr	r3, [r3, #12]
 8003c7a:	440b      	add	r3, r1
 8003c7c:	1e59      	subs	r1, r3, #1
 8003c7e:	68bb      	ldr	r3, [r7, #8]
 8003c80:	68db      	ldr	r3, [r3, #12]
 8003c82:	fbb1 f3f3 	udiv	r3, r1, r3
 8003c86:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8003c88:	4b9d      	ldr	r3, [pc, #628]	; (8003f00 <USB_EPStartXfer+0x370>)
 8003c8a:	400b      	ands	r3, r1
 8003c8c:	69b9      	ldr	r1, [r7, #24]
 8003c8e:	0148      	lsls	r0, r1, #5
 8003c90:	69f9      	ldr	r1, [r7, #28]
 8003c92:	4401      	add	r1, r0
 8003c94:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8003c98:	4313      	orrs	r3, r2
 8003c9a:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8003c9c:	69bb      	ldr	r3, [r7, #24]
 8003c9e:	015a      	lsls	r2, r3, #5
 8003ca0:	69fb      	ldr	r3, [r7, #28]
 8003ca2:	4413      	add	r3, r2
 8003ca4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003ca8:	691a      	ldr	r2, [r3, #16]
 8003caa:	68bb      	ldr	r3, [r7, #8]
 8003cac:	699b      	ldr	r3, [r3, #24]
 8003cae:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003cb2:	69b9      	ldr	r1, [r7, #24]
 8003cb4:	0148      	lsls	r0, r1, #5
 8003cb6:	69f9      	ldr	r1, [r7, #28]
 8003cb8:	4401      	add	r1, r0
 8003cba:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8003cbe:	4313      	orrs	r3, r2
 8003cc0:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8003cc2:	68bb      	ldr	r3, [r7, #8]
 8003cc4:	791b      	ldrb	r3, [r3, #4]
 8003cc6:	2b01      	cmp	r3, #1
 8003cc8:	d11f      	bne.n	8003d0a <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8003cca:	69bb      	ldr	r3, [r7, #24]
 8003ccc:	015a      	lsls	r2, r3, #5
 8003cce:	69fb      	ldr	r3, [r7, #28]
 8003cd0:	4413      	add	r3, r2
 8003cd2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003cd6:	691b      	ldr	r3, [r3, #16]
 8003cd8:	69ba      	ldr	r2, [r7, #24]
 8003cda:	0151      	lsls	r1, r2, #5
 8003cdc:	69fa      	ldr	r2, [r7, #28]
 8003cde:	440a      	add	r2, r1
 8003ce0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003ce4:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8003ce8:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8003cea:	69bb      	ldr	r3, [r7, #24]
 8003cec:	015a      	lsls	r2, r3, #5
 8003cee:	69fb      	ldr	r3, [r7, #28]
 8003cf0:	4413      	add	r3, r2
 8003cf2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003cf6:	691b      	ldr	r3, [r3, #16]
 8003cf8:	69ba      	ldr	r2, [r7, #24]
 8003cfa:	0151      	lsls	r1, r2, #5
 8003cfc:	69fa      	ldr	r2, [r7, #28]
 8003cfe:	440a      	add	r2, r1
 8003d00:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003d04:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003d08:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8003d0a:	79fb      	ldrb	r3, [r7, #7]
 8003d0c:	2b01      	cmp	r3, #1
 8003d0e:	d14b      	bne.n	8003da8 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8003d10:	68bb      	ldr	r3, [r7, #8]
 8003d12:	695b      	ldr	r3, [r3, #20]
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d009      	beq.n	8003d2c <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8003d18:	69bb      	ldr	r3, [r7, #24]
 8003d1a:	015a      	lsls	r2, r3, #5
 8003d1c:	69fb      	ldr	r3, [r7, #28]
 8003d1e:	4413      	add	r3, r2
 8003d20:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003d24:	461a      	mov	r2, r3
 8003d26:	68bb      	ldr	r3, [r7, #8]
 8003d28:	695b      	ldr	r3, [r3, #20]
 8003d2a:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8003d2c:	68bb      	ldr	r3, [r7, #8]
 8003d2e:	791b      	ldrb	r3, [r3, #4]
 8003d30:	2b01      	cmp	r3, #1
 8003d32:	d128      	bne.n	8003d86 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8003d34:	69fb      	ldr	r3, [r7, #28]
 8003d36:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003d3a:	689b      	ldr	r3, [r3, #8]
 8003d3c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d110      	bne.n	8003d66 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8003d44:	69bb      	ldr	r3, [r7, #24]
 8003d46:	015a      	lsls	r2, r3, #5
 8003d48:	69fb      	ldr	r3, [r7, #28]
 8003d4a:	4413      	add	r3, r2
 8003d4c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	69ba      	ldr	r2, [r7, #24]
 8003d54:	0151      	lsls	r1, r2, #5
 8003d56:	69fa      	ldr	r2, [r7, #28]
 8003d58:	440a      	add	r2, r1
 8003d5a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003d5e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003d62:	6013      	str	r3, [r2, #0]
 8003d64:	e00f      	b.n	8003d86 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8003d66:	69bb      	ldr	r3, [r7, #24]
 8003d68:	015a      	lsls	r2, r3, #5
 8003d6a:	69fb      	ldr	r3, [r7, #28]
 8003d6c:	4413      	add	r3, r2
 8003d6e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	69ba      	ldr	r2, [r7, #24]
 8003d76:	0151      	lsls	r1, r2, #5
 8003d78:	69fa      	ldr	r2, [r7, #28]
 8003d7a:	440a      	add	r2, r1
 8003d7c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003d80:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003d84:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8003d86:	69bb      	ldr	r3, [r7, #24]
 8003d88:	015a      	lsls	r2, r3, #5
 8003d8a:	69fb      	ldr	r3, [r7, #28]
 8003d8c:	4413      	add	r3, r2
 8003d8e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	69ba      	ldr	r2, [r7, #24]
 8003d96:	0151      	lsls	r1, r2, #5
 8003d98:	69fa      	ldr	r2, [r7, #28]
 8003d9a:	440a      	add	r2, r1
 8003d9c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003da0:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8003da4:	6013      	str	r3, [r2, #0]
 8003da6:	e133      	b.n	8004010 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8003da8:	69bb      	ldr	r3, [r7, #24]
 8003daa:	015a      	lsls	r2, r3, #5
 8003dac:	69fb      	ldr	r3, [r7, #28]
 8003dae:	4413      	add	r3, r2
 8003db0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	69ba      	ldr	r2, [r7, #24]
 8003db8:	0151      	lsls	r1, r2, #5
 8003dba:	69fa      	ldr	r2, [r7, #28]
 8003dbc:	440a      	add	r2, r1
 8003dbe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003dc2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8003dc6:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8003dc8:	68bb      	ldr	r3, [r7, #8]
 8003dca:	791b      	ldrb	r3, [r3, #4]
 8003dcc:	2b01      	cmp	r3, #1
 8003dce:	d015      	beq.n	8003dfc <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8003dd0:	68bb      	ldr	r3, [r7, #8]
 8003dd2:	699b      	ldr	r3, [r3, #24]
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	f000 811b 	beq.w	8004010 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8003dda:	69fb      	ldr	r3, [r7, #28]
 8003ddc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003de0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003de2:	68bb      	ldr	r3, [r7, #8]
 8003de4:	781b      	ldrb	r3, [r3, #0]
 8003de6:	f003 030f 	and.w	r3, r3, #15
 8003dea:	2101      	movs	r1, #1
 8003dec:	fa01 f303 	lsl.w	r3, r1, r3
 8003df0:	69f9      	ldr	r1, [r7, #28]
 8003df2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003df6:	4313      	orrs	r3, r2
 8003df8:	634b      	str	r3, [r1, #52]	; 0x34
 8003dfa:	e109      	b.n	8004010 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8003dfc:	69fb      	ldr	r3, [r7, #28]
 8003dfe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003e02:	689b      	ldr	r3, [r3, #8]
 8003e04:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d110      	bne.n	8003e2e <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8003e0c:	69bb      	ldr	r3, [r7, #24]
 8003e0e:	015a      	lsls	r2, r3, #5
 8003e10:	69fb      	ldr	r3, [r7, #28]
 8003e12:	4413      	add	r3, r2
 8003e14:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	69ba      	ldr	r2, [r7, #24]
 8003e1c:	0151      	lsls	r1, r2, #5
 8003e1e:	69fa      	ldr	r2, [r7, #28]
 8003e20:	440a      	add	r2, r1
 8003e22:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003e26:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003e2a:	6013      	str	r3, [r2, #0]
 8003e2c:	e00f      	b.n	8003e4e <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8003e2e:	69bb      	ldr	r3, [r7, #24]
 8003e30:	015a      	lsls	r2, r3, #5
 8003e32:	69fb      	ldr	r3, [r7, #28]
 8003e34:	4413      	add	r3, r2
 8003e36:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	69ba      	ldr	r2, [r7, #24]
 8003e3e:	0151      	lsls	r1, r2, #5
 8003e40:	69fa      	ldr	r2, [r7, #28]
 8003e42:	440a      	add	r2, r1
 8003e44:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003e48:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003e4c:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8003e4e:	68bb      	ldr	r3, [r7, #8]
 8003e50:	6919      	ldr	r1, [r3, #16]
 8003e52:	68bb      	ldr	r3, [r7, #8]
 8003e54:	781a      	ldrb	r2, [r3, #0]
 8003e56:	68bb      	ldr	r3, [r7, #8]
 8003e58:	699b      	ldr	r3, [r3, #24]
 8003e5a:	b298      	uxth	r0, r3
 8003e5c:	79fb      	ldrb	r3, [r7, #7]
 8003e5e:	9300      	str	r3, [sp, #0]
 8003e60:	4603      	mov	r3, r0
 8003e62:	68f8      	ldr	r0, [r7, #12]
 8003e64:	f000 fade 	bl	8004424 <USB_WritePacket>
 8003e68:	e0d2      	b.n	8004010 <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8003e6a:	69bb      	ldr	r3, [r7, #24]
 8003e6c:	015a      	lsls	r2, r3, #5
 8003e6e:	69fb      	ldr	r3, [r7, #28]
 8003e70:	4413      	add	r3, r2
 8003e72:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e76:	691b      	ldr	r3, [r3, #16]
 8003e78:	69ba      	ldr	r2, [r7, #24]
 8003e7a:	0151      	lsls	r1, r2, #5
 8003e7c:	69fa      	ldr	r2, [r7, #28]
 8003e7e:	440a      	add	r2, r1
 8003e80:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003e84:	0cdb      	lsrs	r3, r3, #19
 8003e86:	04db      	lsls	r3, r3, #19
 8003e88:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8003e8a:	69bb      	ldr	r3, [r7, #24]
 8003e8c:	015a      	lsls	r2, r3, #5
 8003e8e:	69fb      	ldr	r3, [r7, #28]
 8003e90:	4413      	add	r3, r2
 8003e92:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e96:	691b      	ldr	r3, [r3, #16]
 8003e98:	69ba      	ldr	r2, [r7, #24]
 8003e9a:	0151      	lsls	r1, r2, #5
 8003e9c:	69fa      	ldr	r2, [r7, #28]
 8003e9e:	440a      	add	r2, r1
 8003ea0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003ea4:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8003ea8:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8003eac:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8003eae:	68bb      	ldr	r3, [r7, #8]
 8003eb0:	699b      	ldr	r3, [r3, #24]
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d126      	bne.n	8003f04 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8003eb6:	69bb      	ldr	r3, [r7, #24]
 8003eb8:	015a      	lsls	r2, r3, #5
 8003eba:	69fb      	ldr	r3, [r7, #28]
 8003ebc:	4413      	add	r3, r2
 8003ebe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ec2:	691a      	ldr	r2, [r3, #16]
 8003ec4:	68bb      	ldr	r3, [r7, #8]
 8003ec6:	68db      	ldr	r3, [r3, #12]
 8003ec8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003ecc:	69b9      	ldr	r1, [r7, #24]
 8003ece:	0148      	lsls	r0, r1, #5
 8003ed0:	69f9      	ldr	r1, [r7, #28]
 8003ed2:	4401      	add	r1, r0
 8003ed4:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8003ed8:	4313      	orrs	r3, r2
 8003eda:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8003edc:	69bb      	ldr	r3, [r7, #24]
 8003ede:	015a      	lsls	r2, r3, #5
 8003ee0:	69fb      	ldr	r3, [r7, #28]
 8003ee2:	4413      	add	r3, r2
 8003ee4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ee8:	691b      	ldr	r3, [r3, #16]
 8003eea:	69ba      	ldr	r2, [r7, #24]
 8003eec:	0151      	lsls	r1, r2, #5
 8003eee:	69fa      	ldr	r2, [r7, #28]
 8003ef0:	440a      	add	r2, r1
 8003ef2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003ef6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003efa:	6113      	str	r3, [r2, #16]
 8003efc:	e03a      	b.n	8003f74 <USB_EPStartXfer+0x3e4>
 8003efe:	bf00      	nop
 8003f00:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8003f04:	68bb      	ldr	r3, [r7, #8]
 8003f06:	699a      	ldr	r2, [r3, #24]
 8003f08:	68bb      	ldr	r3, [r7, #8]
 8003f0a:	68db      	ldr	r3, [r3, #12]
 8003f0c:	4413      	add	r3, r2
 8003f0e:	1e5a      	subs	r2, r3, #1
 8003f10:	68bb      	ldr	r3, [r7, #8]
 8003f12:	68db      	ldr	r3, [r3, #12]
 8003f14:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f18:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 8003f1a:	68bb      	ldr	r3, [r7, #8]
 8003f1c:	68db      	ldr	r3, [r3, #12]
 8003f1e:	8afa      	ldrh	r2, [r7, #22]
 8003f20:	fb03 f202 	mul.w	r2, r3, r2
 8003f24:	68bb      	ldr	r3, [r7, #8]
 8003f26:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8003f28:	69bb      	ldr	r3, [r7, #24]
 8003f2a:	015a      	lsls	r2, r3, #5
 8003f2c:	69fb      	ldr	r3, [r7, #28]
 8003f2e:	4413      	add	r3, r2
 8003f30:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f34:	691a      	ldr	r2, [r3, #16]
 8003f36:	8afb      	ldrh	r3, [r7, #22]
 8003f38:	04d9      	lsls	r1, r3, #19
 8003f3a:	4b38      	ldr	r3, [pc, #224]	; (800401c <USB_EPStartXfer+0x48c>)
 8003f3c:	400b      	ands	r3, r1
 8003f3e:	69b9      	ldr	r1, [r7, #24]
 8003f40:	0148      	lsls	r0, r1, #5
 8003f42:	69f9      	ldr	r1, [r7, #28]
 8003f44:	4401      	add	r1, r0
 8003f46:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8003f4a:	4313      	orrs	r3, r2
 8003f4c:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8003f4e:	69bb      	ldr	r3, [r7, #24]
 8003f50:	015a      	lsls	r2, r3, #5
 8003f52:	69fb      	ldr	r3, [r7, #28]
 8003f54:	4413      	add	r3, r2
 8003f56:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f5a:	691a      	ldr	r2, [r3, #16]
 8003f5c:	68bb      	ldr	r3, [r7, #8]
 8003f5e:	69db      	ldr	r3, [r3, #28]
 8003f60:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003f64:	69b9      	ldr	r1, [r7, #24]
 8003f66:	0148      	lsls	r0, r1, #5
 8003f68:	69f9      	ldr	r1, [r7, #28]
 8003f6a:	4401      	add	r1, r0
 8003f6c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8003f70:	4313      	orrs	r3, r2
 8003f72:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8003f74:	79fb      	ldrb	r3, [r7, #7]
 8003f76:	2b01      	cmp	r3, #1
 8003f78:	d10d      	bne.n	8003f96 <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8003f7a:	68bb      	ldr	r3, [r7, #8]
 8003f7c:	691b      	ldr	r3, [r3, #16]
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d009      	beq.n	8003f96 <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8003f82:	68bb      	ldr	r3, [r7, #8]
 8003f84:	6919      	ldr	r1, [r3, #16]
 8003f86:	69bb      	ldr	r3, [r7, #24]
 8003f88:	015a      	lsls	r2, r3, #5
 8003f8a:	69fb      	ldr	r3, [r7, #28]
 8003f8c:	4413      	add	r3, r2
 8003f8e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f92:	460a      	mov	r2, r1
 8003f94:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8003f96:	68bb      	ldr	r3, [r7, #8]
 8003f98:	791b      	ldrb	r3, [r3, #4]
 8003f9a:	2b01      	cmp	r3, #1
 8003f9c:	d128      	bne.n	8003ff0 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8003f9e:	69fb      	ldr	r3, [r7, #28]
 8003fa0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003fa4:	689b      	ldr	r3, [r3, #8]
 8003fa6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d110      	bne.n	8003fd0 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8003fae:	69bb      	ldr	r3, [r7, #24]
 8003fb0:	015a      	lsls	r2, r3, #5
 8003fb2:	69fb      	ldr	r3, [r7, #28]
 8003fb4:	4413      	add	r3, r2
 8003fb6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	69ba      	ldr	r2, [r7, #24]
 8003fbe:	0151      	lsls	r1, r2, #5
 8003fc0:	69fa      	ldr	r2, [r7, #28]
 8003fc2:	440a      	add	r2, r1
 8003fc4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003fc8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003fcc:	6013      	str	r3, [r2, #0]
 8003fce:	e00f      	b.n	8003ff0 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8003fd0:	69bb      	ldr	r3, [r7, #24]
 8003fd2:	015a      	lsls	r2, r3, #5
 8003fd4:	69fb      	ldr	r3, [r7, #28]
 8003fd6:	4413      	add	r3, r2
 8003fd8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	69ba      	ldr	r2, [r7, #24]
 8003fe0:	0151      	lsls	r1, r2, #5
 8003fe2:	69fa      	ldr	r2, [r7, #28]
 8003fe4:	440a      	add	r2, r1
 8003fe6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003fea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003fee:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8003ff0:	69bb      	ldr	r3, [r7, #24]
 8003ff2:	015a      	lsls	r2, r3, #5
 8003ff4:	69fb      	ldr	r3, [r7, #28]
 8003ff6:	4413      	add	r3, r2
 8003ff8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	69ba      	ldr	r2, [r7, #24]
 8004000:	0151      	lsls	r1, r2, #5
 8004002:	69fa      	ldr	r2, [r7, #28]
 8004004:	440a      	add	r2, r1
 8004006:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800400a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800400e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004010:	2300      	movs	r3, #0
}
 8004012:	4618      	mov	r0, r3
 8004014:	3720      	adds	r7, #32
 8004016:	46bd      	mov	sp, r7
 8004018:	bd80      	pop	{r7, pc}
 800401a:	bf00      	nop
 800401c:	1ff80000 	.word	0x1ff80000

08004020 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8004020:	b480      	push	{r7}
 8004022:	b087      	sub	sp, #28
 8004024:	af00      	add	r7, sp, #0
 8004026:	60f8      	str	r0, [r7, #12]
 8004028:	60b9      	str	r1, [r7, #8]
 800402a:	4613      	mov	r3, r2
 800402c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8004032:	68bb      	ldr	r3, [r7, #8]
 8004034:	781b      	ldrb	r3, [r3, #0]
 8004036:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004038:	68bb      	ldr	r3, [r7, #8]
 800403a:	785b      	ldrb	r3, [r3, #1]
 800403c:	2b01      	cmp	r3, #1
 800403e:	f040 80ce 	bne.w	80041de <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8004042:	68bb      	ldr	r3, [r7, #8]
 8004044:	699b      	ldr	r3, [r3, #24]
 8004046:	2b00      	cmp	r3, #0
 8004048:	d132      	bne.n	80040b0 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800404a:	693b      	ldr	r3, [r7, #16]
 800404c:	015a      	lsls	r2, r3, #5
 800404e:	697b      	ldr	r3, [r7, #20]
 8004050:	4413      	add	r3, r2
 8004052:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004056:	691b      	ldr	r3, [r3, #16]
 8004058:	693a      	ldr	r2, [r7, #16]
 800405a:	0151      	lsls	r1, r2, #5
 800405c:	697a      	ldr	r2, [r7, #20]
 800405e:	440a      	add	r2, r1
 8004060:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004064:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004068:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800406c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800406e:	693b      	ldr	r3, [r7, #16]
 8004070:	015a      	lsls	r2, r3, #5
 8004072:	697b      	ldr	r3, [r7, #20]
 8004074:	4413      	add	r3, r2
 8004076:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800407a:	691b      	ldr	r3, [r3, #16]
 800407c:	693a      	ldr	r2, [r7, #16]
 800407e:	0151      	lsls	r1, r2, #5
 8004080:	697a      	ldr	r2, [r7, #20]
 8004082:	440a      	add	r2, r1
 8004084:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004088:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800408c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800408e:	693b      	ldr	r3, [r7, #16]
 8004090:	015a      	lsls	r2, r3, #5
 8004092:	697b      	ldr	r3, [r7, #20]
 8004094:	4413      	add	r3, r2
 8004096:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800409a:	691b      	ldr	r3, [r3, #16]
 800409c:	693a      	ldr	r2, [r7, #16]
 800409e:	0151      	lsls	r1, r2, #5
 80040a0:	697a      	ldr	r2, [r7, #20]
 80040a2:	440a      	add	r2, r1
 80040a4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80040a8:	0cdb      	lsrs	r3, r3, #19
 80040aa:	04db      	lsls	r3, r3, #19
 80040ac:	6113      	str	r3, [r2, #16]
 80040ae:	e04e      	b.n	800414e <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80040b0:	693b      	ldr	r3, [r7, #16]
 80040b2:	015a      	lsls	r2, r3, #5
 80040b4:	697b      	ldr	r3, [r7, #20]
 80040b6:	4413      	add	r3, r2
 80040b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80040bc:	691b      	ldr	r3, [r3, #16]
 80040be:	693a      	ldr	r2, [r7, #16]
 80040c0:	0151      	lsls	r1, r2, #5
 80040c2:	697a      	ldr	r2, [r7, #20]
 80040c4:	440a      	add	r2, r1
 80040c6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80040ca:	0cdb      	lsrs	r3, r3, #19
 80040cc:	04db      	lsls	r3, r3, #19
 80040ce:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80040d0:	693b      	ldr	r3, [r7, #16]
 80040d2:	015a      	lsls	r2, r3, #5
 80040d4:	697b      	ldr	r3, [r7, #20]
 80040d6:	4413      	add	r3, r2
 80040d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80040dc:	691b      	ldr	r3, [r3, #16]
 80040de:	693a      	ldr	r2, [r7, #16]
 80040e0:	0151      	lsls	r1, r2, #5
 80040e2:	697a      	ldr	r2, [r7, #20]
 80040e4:	440a      	add	r2, r1
 80040e6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80040ea:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80040ee:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80040f2:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 80040f4:	68bb      	ldr	r3, [r7, #8]
 80040f6:	699a      	ldr	r2, [r3, #24]
 80040f8:	68bb      	ldr	r3, [r7, #8]
 80040fa:	68db      	ldr	r3, [r3, #12]
 80040fc:	429a      	cmp	r2, r3
 80040fe:	d903      	bls.n	8004108 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8004100:	68bb      	ldr	r3, [r7, #8]
 8004102:	68da      	ldr	r2, [r3, #12]
 8004104:	68bb      	ldr	r3, [r7, #8]
 8004106:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004108:	693b      	ldr	r3, [r7, #16]
 800410a:	015a      	lsls	r2, r3, #5
 800410c:	697b      	ldr	r3, [r7, #20]
 800410e:	4413      	add	r3, r2
 8004110:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004114:	691b      	ldr	r3, [r3, #16]
 8004116:	693a      	ldr	r2, [r7, #16]
 8004118:	0151      	lsls	r1, r2, #5
 800411a:	697a      	ldr	r2, [r7, #20]
 800411c:	440a      	add	r2, r1
 800411e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004122:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004126:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8004128:	693b      	ldr	r3, [r7, #16]
 800412a:	015a      	lsls	r2, r3, #5
 800412c:	697b      	ldr	r3, [r7, #20]
 800412e:	4413      	add	r3, r2
 8004130:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004134:	691a      	ldr	r2, [r3, #16]
 8004136:	68bb      	ldr	r3, [r7, #8]
 8004138:	699b      	ldr	r3, [r3, #24]
 800413a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800413e:	6939      	ldr	r1, [r7, #16]
 8004140:	0148      	lsls	r0, r1, #5
 8004142:	6979      	ldr	r1, [r7, #20]
 8004144:	4401      	add	r1, r0
 8004146:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800414a:	4313      	orrs	r3, r2
 800414c:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800414e:	79fb      	ldrb	r3, [r7, #7]
 8004150:	2b01      	cmp	r3, #1
 8004152:	d11e      	bne.n	8004192 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8004154:	68bb      	ldr	r3, [r7, #8]
 8004156:	695b      	ldr	r3, [r3, #20]
 8004158:	2b00      	cmp	r3, #0
 800415a:	d009      	beq.n	8004170 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800415c:	693b      	ldr	r3, [r7, #16]
 800415e:	015a      	lsls	r2, r3, #5
 8004160:	697b      	ldr	r3, [r7, #20]
 8004162:	4413      	add	r3, r2
 8004164:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004168:	461a      	mov	r2, r3
 800416a:	68bb      	ldr	r3, [r7, #8]
 800416c:	695b      	ldr	r3, [r3, #20]
 800416e:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004170:	693b      	ldr	r3, [r7, #16]
 8004172:	015a      	lsls	r2, r3, #5
 8004174:	697b      	ldr	r3, [r7, #20]
 8004176:	4413      	add	r3, r2
 8004178:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	693a      	ldr	r2, [r7, #16]
 8004180:	0151      	lsls	r1, r2, #5
 8004182:	697a      	ldr	r2, [r7, #20]
 8004184:	440a      	add	r2, r1
 8004186:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800418a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800418e:	6013      	str	r3, [r2, #0]
 8004190:	e097      	b.n	80042c2 <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004192:	693b      	ldr	r3, [r7, #16]
 8004194:	015a      	lsls	r2, r3, #5
 8004196:	697b      	ldr	r3, [r7, #20]
 8004198:	4413      	add	r3, r2
 800419a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	693a      	ldr	r2, [r7, #16]
 80041a2:	0151      	lsls	r1, r2, #5
 80041a4:	697a      	ldr	r2, [r7, #20]
 80041a6:	440a      	add	r2, r1
 80041a8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80041ac:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80041b0:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 80041b2:	68bb      	ldr	r3, [r7, #8]
 80041b4:	699b      	ldr	r3, [r3, #24]
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	f000 8083 	beq.w	80042c2 <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80041bc:	697b      	ldr	r3, [r7, #20]
 80041be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80041c2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80041c4:	68bb      	ldr	r3, [r7, #8]
 80041c6:	781b      	ldrb	r3, [r3, #0]
 80041c8:	f003 030f 	and.w	r3, r3, #15
 80041cc:	2101      	movs	r1, #1
 80041ce:	fa01 f303 	lsl.w	r3, r1, r3
 80041d2:	6979      	ldr	r1, [r7, #20]
 80041d4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80041d8:	4313      	orrs	r3, r2
 80041da:	634b      	str	r3, [r1, #52]	; 0x34
 80041dc:	e071      	b.n	80042c2 <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80041de:	693b      	ldr	r3, [r7, #16]
 80041e0:	015a      	lsls	r2, r3, #5
 80041e2:	697b      	ldr	r3, [r7, #20]
 80041e4:	4413      	add	r3, r2
 80041e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80041ea:	691b      	ldr	r3, [r3, #16]
 80041ec:	693a      	ldr	r2, [r7, #16]
 80041ee:	0151      	lsls	r1, r2, #5
 80041f0:	697a      	ldr	r2, [r7, #20]
 80041f2:	440a      	add	r2, r1
 80041f4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80041f8:	0cdb      	lsrs	r3, r3, #19
 80041fa:	04db      	lsls	r3, r3, #19
 80041fc:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80041fe:	693b      	ldr	r3, [r7, #16]
 8004200:	015a      	lsls	r2, r3, #5
 8004202:	697b      	ldr	r3, [r7, #20]
 8004204:	4413      	add	r3, r2
 8004206:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800420a:	691b      	ldr	r3, [r3, #16]
 800420c:	693a      	ldr	r2, [r7, #16]
 800420e:	0151      	lsls	r1, r2, #5
 8004210:	697a      	ldr	r2, [r7, #20]
 8004212:	440a      	add	r2, r1
 8004214:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004218:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800421c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004220:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8004222:	68bb      	ldr	r3, [r7, #8]
 8004224:	699b      	ldr	r3, [r3, #24]
 8004226:	2b00      	cmp	r3, #0
 8004228:	d003      	beq.n	8004232 <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 800422a:	68bb      	ldr	r3, [r7, #8]
 800422c:	68da      	ldr	r2, [r3, #12]
 800422e:	68bb      	ldr	r3, [r7, #8]
 8004230:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 8004232:	68bb      	ldr	r3, [r7, #8]
 8004234:	68da      	ldr	r2, [r3, #12]
 8004236:	68bb      	ldr	r3, [r7, #8]
 8004238:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800423a:	693b      	ldr	r3, [r7, #16]
 800423c:	015a      	lsls	r2, r3, #5
 800423e:	697b      	ldr	r3, [r7, #20]
 8004240:	4413      	add	r3, r2
 8004242:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004246:	691b      	ldr	r3, [r3, #16]
 8004248:	693a      	ldr	r2, [r7, #16]
 800424a:	0151      	lsls	r1, r2, #5
 800424c:	697a      	ldr	r2, [r7, #20]
 800424e:	440a      	add	r2, r1
 8004250:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004254:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004258:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800425a:	693b      	ldr	r3, [r7, #16]
 800425c:	015a      	lsls	r2, r3, #5
 800425e:	697b      	ldr	r3, [r7, #20]
 8004260:	4413      	add	r3, r2
 8004262:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004266:	691a      	ldr	r2, [r3, #16]
 8004268:	68bb      	ldr	r3, [r7, #8]
 800426a:	69db      	ldr	r3, [r3, #28]
 800426c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004270:	6939      	ldr	r1, [r7, #16]
 8004272:	0148      	lsls	r0, r1, #5
 8004274:	6979      	ldr	r1, [r7, #20]
 8004276:	4401      	add	r1, r0
 8004278:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800427c:	4313      	orrs	r3, r2
 800427e:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8004280:	79fb      	ldrb	r3, [r7, #7]
 8004282:	2b01      	cmp	r3, #1
 8004284:	d10d      	bne.n	80042a2 <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8004286:	68bb      	ldr	r3, [r7, #8]
 8004288:	691b      	ldr	r3, [r3, #16]
 800428a:	2b00      	cmp	r3, #0
 800428c:	d009      	beq.n	80042a2 <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800428e:	68bb      	ldr	r3, [r7, #8]
 8004290:	6919      	ldr	r1, [r3, #16]
 8004292:	693b      	ldr	r3, [r7, #16]
 8004294:	015a      	lsls	r2, r3, #5
 8004296:	697b      	ldr	r3, [r7, #20]
 8004298:	4413      	add	r3, r2
 800429a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800429e:	460a      	mov	r2, r1
 80042a0:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80042a2:	693b      	ldr	r3, [r7, #16]
 80042a4:	015a      	lsls	r2, r3, #5
 80042a6:	697b      	ldr	r3, [r7, #20]
 80042a8:	4413      	add	r3, r2
 80042aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	693a      	ldr	r2, [r7, #16]
 80042b2:	0151      	lsls	r1, r2, #5
 80042b4:	697a      	ldr	r2, [r7, #20]
 80042b6:	440a      	add	r2, r1
 80042b8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80042bc:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80042c0:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80042c2:	2300      	movs	r3, #0
}
 80042c4:	4618      	mov	r0, r3
 80042c6:	371c      	adds	r7, #28
 80042c8:	46bd      	mov	sp, r7
 80042ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ce:	4770      	bx	lr

080042d0 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80042d0:	b480      	push	{r7}
 80042d2:	b087      	sub	sp, #28
 80042d4:	af00      	add	r7, sp, #0
 80042d6:	6078      	str	r0, [r7, #4]
 80042d8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80042da:	2300      	movs	r3, #0
 80042dc:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 80042de:	2300      	movs	r3, #0
 80042e0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80042e6:	683b      	ldr	r3, [r7, #0]
 80042e8:	785b      	ldrb	r3, [r3, #1]
 80042ea:	2b01      	cmp	r3, #1
 80042ec:	d14a      	bne.n	8004384 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80042ee:	683b      	ldr	r3, [r7, #0]
 80042f0:	781b      	ldrb	r3, [r3, #0]
 80042f2:	015a      	lsls	r2, r3, #5
 80042f4:	693b      	ldr	r3, [r7, #16]
 80042f6:	4413      	add	r3, r2
 80042f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004302:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004306:	f040 8086 	bne.w	8004416 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800430a:	683b      	ldr	r3, [r7, #0]
 800430c:	781b      	ldrb	r3, [r3, #0]
 800430e:	015a      	lsls	r2, r3, #5
 8004310:	693b      	ldr	r3, [r7, #16]
 8004312:	4413      	add	r3, r2
 8004314:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	683a      	ldr	r2, [r7, #0]
 800431c:	7812      	ldrb	r2, [r2, #0]
 800431e:	0151      	lsls	r1, r2, #5
 8004320:	693a      	ldr	r2, [r7, #16]
 8004322:	440a      	add	r2, r1
 8004324:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004328:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800432c:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800432e:	683b      	ldr	r3, [r7, #0]
 8004330:	781b      	ldrb	r3, [r3, #0]
 8004332:	015a      	lsls	r2, r3, #5
 8004334:	693b      	ldr	r3, [r7, #16]
 8004336:	4413      	add	r3, r2
 8004338:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	683a      	ldr	r2, [r7, #0]
 8004340:	7812      	ldrb	r2, [r2, #0]
 8004342:	0151      	lsls	r1, r2, #5
 8004344:	693a      	ldr	r2, [r7, #16]
 8004346:	440a      	add	r2, r1
 8004348:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800434c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004350:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	3301      	adds	r3, #1
 8004356:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	f242 7210 	movw	r2, #10000	; 0x2710
 800435e:	4293      	cmp	r3, r2
 8004360:	d902      	bls.n	8004368 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8004362:	2301      	movs	r3, #1
 8004364:	75fb      	strb	r3, [r7, #23]
          break;
 8004366:	e056      	b.n	8004416 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8004368:	683b      	ldr	r3, [r7, #0]
 800436a:	781b      	ldrb	r3, [r3, #0]
 800436c:	015a      	lsls	r2, r3, #5
 800436e:	693b      	ldr	r3, [r7, #16]
 8004370:	4413      	add	r3, r2
 8004372:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800437c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004380:	d0e7      	beq.n	8004352 <USB_EPStopXfer+0x82>
 8004382:	e048      	b.n	8004416 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004384:	683b      	ldr	r3, [r7, #0]
 8004386:	781b      	ldrb	r3, [r3, #0]
 8004388:	015a      	lsls	r2, r3, #5
 800438a:	693b      	ldr	r3, [r7, #16]
 800438c:	4413      	add	r3, r2
 800438e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004398:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800439c:	d13b      	bne.n	8004416 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800439e:	683b      	ldr	r3, [r7, #0]
 80043a0:	781b      	ldrb	r3, [r3, #0]
 80043a2:	015a      	lsls	r2, r3, #5
 80043a4:	693b      	ldr	r3, [r7, #16]
 80043a6:	4413      	add	r3, r2
 80043a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	683a      	ldr	r2, [r7, #0]
 80043b0:	7812      	ldrb	r2, [r2, #0]
 80043b2:	0151      	lsls	r1, r2, #5
 80043b4:	693a      	ldr	r2, [r7, #16]
 80043b6:	440a      	add	r2, r1
 80043b8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80043bc:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80043c0:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 80043c2:	683b      	ldr	r3, [r7, #0]
 80043c4:	781b      	ldrb	r3, [r3, #0]
 80043c6:	015a      	lsls	r2, r3, #5
 80043c8:	693b      	ldr	r3, [r7, #16]
 80043ca:	4413      	add	r3, r2
 80043cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	683a      	ldr	r2, [r7, #0]
 80043d4:	7812      	ldrb	r2, [r2, #0]
 80043d6:	0151      	lsls	r1, r2, #5
 80043d8:	693a      	ldr	r2, [r7, #16]
 80043da:	440a      	add	r2, r1
 80043dc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80043e0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80043e4:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	3301      	adds	r3, #1
 80043ea:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	f242 7210 	movw	r2, #10000	; 0x2710
 80043f2:	4293      	cmp	r3, r2
 80043f4:	d902      	bls.n	80043fc <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 80043f6:	2301      	movs	r3, #1
 80043f8:	75fb      	strb	r3, [r7, #23]
          break;
 80043fa:	e00c      	b.n	8004416 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 80043fc:	683b      	ldr	r3, [r7, #0]
 80043fe:	781b      	ldrb	r3, [r3, #0]
 8004400:	015a      	lsls	r2, r3, #5
 8004402:	693b      	ldr	r3, [r7, #16]
 8004404:	4413      	add	r3, r2
 8004406:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004410:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004414:	d0e7      	beq.n	80043e6 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8004416:	7dfb      	ldrb	r3, [r7, #23]
}
 8004418:	4618      	mov	r0, r3
 800441a:	371c      	adds	r7, #28
 800441c:	46bd      	mov	sp, r7
 800441e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004422:	4770      	bx	lr

08004424 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8004424:	b480      	push	{r7}
 8004426:	b089      	sub	sp, #36	; 0x24
 8004428:	af00      	add	r7, sp, #0
 800442a:	60f8      	str	r0, [r7, #12]
 800442c:	60b9      	str	r1, [r7, #8]
 800442e:	4611      	mov	r1, r2
 8004430:	461a      	mov	r2, r3
 8004432:	460b      	mov	r3, r1
 8004434:	71fb      	strb	r3, [r7, #7]
 8004436:	4613      	mov	r3, r2
 8004438:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800443e:	68bb      	ldr	r3, [r7, #8]
 8004440:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8004442:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004446:	2b00      	cmp	r3, #0
 8004448:	d123      	bne.n	8004492 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800444a:	88bb      	ldrh	r3, [r7, #4]
 800444c:	3303      	adds	r3, #3
 800444e:	089b      	lsrs	r3, r3, #2
 8004450:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8004452:	2300      	movs	r3, #0
 8004454:	61bb      	str	r3, [r7, #24]
 8004456:	e018      	b.n	800448a <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8004458:	79fb      	ldrb	r3, [r7, #7]
 800445a:	031a      	lsls	r2, r3, #12
 800445c:	697b      	ldr	r3, [r7, #20]
 800445e:	4413      	add	r3, r2
 8004460:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004464:	461a      	mov	r2, r3
 8004466:	69fb      	ldr	r3, [r7, #28]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	6013      	str	r3, [r2, #0]
      pSrc++;
 800446c:	69fb      	ldr	r3, [r7, #28]
 800446e:	3301      	adds	r3, #1
 8004470:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004472:	69fb      	ldr	r3, [r7, #28]
 8004474:	3301      	adds	r3, #1
 8004476:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004478:	69fb      	ldr	r3, [r7, #28]
 800447a:	3301      	adds	r3, #1
 800447c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800447e:	69fb      	ldr	r3, [r7, #28]
 8004480:	3301      	adds	r3, #1
 8004482:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8004484:	69bb      	ldr	r3, [r7, #24]
 8004486:	3301      	adds	r3, #1
 8004488:	61bb      	str	r3, [r7, #24]
 800448a:	69ba      	ldr	r2, [r7, #24]
 800448c:	693b      	ldr	r3, [r7, #16]
 800448e:	429a      	cmp	r2, r3
 8004490:	d3e2      	bcc.n	8004458 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8004492:	2300      	movs	r3, #0
}
 8004494:	4618      	mov	r0, r3
 8004496:	3724      	adds	r7, #36	; 0x24
 8004498:	46bd      	mov	sp, r7
 800449a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800449e:	4770      	bx	lr

080044a0 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80044a0:	b480      	push	{r7}
 80044a2:	b08b      	sub	sp, #44	; 0x2c
 80044a4:	af00      	add	r7, sp, #0
 80044a6:	60f8      	str	r0, [r7, #12]
 80044a8:	60b9      	str	r1, [r7, #8]
 80044aa:	4613      	mov	r3, r2
 80044ac:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80044b2:	68bb      	ldr	r3, [r7, #8]
 80044b4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80044b6:	88fb      	ldrh	r3, [r7, #6]
 80044b8:	089b      	lsrs	r3, r3, #2
 80044ba:	b29b      	uxth	r3, r3
 80044bc:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80044be:	88fb      	ldrh	r3, [r7, #6]
 80044c0:	f003 0303 	and.w	r3, r3, #3
 80044c4:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80044c6:	2300      	movs	r3, #0
 80044c8:	623b      	str	r3, [r7, #32]
 80044ca:	e014      	b.n	80044f6 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80044cc:	69bb      	ldr	r3, [r7, #24]
 80044ce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80044d2:	681a      	ldr	r2, [r3, #0]
 80044d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044d6:	601a      	str	r2, [r3, #0]
    pDest++;
 80044d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044da:	3301      	adds	r3, #1
 80044dc:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80044de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044e0:	3301      	adds	r3, #1
 80044e2:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80044e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044e6:	3301      	adds	r3, #1
 80044e8:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80044ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044ec:	3301      	adds	r3, #1
 80044ee:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 80044f0:	6a3b      	ldr	r3, [r7, #32]
 80044f2:	3301      	adds	r3, #1
 80044f4:	623b      	str	r3, [r7, #32]
 80044f6:	6a3a      	ldr	r2, [r7, #32]
 80044f8:	697b      	ldr	r3, [r7, #20]
 80044fa:	429a      	cmp	r2, r3
 80044fc:	d3e6      	bcc.n	80044cc <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80044fe:	8bfb      	ldrh	r3, [r7, #30]
 8004500:	2b00      	cmp	r3, #0
 8004502:	d01e      	beq.n	8004542 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8004504:	2300      	movs	r3, #0
 8004506:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8004508:	69bb      	ldr	r3, [r7, #24]
 800450a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800450e:	461a      	mov	r2, r3
 8004510:	f107 0310 	add.w	r3, r7, #16
 8004514:	6812      	ldr	r2, [r2, #0]
 8004516:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8004518:	693a      	ldr	r2, [r7, #16]
 800451a:	6a3b      	ldr	r3, [r7, #32]
 800451c:	b2db      	uxtb	r3, r3
 800451e:	00db      	lsls	r3, r3, #3
 8004520:	fa22 f303 	lsr.w	r3, r2, r3
 8004524:	b2da      	uxtb	r2, r3
 8004526:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004528:	701a      	strb	r2, [r3, #0]
      i++;
 800452a:	6a3b      	ldr	r3, [r7, #32]
 800452c:	3301      	adds	r3, #1
 800452e:	623b      	str	r3, [r7, #32]
      pDest++;
 8004530:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004532:	3301      	adds	r3, #1
 8004534:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8004536:	8bfb      	ldrh	r3, [r7, #30]
 8004538:	3b01      	subs	r3, #1
 800453a:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800453c:	8bfb      	ldrh	r3, [r7, #30]
 800453e:	2b00      	cmp	r3, #0
 8004540:	d1ea      	bne.n	8004518 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8004542:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004544:	4618      	mov	r0, r3
 8004546:	372c      	adds	r7, #44	; 0x2c
 8004548:	46bd      	mov	sp, r7
 800454a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800454e:	4770      	bx	lr

08004550 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004550:	b480      	push	{r7}
 8004552:	b085      	sub	sp, #20
 8004554:	af00      	add	r7, sp, #0
 8004556:	6078      	str	r0, [r7, #4]
 8004558:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800455e:	683b      	ldr	r3, [r7, #0]
 8004560:	781b      	ldrb	r3, [r3, #0]
 8004562:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004564:	683b      	ldr	r3, [r7, #0]
 8004566:	785b      	ldrb	r3, [r3, #1]
 8004568:	2b01      	cmp	r3, #1
 800456a:	d12c      	bne.n	80045c6 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800456c:	68bb      	ldr	r3, [r7, #8]
 800456e:	015a      	lsls	r2, r3, #5
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	4413      	add	r3, r2
 8004574:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	2b00      	cmp	r3, #0
 800457c:	db12      	blt.n	80045a4 <USB_EPSetStall+0x54>
 800457e:	68bb      	ldr	r3, [r7, #8]
 8004580:	2b00      	cmp	r3, #0
 8004582:	d00f      	beq.n	80045a4 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8004584:	68bb      	ldr	r3, [r7, #8]
 8004586:	015a      	lsls	r2, r3, #5
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	4413      	add	r3, r2
 800458c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	68ba      	ldr	r2, [r7, #8]
 8004594:	0151      	lsls	r1, r2, #5
 8004596:	68fa      	ldr	r2, [r7, #12]
 8004598:	440a      	add	r2, r1
 800459a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800459e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80045a2:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80045a4:	68bb      	ldr	r3, [r7, #8]
 80045a6:	015a      	lsls	r2, r3, #5
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	4413      	add	r3, r2
 80045ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	68ba      	ldr	r2, [r7, #8]
 80045b4:	0151      	lsls	r1, r2, #5
 80045b6:	68fa      	ldr	r2, [r7, #12]
 80045b8:	440a      	add	r2, r1
 80045ba:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80045be:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80045c2:	6013      	str	r3, [r2, #0]
 80045c4:	e02b      	b.n	800461e <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 80045c6:	68bb      	ldr	r3, [r7, #8]
 80045c8:	015a      	lsls	r2, r3, #5
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	4413      	add	r3, r2
 80045ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	db12      	blt.n	80045fe <USB_EPSetStall+0xae>
 80045d8:	68bb      	ldr	r3, [r7, #8]
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d00f      	beq.n	80045fe <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 80045de:	68bb      	ldr	r3, [r7, #8]
 80045e0:	015a      	lsls	r2, r3, #5
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	4413      	add	r3, r2
 80045e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	68ba      	ldr	r2, [r7, #8]
 80045ee:	0151      	lsls	r1, r2, #5
 80045f0:	68fa      	ldr	r2, [r7, #12]
 80045f2:	440a      	add	r2, r1
 80045f4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80045f8:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80045fc:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80045fe:	68bb      	ldr	r3, [r7, #8]
 8004600:	015a      	lsls	r2, r3, #5
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	4413      	add	r3, r2
 8004606:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	68ba      	ldr	r2, [r7, #8]
 800460e:	0151      	lsls	r1, r2, #5
 8004610:	68fa      	ldr	r2, [r7, #12]
 8004612:	440a      	add	r2, r1
 8004614:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004618:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800461c:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800461e:	2300      	movs	r3, #0
}
 8004620:	4618      	mov	r0, r3
 8004622:	3714      	adds	r7, #20
 8004624:	46bd      	mov	sp, r7
 8004626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800462a:	4770      	bx	lr

0800462c <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800462c:	b480      	push	{r7}
 800462e:	b085      	sub	sp, #20
 8004630:	af00      	add	r7, sp, #0
 8004632:	6078      	str	r0, [r7, #4]
 8004634:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800463a:	683b      	ldr	r3, [r7, #0]
 800463c:	781b      	ldrb	r3, [r3, #0]
 800463e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004640:	683b      	ldr	r3, [r7, #0]
 8004642:	785b      	ldrb	r3, [r3, #1]
 8004644:	2b01      	cmp	r3, #1
 8004646:	d128      	bne.n	800469a <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8004648:	68bb      	ldr	r3, [r7, #8]
 800464a:	015a      	lsls	r2, r3, #5
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	4413      	add	r3, r2
 8004650:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	68ba      	ldr	r2, [r7, #8]
 8004658:	0151      	lsls	r1, r2, #5
 800465a:	68fa      	ldr	r2, [r7, #12]
 800465c:	440a      	add	r2, r1
 800465e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004662:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004666:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8004668:	683b      	ldr	r3, [r7, #0]
 800466a:	791b      	ldrb	r3, [r3, #4]
 800466c:	2b03      	cmp	r3, #3
 800466e:	d003      	beq.n	8004678 <USB_EPClearStall+0x4c>
 8004670:	683b      	ldr	r3, [r7, #0]
 8004672:	791b      	ldrb	r3, [r3, #4]
 8004674:	2b02      	cmp	r3, #2
 8004676:	d138      	bne.n	80046ea <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8004678:	68bb      	ldr	r3, [r7, #8]
 800467a:	015a      	lsls	r2, r3, #5
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	4413      	add	r3, r2
 8004680:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	68ba      	ldr	r2, [r7, #8]
 8004688:	0151      	lsls	r1, r2, #5
 800468a:	68fa      	ldr	r2, [r7, #12]
 800468c:	440a      	add	r2, r1
 800468e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004692:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004696:	6013      	str	r3, [r2, #0]
 8004698:	e027      	b.n	80046ea <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800469a:	68bb      	ldr	r3, [r7, #8]
 800469c:	015a      	lsls	r2, r3, #5
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	4413      	add	r3, r2
 80046a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	68ba      	ldr	r2, [r7, #8]
 80046aa:	0151      	lsls	r1, r2, #5
 80046ac:	68fa      	ldr	r2, [r7, #12]
 80046ae:	440a      	add	r2, r1
 80046b0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80046b4:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80046b8:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80046ba:	683b      	ldr	r3, [r7, #0]
 80046bc:	791b      	ldrb	r3, [r3, #4]
 80046be:	2b03      	cmp	r3, #3
 80046c0:	d003      	beq.n	80046ca <USB_EPClearStall+0x9e>
 80046c2:	683b      	ldr	r3, [r7, #0]
 80046c4:	791b      	ldrb	r3, [r3, #4]
 80046c6:	2b02      	cmp	r3, #2
 80046c8:	d10f      	bne.n	80046ea <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80046ca:	68bb      	ldr	r3, [r7, #8]
 80046cc:	015a      	lsls	r2, r3, #5
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	4413      	add	r3, r2
 80046d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	68ba      	ldr	r2, [r7, #8]
 80046da:	0151      	lsls	r1, r2, #5
 80046dc:	68fa      	ldr	r2, [r7, #12]
 80046de:	440a      	add	r2, r1
 80046e0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80046e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80046e8:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 80046ea:	2300      	movs	r3, #0
}
 80046ec:	4618      	mov	r0, r3
 80046ee:	3714      	adds	r7, #20
 80046f0:	46bd      	mov	sp, r7
 80046f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046f6:	4770      	bx	lr

080046f8 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 80046f8:	b480      	push	{r7}
 80046fa:	b085      	sub	sp, #20
 80046fc:	af00      	add	r7, sp, #0
 80046fe:	6078      	str	r0, [r7, #4]
 8004700:	460b      	mov	r3, r1
 8004702:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	68fa      	ldr	r2, [r7, #12]
 8004712:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004716:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800471a:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004722:	681a      	ldr	r2, [r3, #0]
 8004724:	78fb      	ldrb	r3, [r7, #3]
 8004726:	011b      	lsls	r3, r3, #4
 8004728:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800472c:	68f9      	ldr	r1, [r7, #12]
 800472e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004732:	4313      	orrs	r3, r2
 8004734:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8004736:	2300      	movs	r3, #0
}
 8004738:	4618      	mov	r0, r3
 800473a:	3714      	adds	r7, #20
 800473c:	46bd      	mov	sp, r7
 800473e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004742:	4770      	bx	lr

08004744 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8004744:	b480      	push	{r7}
 8004746:	b085      	sub	sp, #20
 8004748:	af00      	add	r7, sp, #0
 800474a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	68fa      	ldr	r2, [r7, #12]
 800475a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800475e:	f023 0303 	bic.w	r3, r3, #3
 8004762:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800476a:	685b      	ldr	r3, [r3, #4]
 800476c:	68fa      	ldr	r2, [r7, #12]
 800476e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004772:	f023 0302 	bic.w	r3, r3, #2
 8004776:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004778:	2300      	movs	r3, #0
}
 800477a:	4618      	mov	r0, r3
 800477c:	3714      	adds	r7, #20
 800477e:	46bd      	mov	sp, r7
 8004780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004784:	4770      	bx	lr

08004786 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8004786:	b480      	push	{r7}
 8004788:	b085      	sub	sp, #20
 800478a:	af00      	add	r7, sp, #0
 800478c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	68fa      	ldr	r2, [r7, #12]
 800479c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80047a0:	f023 0303 	bic.w	r3, r3, #3
 80047a4:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80047ac:	685b      	ldr	r3, [r3, #4]
 80047ae:	68fa      	ldr	r2, [r7, #12]
 80047b0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80047b4:	f043 0302 	orr.w	r3, r3, #2
 80047b8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80047ba:	2300      	movs	r3, #0
}
 80047bc:	4618      	mov	r0, r3
 80047be:	3714      	adds	r7, #20
 80047c0:	46bd      	mov	sp, r7
 80047c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047c6:	4770      	bx	lr

080047c8 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 80047c8:	b480      	push	{r7}
 80047ca:	b085      	sub	sp, #20
 80047cc:	af00      	add	r7, sp, #0
 80047ce:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	695b      	ldr	r3, [r3, #20]
 80047d4:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	699b      	ldr	r3, [r3, #24]
 80047da:	68fa      	ldr	r2, [r7, #12]
 80047dc:	4013      	ands	r3, r2
 80047de:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80047e0:	68fb      	ldr	r3, [r7, #12]
}
 80047e2:	4618      	mov	r0, r3
 80047e4:	3714      	adds	r7, #20
 80047e6:	46bd      	mov	sp, r7
 80047e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ec:	4770      	bx	lr

080047ee <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80047ee:	b480      	push	{r7}
 80047f0:	b085      	sub	sp, #20
 80047f2:	af00      	add	r7, sp, #0
 80047f4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004800:	699b      	ldr	r3, [r3, #24]
 8004802:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800480a:	69db      	ldr	r3, [r3, #28]
 800480c:	68ba      	ldr	r2, [r7, #8]
 800480e:	4013      	ands	r3, r2
 8004810:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8004812:	68bb      	ldr	r3, [r7, #8]
 8004814:	0c1b      	lsrs	r3, r3, #16
}
 8004816:	4618      	mov	r0, r3
 8004818:	3714      	adds	r7, #20
 800481a:	46bd      	mov	sp, r7
 800481c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004820:	4770      	bx	lr

08004822 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8004822:	b480      	push	{r7}
 8004824:	b085      	sub	sp, #20
 8004826:	af00      	add	r7, sp, #0
 8004828:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004834:	699b      	ldr	r3, [r3, #24]
 8004836:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800483e:	69db      	ldr	r3, [r3, #28]
 8004840:	68ba      	ldr	r2, [r7, #8]
 8004842:	4013      	ands	r3, r2
 8004844:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8004846:	68bb      	ldr	r3, [r7, #8]
 8004848:	b29b      	uxth	r3, r3
}
 800484a:	4618      	mov	r0, r3
 800484c:	3714      	adds	r7, #20
 800484e:	46bd      	mov	sp, r7
 8004850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004854:	4770      	bx	lr

08004856 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8004856:	b480      	push	{r7}
 8004858:	b085      	sub	sp, #20
 800485a:	af00      	add	r7, sp, #0
 800485c:	6078      	str	r0, [r7, #4]
 800485e:	460b      	mov	r3, r1
 8004860:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8004866:	78fb      	ldrb	r3, [r7, #3]
 8004868:	015a      	lsls	r2, r3, #5
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	4413      	add	r3, r2
 800486e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004872:	689b      	ldr	r3, [r3, #8]
 8004874:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800487c:	695b      	ldr	r3, [r3, #20]
 800487e:	68ba      	ldr	r2, [r7, #8]
 8004880:	4013      	ands	r3, r2
 8004882:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8004884:	68bb      	ldr	r3, [r7, #8]
}
 8004886:	4618      	mov	r0, r3
 8004888:	3714      	adds	r7, #20
 800488a:	46bd      	mov	sp, r7
 800488c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004890:	4770      	bx	lr

08004892 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8004892:	b480      	push	{r7}
 8004894:	b087      	sub	sp, #28
 8004896:	af00      	add	r7, sp, #0
 8004898:	6078      	str	r0, [r7, #4]
 800489a:	460b      	mov	r3, r1
 800489c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 80048a2:	697b      	ldr	r3, [r7, #20]
 80048a4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80048a8:	691b      	ldr	r3, [r3, #16]
 80048aa:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 80048ac:	697b      	ldr	r3, [r7, #20]
 80048ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80048b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80048b4:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80048b6:	78fb      	ldrb	r3, [r7, #3]
 80048b8:	f003 030f 	and.w	r3, r3, #15
 80048bc:	68fa      	ldr	r2, [r7, #12]
 80048be:	fa22 f303 	lsr.w	r3, r2, r3
 80048c2:	01db      	lsls	r3, r3, #7
 80048c4:	b2db      	uxtb	r3, r3
 80048c6:	693a      	ldr	r2, [r7, #16]
 80048c8:	4313      	orrs	r3, r2
 80048ca:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80048cc:	78fb      	ldrb	r3, [r7, #3]
 80048ce:	015a      	lsls	r2, r3, #5
 80048d0:	697b      	ldr	r3, [r7, #20]
 80048d2:	4413      	add	r3, r2
 80048d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80048d8:	689b      	ldr	r3, [r3, #8]
 80048da:	693a      	ldr	r2, [r7, #16]
 80048dc:	4013      	ands	r3, r2
 80048de:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80048e0:	68bb      	ldr	r3, [r7, #8]
}
 80048e2:	4618      	mov	r0, r3
 80048e4:	371c      	adds	r7, #28
 80048e6:	46bd      	mov	sp, r7
 80048e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ec:	4770      	bx	lr

080048ee <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80048ee:	b480      	push	{r7}
 80048f0:	b083      	sub	sp, #12
 80048f2:	af00      	add	r7, sp, #0
 80048f4:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	695b      	ldr	r3, [r3, #20]
 80048fa:	f003 0301 	and.w	r3, r3, #1
}
 80048fe:	4618      	mov	r0, r3
 8004900:	370c      	adds	r7, #12
 8004902:	46bd      	mov	sp, r7
 8004904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004908:	4770      	bx	lr

0800490a <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800490a:	b480      	push	{r7}
 800490c:	b085      	sub	sp, #20
 800490e:	af00      	add	r7, sp, #0
 8004910:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	68fa      	ldr	r2, [r7, #12]
 8004920:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004924:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8004928:	f023 0307 	bic.w	r3, r3, #7
 800492c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004934:	685b      	ldr	r3, [r3, #4]
 8004936:	68fa      	ldr	r2, [r7, #12]
 8004938:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800493c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004940:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004942:	2300      	movs	r3, #0
}
 8004944:	4618      	mov	r0, r3
 8004946:	3714      	adds	r7, #20
 8004948:	46bd      	mov	sp, r7
 800494a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800494e:	4770      	bx	lr

08004950 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8004950:	b480      	push	{r7}
 8004952:	b087      	sub	sp, #28
 8004954:	af00      	add	r7, sp, #0
 8004956:	60f8      	str	r0, [r7, #12]
 8004958:	460b      	mov	r3, r1
 800495a:	607a      	str	r2, [r7, #4]
 800495c:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	333c      	adds	r3, #60	; 0x3c
 8004966:	3304      	adds	r3, #4
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800496c:	693b      	ldr	r3, [r7, #16]
 800496e:	4a26      	ldr	r2, [pc, #152]	; (8004a08 <USB_EP0_OutStart+0xb8>)
 8004970:	4293      	cmp	r3, r2
 8004972:	d90a      	bls.n	800498a <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004974:	697b      	ldr	r3, [r7, #20]
 8004976:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004980:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004984:	d101      	bne.n	800498a <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8004986:	2300      	movs	r3, #0
 8004988:	e037      	b.n	80049fa <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800498a:	697b      	ldr	r3, [r7, #20]
 800498c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004990:	461a      	mov	r2, r3
 8004992:	2300      	movs	r3, #0
 8004994:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004996:	697b      	ldr	r3, [r7, #20]
 8004998:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800499c:	691b      	ldr	r3, [r3, #16]
 800499e:	697a      	ldr	r2, [r7, #20]
 80049a0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80049a4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80049a8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 80049aa:	697b      	ldr	r3, [r7, #20]
 80049ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80049b0:	691b      	ldr	r3, [r3, #16]
 80049b2:	697a      	ldr	r2, [r7, #20]
 80049b4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80049b8:	f043 0318 	orr.w	r3, r3, #24
 80049bc:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 80049be:	697b      	ldr	r3, [r7, #20]
 80049c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80049c4:	691b      	ldr	r3, [r3, #16]
 80049c6:	697a      	ldr	r2, [r7, #20]
 80049c8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80049cc:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 80049d0:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 80049d2:	7afb      	ldrb	r3, [r7, #11]
 80049d4:	2b01      	cmp	r3, #1
 80049d6:	d10f      	bne.n	80049f8 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 80049d8:	697b      	ldr	r3, [r7, #20]
 80049da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80049de:	461a      	mov	r2, r3
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 80049e4:	697b      	ldr	r3, [r7, #20]
 80049e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	697a      	ldr	r2, [r7, #20]
 80049ee:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80049f2:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 80049f6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80049f8:	2300      	movs	r3, #0
}
 80049fa:	4618      	mov	r0, r3
 80049fc:	371c      	adds	r7, #28
 80049fe:	46bd      	mov	sp, r7
 8004a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a04:	4770      	bx	lr
 8004a06:	bf00      	nop
 8004a08:	4f54300a 	.word	0x4f54300a

08004a0c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8004a0c:	b480      	push	{r7}
 8004a0e:	b085      	sub	sp, #20
 8004a10:	af00      	add	r7, sp, #0
 8004a12:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004a14:	2300      	movs	r3, #0
 8004a16:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	3301      	adds	r3, #1
 8004a1c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	4a13      	ldr	r2, [pc, #76]	; (8004a70 <USB_CoreReset+0x64>)
 8004a22:	4293      	cmp	r3, r2
 8004a24:	d901      	bls.n	8004a2a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8004a26:	2303      	movs	r3, #3
 8004a28:	e01b      	b.n	8004a62 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	691b      	ldr	r3, [r3, #16]
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	daf2      	bge.n	8004a18 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8004a32:	2300      	movs	r3, #0
 8004a34:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	691b      	ldr	r3, [r3, #16]
 8004a3a:	f043 0201 	orr.w	r2, r3, #1
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	3301      	adds	r3, #1
 8004a46:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	4a09      	ldr	r2, [pc, #36]	; (8004a70 <USB_CoreReset+0x64>)
 8004a4c:	4293      	cmp	r3, r2
 8004a4e:	d901      	bls.n	8004a54 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8004a50:	2303      	movs	r3, #3
 8004a52:	e006      	b.n	8004a62 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	691b      	ldr	r3, [r3, #16]
 8004a58:	f003 0301 	and.w	r3, r3, #1
 8004a5c:	2b01      	cmp	r3, #1
 8004a5e:	d0f0      	beq.n	8004a42 <USB_CoreReset+0x36>

  return HAL_OK;
 8004a60:	2300      	movs	r3, #0
}
 8004a62:	4618      	mov	r0, r3
 8004a64:	3714      	adds	r7, #20
 8004a66:	46bd      	mov	sp, r7
 8004a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a6c:	4770      	bx	lr
 8004a6e:	bf00      	nop
 8004a70:	00030d40 	.word	0x00030d40

08004a74 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004a74:	b580      	push	{r7, lr}
 8004a76:	b084      	sub	sp, #16
 8004a78:	af00      	add	r7, sp, #0
 8004a7a:	6078      	str	r0, [r7, #4]
 8004a7c:	460b      	mov	r3, r1
 8004a7e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8004a80:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8004a84:	f002 fcae 	bl	80073e4 <USBD_static_malloc>
 8004a88:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d109      	bne.n	8004aa4 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	32b0      	adds	r2, #176	; 0xb0
 8004a9a:	2100      	movs	r1, #0
 8004a9c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8004aa0:	2302      	movs	r3, #2
 8004aa2:	e0d4      	b.n	8004c4e <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8004aa4:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8004aa8:	2100      	movs	r1, #0
 8004aaa:	68f8      	ldr	r0, [r7, #12]
 8004aac:	f002 fd10 	bl	80074d0 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	32b0      	adds	r2, #176	; 0xb0
 8004aba:	68f9      	ldr	r1, [r7, #12]
 8004abc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	32b0      	adds	r2, #176	; 0xb0
 8004aca:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	7c1b      	ldrb	r3, [r3, #16]
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d138      	bne.n	8004b4e <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8004adc:	4b5e      	ldr	r3, [pc, #376]	; (8004c58 <USBD_CDC_Init+0x1e4>)
 8004ade:	7819      	ldrb	r1, [r3, #0]
 8004ae0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004ae4:	2202      	movs	r2, #2
 8004ae6:	6878      	ldr	r0, [r7, #4]
 8004ae8:	f002 fb59 	bl	800719e <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8004aec:	4b5a      	ldr	r3, [pc, #360]	; (8004c58 <USBD_CDC_Init+0x1e4>)
 8004aee:	781b      	ldrb	r3, [r3, #0]
 8004af0:	f003 020f 	and.w	r2, r3, #15
 8004af4:	6879      	ldr	r1, [r7, #4]
 8004af6:	4613      	mov	r3, r2
 8004af8:	009b      	lsls	r3, r3, #2
 8004afa:	4413      	add	r3, r2
 8004afc:	009b      	lsls	r3, r3, #2
 8004afe:	440b      	add	r3, r1
 8004b00:	3324      	adds	r3, #36	; 0x24
 8004b02:	2201      	movs	r2, #1
 8004b04:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8004b06:	4b55      	ldr	r3, [pc, #340]	; (8004c5c <USBD_CDC_Init+0x1e8>)
 8004b08:	7819      	ldrb	r1, [r3, #0]
 8004b0a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004b0e:	2202      	movs	r2, #2
 8004b10:	6878      	ldr	r0, [r7, #4]
 8004b12:	f002 fb44 	bl	800719e <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8004b16:	4b51      	ldr	r3, [pc, #324]	; (8004c5c <USBD_CDC_Init+0x1e8>)
 8004b18:	781b      	ldrb	r3, [r3, #0]
 8004b1a:	f003 020f 	and.w	r2, r3, #15
 8004b1e:	6879      	ldr	r1, [r7, #4]
 8004b20:	4613      	mov	r3, r2
 8004b22:	009b      	lsls	r3, r3, #2
 8004b24:	4413      	add	r3, r2
 8004b26:	009b      	lsls	r3, r3, #2
 8004b28:	440b      	add	r3, r1
 8004b2a:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8004b2e:	2201      	movs	r2, #1
 8004b30:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8004b32:	4b4b      	ldr	r3, [pc, #300]	; (8004c60 <USBD_CDC_Init+0x1ec>)
 8004b34:	781b      	ldrb	r3, [r3, #0]
 8004b36:	f003 020f 	and.w	r2, r3, #15
 8004b3a:	6879      	ldr	r1, [r7, #4]
 8004b3c:	4613      	mov	r3, r2
 8004b3e:	009b      	lsls	r3, r3, #2
 8004b40:	4413      	add	r3, r2
 8004b42:	009b      	lsls	r3, r3, #2
 8004b44:	440b      	add	r3, r1
 8004b46:	3326      	adds	r3, #38	; 0x26
 8004b48:	2210      	movs	r2, #16
 8004b4a:	801a      	strh	r2, [r3, #0]
 8004b4c:	e035      	b.n	8004bba <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8004b4e:	4b42      	ldr	r3, [pc, #264]	; (8004c58 <USBD_CDC_Init+0x1e4>)
 8004b50:	7819      	ldrb	r1, [r3, #0]
 8004b52:	2340      	movs	r3, #64	; 0x40
 8004b54:	2202      	movs	r2, #2
 8004b56:	6878      	ldr	r0, [r7, #4]
 8004b58:	f002 fb21 	bl	800719e <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8004b5c:	4b3e      	ldr	r3, [pc, #248]	; (8004c58 <USBD_CDC_Init+0x1e4>)
 8004b5e:	781b      	ldrb	r3, [r3, #0]
 8004b60:	f003 020f 	and.w	r2, r3, #15
 8004b64:	6879      	ldr	r1, [r7, #4]
 8004b66:	4613      	mov	r3, r2
 8004b68:	009b      	lsls	r3, r3, #2
 8004b6a:	4413      	add	r3, r2
 8004b6c:	009b      	lsls	r3, r3, #2
 8004b6e:	440b      	add	r3, r1
 8004b70:	3324      	adds	r3, #36	; 0x24
 8004b72:	2201      	movs	r2, #1
 8004b74:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8004b76:	4b39      	ldr	r3, [pc, #228]	; (8004c5c <USBD_CDC_Init+0x1e8>)
 8004b78:	7819      	ldrb	r1, [r3, #0]
 8004b7a:	2340      	movs	r3, #64	; 0x40
 8004b7c:	2202      	movs	r2, #2
 8004b7e:	6878      	ldr	r0, [r7, #4]
 8004b80:	f002 fb0d 	bl	800719e <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8004b84:	4b35      	ldr	r3, [pc, #212]	; (8004c5c <USBD_CDC_Init+0x1e8>)
 8004b86:	781b      	ldrb	r3, [r3, #0]
 8004b88:	f003 020f 	and.w	r2, r3, #15
 8004b8c:	6879      	ldr	r1, [r7, #4]
 8004b8e:	4613      	mov	r3, r2
 8004b90:	009b      	lsls	r3, r3, #2
 8004b92:	4413      	add	r3, r2
 8004b94:	009b      	lsls	r3, r3, #2
 8004b96:	440b      	add	r3, r1
 8004b98:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8004b9c:	2201      	movs	r2, #1
 8004b9e:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8004ba0:	4b2f      	ldr	r3, [pc, #188]	; (8004c60 <USBD_CDC_Init+0x1ec>)
 8004ba2:	781b      	ldrb	r3, [r3, #0]
 8004ba4:	f003 020f 	and.w	r2, r3, #15
 8004ba8:	6879      	ldr	r1, [r7, #4]
 8004baa:	4613      	mov	r3, r2
 8004bac:	009b      	lsls	r3, r3, #2
 8004bae:	4413      	add	r3, r2
 8004bb0:	009b      	lsls	r3, r3, #2
 8004bb2:	440b      	add	r3, r1
 8004bb4:	3326      	adds	r3, #38	; 0x26
 8004bb6:	2210      	movs	r2, #16
 8004bb8:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8004bba:	4b29      	ldr	r3, [pc, #164]	; (8004c60 <USBD_CDC_Init+0x1ec>)
 8004bbc:	7819      	ldrb	r1, [r3, #0]
 8004bbe:	2308      	movs	r3, #8
 8004bc0:	2203      	movs	r2, #3
 8004bc2:	6878      	ldr	r0, [r7, #4]
 8004bc4:	f002 faeb 	bl	800719e <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8004bc8:	4b25      	ldr	r3, [pc, #148]	; (8004c60 <USBD_CDC_Init+0x1ec>)
 8004bca:	781b      	ldrb	r3, [r3, #0]
 8004bcc:	f003 020f 	and.w	r2, r3, #15
 8004bd0:	6879      	ldr	r1, [r7, #4]
 8004bd2:	4613      	mov	r3, r2
 8004bd4:	009b      	lsls	r3, r3, #2
 8004bd6:	4413      	add	r3, r2
 8004bd8:	009b      	lsls	r3, r3, #2
 8004bda:	440b      	add	r3, r1
 8004bdc:	3324      	adds	r3, #36	; 0x24
 8004bde:	2201      	movs	r2, #1
 8004be0:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	2200      	movs	r2, #0
 8004be6:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8004bf0:	687a      	ldr	r2, [r7, #4]
 8004bf2:	33b0      	adds	r3, #176	; 0xb0
 8004bf4:	009b      	lsls	r3, r3, #2
 8004bf6:	4413      	add	r3, r2
 8004bf8:	685b      	ldr	r3, [r3, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	2200      	movs	r2, #0
 8004c02:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	2200      	movs	r2, #0
 8004c0a:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d101      	bne.n	8004c1c <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8004c18:	2302      	movs	r3, #2
 8004c1a:	e018      	b.n	8004c4e <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	7c1b      	ldrb	r3, [r3, #16]
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d10a      	bne.n	8004c3a <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8004c24:	4b0d      	ldr	r3, [pc, #52]	; (8004c5c <USBD_CDC_Init+0x1e8>)
 8004c26:	7819      	ldrb	r1, [r3, #0]
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8004c2e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004c32:	6878      	ldr	r0, [r7, #4]
 8004c34:	f002 fba2 	bl	800737c <USBD_LL_PrepareReceive>
 8004c38:	e008      	b.n	8004c4c <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8004c3a:	4b08      	ldr	r3, [pc, #32]	; (8004c5c <USBD_CDC_Init+0x1e8>)
 8004c3c:	7819      	ldrb	r1, [r3, #0]
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8004c44:	2340      	movs	r3, #64	; 0x40
 8004c46:	6878      	ldr	r0, [r7, #4]
 8004c48:	f002 fb98 	bl	800737c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8004c4c:	2300      	movs	r3, #0
}
 8004c4e:	4618      	mov	r0, r3
 8004c50:	3710      	adds	r7, #16
 8004c52:	46bd      	mov	sp, r7
 8004c54:	bd80      	pop	{r7, pc}
 8004c56:	bf00      	nop
 8004c58:	20000093 	.word	0x20000093
 8004c5c:	20000094 	.word	0x20000094
 8004c60:	20000095 	.word	0x20000095

08004c64 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004c64:	b580      	push	{r7, lr}
 8004c66:	b082      	sub	sp, #8
 8004c68:	af00      	add	r7, sp, #0
 8004c6a:	6078      	str	r0, [r7, #4]
 8004c6c:	460b      	mov	r3, r1
 8004c6e:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8004c70:	4b3a      	ldr	r3, [pc, #232]	; (8004d5c <USBD_CDC_DeInit+0xf8>)
 8004c72:	781b      	ldrb	r3, [r3, #0]
 8004c74:	4619      	mov	r1, r3
 8004c76:	6878      	ldr	r0, [r7, #4]
 8004c78:	f002 fab7 	bl	80071ea <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8004c7c:	4b37      	ldr	r3, [pc, #220]	; (8004d5c <USBD_CDC_DeInit+0xf8>)
 8004c7e:	781b      	ldrb	r3, [r3, #0]
 8004c80:	f003 020f 	and.w	r2, r3, #15
 8004c84:	6879      	ldr	r1, [r7, #4]
 8004c86:	4613      	mov	r3, r2
 8004c88:	009b      	lsls	r3, r3, #2
 8004c8a:	4413      	add	r3, r2
 8004c8c:	009b      	lsls	r3, r3, #2
 8004c8e:	440b      	add	r3, r1
 8004c90:	3324      	adds	r3, #36	; 0x24
 8004c92:	2200      	movs	r2, #0
 8004c94:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8004c96:	4b32      	ldr	r3, [pc, #200]	; (8004d60 <USBD_CDC_DeInit+0xfc>)
 8004c98:	781b      	ldrb	r3, [r3, #0]
 8004c9a:	4619      	mov	r1, r3
 8004c9c:	6878      	ldr	r0, [r7, #4]
 8004c9e:	f002 faa4 	bl	80071ea <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8004ca2:	4b2f      	ldr	r3, [pc, #188]	; (8004d60 <USBD_CDC_DeInit+0xfc>)
 8004ca4:	781b      	ldrb	r3, [r3, #0]
 8004ca6:	f003 020f 	and.w	r2, r3, #15
 8004caa:	6879      	ldr	r1, [r7, #4]
 8004cac:	4613      	mov	r3, r2
 8004cae:	009b      	lsls	r3, r3, #2
 8004cb0:	4413      	add	r3, r2
 8004cb2:	009b      	lsls	r3, r3, #2
 8004cb4:	440b      	add	r3, r1
 8004cb6:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8004cba:	2200      	movs	r2, #0
 8004cbc:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8004cbe:	4b29      	ldr	r3, [pc, #164]	; (8004d64 <USBD_CDC_DeInit+0x100>)
 8004cc0:	781b      	ldrb	r3, [r3, #0]
 8004cc2:	4619      	mov	r1, r3
 8004cc4:	6878      	ldr	r0, [r7, #4]
 8004cc6:	f002 fa90 	bl	80071ea <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8004cca:	4b26      	ldr	r3, [pc, #152]	; (8004d64 <USBD_CDC_DeInit+0x100>)
 8004ccc:	781b      	ldrb	r3, [r3, #0]
 8004cce:	f003 020f 	and.w	r2, r3, #15
 8004cd2:	6879      	ldr	r1, [r7, #4]
 8004cd4:	4613      	mov	r3, r2
 8004cd6:	009b      	lsls	r3, r3, #2
 8004cd8:	4413      	add	r3, r2
 8004cda:	009b      	lsls	r3, r3, #2
 8004cdc:	440b      	add	r3, r1
 8004cde:	3324      	adds	r3, #36	; 0x24
 8004ce0:	2200      	movs	r2, #0
 8004ce2:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8004ce4:	4b1f      	ldr	r3, [pc, #124]	; (8004d64 <USBD_CDC_DeInit+0x100>)
 8004ce6:	781b      	ldrb	r3, [r3, #0]
 8004ce8:	f003 020f 	and.w	r2, r3, #15
 8004cec:	6879      	ldr	r1, [r7, #4]
 8004cee:	4613      	mov	r3, r2
 8004cf0:	009b      	lsls	r3, r3, #2
 8004cf2:	4413      	add	r3, r2
 8004cf4:	009b      	lsls	r3, r3, #2
 8004cf6:	440b      	add	r3, r1
 8004cf8:	3326      	adds	r3, #38	; 0x26
 8004cfa:	2200      	movs	r2, #0
 8004cfc:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	32b0      	adds	r2, #176	; 0xb0
 8004d08:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	d01f      	beq.n	8004d50 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8004d16:	687a      	ldr	r2, [r7, #4]
 8004d18:	33b0      	adds	r3, #176	; 0xb0
 8004d1a:	009b      	lsls	r3, r3, #2
 8004d1c:	4413      	add	r3, r2
 8004d1e:	685b      	ldr	r3, [r3, #4]
 8004d20:	685b      	ldr	r3, [r3, #4]
 8004d22:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	32b0      	adds	r2, #176	; 0xb0
 8004d2e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004d32:	4618      	mov	r0, r3
 8004d34:	f002 fb64 	bl	8007400 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	32b0      	adds	r2, #176	; 0xb0
 8004d42:	2100      	movs	r1, #0
 8004d44:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	2200      	movs	r2, #0
 8004d4c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8004d50:	2300      	movs	r3, #0
}
 8004d52:	4618      	mov	r0, r3
 8004d54:	3708      	adds	r7, #8
 8004d56:	46bd      	mov	sp, r7
 8004d58:	bd80      	pop	{r7, pc}
 8004d5a:	bf00      	nop
 8004d5c:	20000093 	.word	0x20000093
 8004d60:	20000094 	.word	0x20000094
 8004d64:	20000095 	.word	0x20000095

08004d68 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8004d68:	b580      	push	{r7, lr}
 8004d6a:	b086      	sub	sp, #24
 8004d6c:	af00      	add	r7, sp, #0
 8004d6e:	6078      	str	r0, [r7, #4]
 8004d70:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	32b0      	adds	r2, #176	; 0xb0
 8004d7c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004d80:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8004d82:	2300      	movs	r3, #0
 8004d84:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8004d86:	2300      	movs	r3, #0
 8004d88:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8004d8a:	2300      	movs	r3, #0
 8004d8c:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8004d8e:	693b      	ldr	r3, [r7, #16]
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d101      	bne.n	8004d98 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8004d94:	2303      	movs	r3, #3
 8004d96:	e0bf      	b.n	8004f18 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8004d98:	683b      	ldr	r3, [r7, #0]
 8004d9a:	781b      	ldrb	r3, [r3, #0]
 8004d9c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	d050      	beq.n	8004e46 <USBD_CDC_Setup+0xde>
 8004da4:	2b20      	cmp	r3, #32
 8004da6:	f040 80af 	bne.w	8004f08 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8004daa:	683b      	ldr	r3, [r7, #0]
 8004dac:	88db      	ldrh	r3, [r3, #6]
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d03a      	beq.n	8004e28 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8004db2:	683b      	ldr	r3, [r7, #0]
 8004db4:	781b      	ldrb	r3, [r3, #0]
 8004db6:	b25b      	sxtb	r3, r3
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	da1b      	bge.n	8004df4 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8004dc2:	687a      	ldr	r2, [r7, #4]
 8004dc4:	33b0      	adds	r3, #176	; 0xb0
 8004dc6:	009b      	lsls	r3, r3, #2
 8004dc8:	4413      	add	r3, r2
 8004dca:	685b      	ldr	r3, [r3, #4]
 8004dcc:	689b      	ldr	r3, [r3, #8]
 8004dce:	683a      	ldr	r2, [r7, #0]
 8004dd0:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8004dd2:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8004dd4:	683a      	ldr	r2, [r7, #0]
 8004dd6:	88d2      	ldrh	r2, [r2, #6]
 8004dd8:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8004dda:	683b      	ldr	r3, [r7, #0]
 8004ddc:	88db      	ldrh	r3, [r3, #6]
 8004dde:	2b07      	cmp	r3, #7
 8004de0:	bf28      	it	cs
 8004de2:	2307      	movcs	r3, #7
 8004de4:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8004de6:	693b      	ldr	r3, [r7, #16]
 8004de8:	89fa      	ldrh	r2, [r7, #14]
 8004dea:	4619      	mov	r1, r3
 8004dec:	6878      	ldr	r0, [r7, #4]
 8004dee:	f001 fd89 	bl	8006904 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8004df2:	e090      	b.n	8004f16 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8004df4:	683b      	ldr	r3, [r7, #0]
 8004df6:	785a      	ldrb	r2, [r3, #1]
 8004df8:	693b      	ldr	r3, [r7, #16]
 8004dfa:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8004dfe:	683b      	ldr	r3, [r7, #0]
 8004e00:	88db      	ldrh	r3, [r3, #6]
 8004e02:	2b3f      	cmp	r3, #63	; 0x3f
 8004e04:	d803      	bhi.n	8004e0e <USBD_CDC_Setup+0xa6>
 8004e06:	683b      	ldr	r3, [r7, #0]
 8004e08:	88db      	ldrh	r3, [r3, #6]
 8004e0a:	b2da      	uxtb	r2, r3
 8004e0c:	e000      	b.n	8004e10 <USBD_CDC_Setup+0xa8>
 8004e0e:	2240      	movs	r2, #64	; 0x40
 8004e10:	693b      	ldr	r3, [r7, #16]
 8004e12:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8004e16:	6939      	ldr	r1, [r7, #16]
 8004e18:	693b      	ldr	r3, [r7, #16]
 8004e1a:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 8004e1e:	461a      	mov	r2, r3
 8004e20:	6878      	ldr	r0, [r7, #4]
 8004e22:	f001 fd9b 	bl	800695c <USBD_CtlPrepareRx>
      break;
 8004e26:	e076      	b.n	8004f16 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8004e2e:	687a      	ldr	r2, [r7, #4]
 8004e30:	33b0      	adds	r3, #176	; 0xb0
 8004e32:	009b      	lsls	r3, r3, #2
 8004e34:	4413      	add	r3, r2
 8004e36:	685b      	ldr	r3, [r3, #4]
 8004e38:	689b      	ldr	r3, [r3, #8]
 8004e3a:	683a      	ldr	r2, [r7, #0]
 8004e3c:	7850      	ldrb	r0, [r2, #1]
 8004e3e:	2200      	movs	r2, #0
 8004e40:	6839      	ldr	r1, [r7, #0]
 8004e42:	4798      	blx	r3
      break;
 8004e44:	e067      	b.n	8004f16 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8004e46:	683b      	ldr	r3, [r7, #0]
 8004e48:	785b      	ldrb	r3, [r3, #1]
 8004e4a:	2b0b      	cmp	r3, #11
 8004e4c:	d851      	bhi.n	8004ef2 <USBD_CDC_Setup+0x18a>
 8004e4e:	a201      	add	r2, pc, #4	; (adr r2, 8004e54 <USBD_CDC_Setup+0xec>)
 8004e50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e54:	08004e85 	.word	0x08004e85
 8004e58:	08004f01 	.word	0x08004f01
 8004e5c:	08004ef3 	.word	0x08004ef3
 8004e60:	08004ef3 	.word	0x08004ef3
 8004e64:	08004ef3 	.word	0x08004ef3
 8004e68:	08004ef3 	.word	0x08004ef3
 8004e6c:	08004ef3 	.word	0x08004ef3
 8004e70:	08004ef3 	.word	0x08004ef3
 8004e74:	08004ef3 	.word	0x08004ef3
 8004e78:	08004ef3 	.word	0x08004ef3
 8004e7c:	08004eaf 	.word	0x08004eaf
 8004e80:	08004ed9 	.word	0x08004ed9
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004e8a:	b2db      	uxtb	r3, r3
 8004e8c:	2b03      	cmp	r3, #3
 8004e8e:	d107      	bne.n	8004ea0 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8004e90:	f107 030a 	add.w	r3, r7, #10
 8004e94:	2202      	movs	r2, #2
 8004e96:	4619      	mov	r1, r3
 8004e98:	6878      	ldr	r0, [r7, #4]
 8004e9a:	f001 fd33 	bl	8006904 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8004e9e:	e032      	b.n	8004f06 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8004ea0:	6839      	ldr	r1, [r7, #0]
 8004ea2:	6878      	ldr	r0, [r7, #4]
 8004ea4:	f001 fcbd 	bl	8006822 <USBD_CtlError>
            ret = USBD_FAIL;
 8004ea8:	2303      	movs	r3, #3
 8004eaa:	75fb      	strb	r3, [r7, #23]
          break;
 8004eac:	e02b      	b.n	8004f06 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004eb4:	b2db      	uxtb	r3, r3
 8004eb6:	2b03      	cmp	r3, #3
 8004eb8:	d107      	bne.n	8004eca <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8004eba:	f107 030d 	add.w	r3, r7, #13
 8004ebe:	2201      	movs	r2, #1
 8004ec0:	4619      	mov	r1, r3
 8004ec2:	6878      	ldr	r0, [r7, #4]
 8004ec4:	f001 fd1e 	bl	8006904 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8004ec8:	e01d      	b.n	8004f06 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8004eca:	6839      	ldr	r1, [r7, #0]
 8004ecc:	6878      	ldr	r0, [r7, #4]
 8004ece:	f001 fca8 	bl	8006822 <USBD_CtlError>
            ret = USBD_FAIL;
 8004ed2:	2303      	movs	r3, #3
 8004ed4:	75fb      	strb	r3, [r7, #23]
          break;
 8004ed6:	e016      	b.n	8004f06 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004ede:	b2db      	uxtb	r3, r3
 8004ee0:	2b03      	cmp	r3, #3
 8004ee2:	d00f      	beq.n	8004f04 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8004ee4:	6839      	ldr	r1, [r7, #0]
 8004ee6:	6878      	ldr	r0, [r7, #4]
 8004ee8:	f001 fc9b 	bl	8006822 <USBD_CtlError>
            ret = USBD_FAIL;
 8004eec:	2303      	movs	r3, #3
 8004eee:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8004ef0:	e008      	b.n	8004f04 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8004ef2:	6839      	ldr	r1, [r7, #0]
 8004ef4:	6878      	ldr	r0, [r7, #4]
 8004ef6:	f001 fc94 	bl	8006822 <USBD_CtlError>
          ret = USBD_FAIL;
 8004efa:	2303      	movs	r3, #3
 8004efc:	75fb      	strb	r3, [r7, #23]
          break;
 8004efe:	e002      	b.n	8004f06 <USBD_CDC_Setup+0x19e>
          break;
 8004f00:	bf00      	nop
 8004f02:	e008      	b.n	8004f16 <USBD_CDC_Setup+0x1ae>
          break;
 8004f04:	bf00      	nop
      }
      break;
 8004f06:	e006      	b.n	8004f16 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8004f08:	6839      	ldr	r1, [r7, #0]
 8004f0a:	6878      	ldr	r0, [r7, #4]
 8004f0c:	f001 fc89 	bl	8006822 <USBD_CtlError>
      ret = USBD_FAIL;
 8004f10:	2303      	movs	r3, #3
 8004f12:	75fb      	strb	r3, [r7, #23]
      break;
 8004f14:	bf00      	nop
  }

  return (uint8_t)ret;
 8004f16:	7dfb      	ldrb	r3, [r7, #23]
}
 8004f18:	4618      	mov	r0, r3
 8004f1a:	3718      	adds	r7, #24
 8004f1c:	46bd      	mov	sp, r7
 8004f1e:	bd80      	pop	{r7, pc}

08004f20 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8004f20:	b580      	push	{r7, lr}
 8004f22:	b084      	sub	sp, #16
 8004f24:	af00      	add	r7, sp, #0
 8004f26:	6078      	str	r0, [r7, #4]
 8004f28:	460b      	mov	r3, r1
 8004f2a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8004f32:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	32b0      	adds	r2, #176	; 0xb0
 8004f3e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d101      	bne.n	8004f4a <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8004f46:	2303      	movs	r3, #3
 8004f48:	e065      	b.n	8005016 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	32b0      	adds	r2, #176	; 0xb0
 8004f54:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004f58:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8004f5a:	78fb      	ldrb	r3, [r7, #3]
 8004f5c:	f003 020f 	and.w	r2, r3, #15
 8004f60:	6879      	ldr	r1, [r7, #4]
 8004f62:	4613      	mov	r3, r2
 8004f64:	009b      	lsls	r3, r3, #2
 8004f66:	4413      	add	r3, r2
 8004f68:	009b      	lsls	r3, r3, #2
 8004f6a:	440b      	add	r3, r1
 8004f6c:	3318      	adds	r3, #24
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d02f      	beq.n	8004fd4 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8004f74:	78fb      	ldrb	r3, [r7, #3]
 8004f76:	f003 020f 	and.w	r2, r3, #15
 8004f7a:	6879      	ldr	r1, [r7, #4]
 8004f7c:	4613      	mov	r3, r2
 8004f7e:	009b      	lsls	r3, r3, #2
 8004f80:	4413      	add	r3, r2
 8004f82:	009b      	lsls	r3, r3, #2
 8004f84:	440b      	add	r3, r1
 8004f86:	3318      	adds	r3, #24
 8004f88:	681a      	ldr	r2, [r3, #0]
 8004f8a:	78fb      	ldrb	r3, [r7, #3]
 8004f8c:	f003 010f 	and.w	r1, r3, #15
 8004f90:	68f8      	ldr	r0, [r7, #12]
 8004f92:	460b      	mov	r3, r1
 8004f94:	00db      	lsls	r3, r3, #3
 8004f96:	440b      	add	r3, r1
 8004f98:	009b      	lsls	r3, r3, #2
 8004f9a:	4403      	add	r3, r0
 8004f9c:	3348      	adds	r3, #72	; 0x48
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	fbb2 f1f3 	udiv	r1, r2, r3
 8004fa4:	fb01 f303 	mul.w	r3, r1, r3
 8004fa8:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d112      	bne.n	8004fd4 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8004fae:	78fb      	ldrb	r3, [r7, #3]
 8004fb0:	f003 020f 	and.w	r2, r3, #15
 8004fb4:	6879      	ldr	r1, [r7, #4]
 8004fb6:	4613      	mov	r3, r2
 8004fb8:	009b      	lsls	r3, r3, #2
 8004fba:	4413      	add	r3, r2
 8004fbc:	009b      	lsls	r3, r3, #2
 8004fbe:	440b      	add	r3, r1
 8004fc0:	3318      	adds	r3, #24
 8004fc2:	2200      	movs	r2, #0
 8004fc4:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8004fc6:	78f9      	ldrb	r1, [r7, #3]
 8004fc8:	2300      	movs	r3, #0
 8004fca:	2200      	movs	r2, #0
 8004fcc:	6878      	ldr	r0, [r7, #4]
 8004fce:	f002 f9b4 	bl	800733a <USBD_LL_Transmit>
 8004fd2:	e01f      	b.n	8005014 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8004fd4:	68bb      	ldr	r3, [r7, #8]
 8004fd6:	2200      	movs	r2, #0
 8004fd8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8004fe2:	687a      	ldr	r2, [r7, #4]
 8004fe4:	33b0      	adds	r3, #176	; 0xb0
 8004fe6:	009b      	lsls	r3, r3, #2
 8004fe8:	4413      	add	r3, r2
 8004fea:	685b      	ldr	r3, [r3, #4]
 8004fec:	691b      	ldr	r3, [r3, #16]
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d010      	beq.n	8005014 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8004ff8:	687a      	ldr	r2, [r7, #4]
 8004ffa:	33b0      	adds	r3, #176	; 0xb0
 8004ffc:	009b      	lsls	r3, r3, #2
 8004ffe:	4413      	add	r3, r2
 8005000:	685b      	ldr	r3, [r3, #4]
 8005002:	691b      	ldr	r3, [r3, #16]
 8005004:	68ba      	ldr	r2, [r7, #8]
 8005006:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800500a:	68ba      	ldr	r2, [r7, #8]
 800500c:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8005010:	78fa      	ldrb	r2, [r7, #3]
 8005012:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8005014:	2300      	movs	r3, #0
}
 8005016:	4618      	mov	r0, r3
 8005018:	3710      	adds	r7, #16
 800501a:	46bd      	mov	sp, r7
 800501c:	bd80      	pop	{r7, pc}

0800501e <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800501e:	b580      	push	{r7, lr}
 8005020:	b084      	sub	sp, #16
 8005022:	af00      	add	r7, sp, #0
 8005024:	6078      	str	r0, [r7, #4]
 8005026:	460b      	mov	r3, r1
 8005028:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	32b0      	adds	r2, #176	; 0xb0
 8005034:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005038:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	32b0      	adds	r2, #176	; 0xb0
 8005044:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005048:	2b00      	cmp	r3, #0
 800504a:	d101      	bne.n	8005050 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800504c:	2303      	movs	r3, #3
 800504e:	e01a      	b.n	8005086 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8005050:	78fb      	ldrb	r3, [r7, #3]
 8005052:	4619      	mov	r1, r3
 8005054:	6878      	ldr	r0, [r7, #4]
 8005056:	f002 f9b2 	bl	80073be <USBD_LL_GetRxDataSize>
 800505a:	4602      	mov	r2, r0
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005068:	687a      	ldr	r2, [r7, #4]
 800506a:	33b0      	adds	r3, #176	; 0xb0
 800506c:	009b      	lsls	r3, r3, #2
 800506e:	4413      	add	r3, r2
 8005070:	685b      	ldr	r3, [r3, #4]
 8005072:	68db      	ldr	r3, [r3, #12]
 8005074:	68fa      	ldr	r2, [r7, #12]
 8005076:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800507a:	68fa      	ldr	r2, [r7, #12]
 800507c:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8005080:	4611      	mov	r1, r2
 8005082:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8005084:	2300      	movs	r3, #0
}
 8005086:	4618      	mov	r0, r3
 8005088:	3710      	adds	r7, #16
 800508a:	46bd      	mov	sp, r7
 800508c:	bd80      	pop	{r7, pc}

0800508e <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800508e:	b580      	push	{r7, lr}
 8005090:	b084      	sub	sp, #16
 8005092:	af00      	add	r7, sp, #0
 8005094:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	32b0      	adds	r2, #176	; 0xb0
 80050a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80050a4:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d101      	bne.n	80050b0 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80050ac:	2303      	movs	r3, #3
 80050ae:	e025      	b.n	80050fc <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80050b6:	687a      	ldr	r2, [r7, #4]
 80050b8:	33b0      	adds	r3, #176	; 0xb0
 80050ba:	009b      	lsls	r3, r3, #2
 80050bc:	4413      	add	r3, r2
 80050be:	685b      	ldr	r3, [r3, #4]
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d01a      	beq.n	80050fa <USBD_CDC_EP0_RxReady+0x6c>
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80050ca:	2bff      	cmp	r3, #255	; 0xff
 80050cc:	d015      	beq.n	80050fa <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80050d4:	687a      	ldr	r2, [r7, #4]
 80050d6:	33b0      	adds	r3, #176	; 0xb0
 80050d8:	009b      	lsls	r3, r3, #2
 80050da:	4413      	add	r3, r2
 80050dc:	685b      	ldr	r3, [r3, #4]
 80050de:	689b      	ldr	r3, [r3, #8]
 80050e0:	68fa      	ldr	r2, [r7, #12]
 80050e2:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 80050e6:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 80050e8:	68fa      	ldr	r2, [r7, #12]
 80050ea:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 80050ee:	b292      	uxth	r2, r2
 80050f0:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	22ff      	movs	r2, #255	; 0xff
 80050f6:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 80050fa:	2300      	movs	r3, #0
}
 80050fc:	4618      	mov	r0, r3
 80050fe:	3710      	adds	r7, #16
 8005100:	46bd      	mov	sp, r7
 8005102:	bd80      	pop	{r7, pc}

08005104 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8005104:	b580      	push	{r7, lr}
 8005106:	b086      	sub	sp, #24
 8005108:	af00      	add	r7, sp, #0
 800510a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800510c:	2182      	movs	r1, #130	; 0x82
 800510e:	4818      	ldr	r0, [pc, #96]	; (8005170 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8005110:	f000 fd4f 	bl	8005bb2 <USBD_GetEpDesc>
 8005114:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8005116:	2101      	movs	r1, #1
 8005118:	4815      	ldr	r0, [pc, #84]	; (8005170 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800511a:	f000 fd4a 	bl	8005bb2 <USBD_GetEpDesc>
 800511e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8005120:	2181      	movs	r1, #129	; 0x81
 8005122:	4813      	ldr	r0, [pc, #76]	; (8005170 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8005124:	f000 fd45 	bl	8005bb2 <USBD_GetEpDesc>
 8005128:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800512a:	697b      	ldr	r3, [r7, #20]
 800512c:	2b00      	cmp	r3, #0
 800512e:	d002      	beq.n	8005136 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8005130:	697b      	ldr	r3, [r7, #20]
 8005132:	2210      	movs	r2, #16
 8005134:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8005136:	693b      	ldr	r3, [r7, #16]
 8005138:	2b00      	cmp	r3, #0
 800513a:	d006      	beq.n	800514a <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800513c:	693b      	ldr	r3, [r7, #16]
 800513e:	2200      	movs	r2, #0
 8005140:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005144:	711a      	strb	r2, [r3, #4]
 8005146:	2200      	movs	r2, #0
 8005148:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	2b00      	cmp	r3, #0
 800514e:	d006      	beq.n	800515e <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	2200      	movs	r2, #0
 8005154:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005158:	711a      	strb	r2, [r3, #4]
 800515a:	2200      	movs	r2, #0
 800515c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	2243      	movs	r2, #67	; 0x43
 8005162:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8005164:	4b02      	ldr	r3, [pc, #8]	; (8005170 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8005166:	4618      	mov	r0, r3
 8005168:	3718      	adds	r7, #24
 800516a:	46bd      	mov	sp, r7
 800516c:	bd80      	pop	{r7, pc}
 800516e:	bf00      	nop
 8005170:	20000050 	.word	0x20000050

08005174 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8005174:	b580      	push	{r7, lr}
 8005176:	b086      	sub	sp, #24
 8005178:	af00      	add	r7, sp, #0
 800517a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800517c:	2182      	movs	r1, #130	; 0x82
 800517e:	4818      	ldr	r0, [pc, #96]	; (80051e0 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8005180:	f000 fd17 	bl	8005bb2 <USBD_GetEpDesc>
 8005184:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8005186:	2101      	movs	r1, #1
 8005188:	4815      	ldr	r0, [pc, #84]	; (80051e0 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800518a:	f000 fd12 	bl	8005bb2 <USBD_GetEpDesc>
 800518e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8005190:	2181      	movs	r1, #129	; 0x81
 8005192:	4813      	ldr	r0, [pc, #76]	; (80051e0 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8005194:	f000 fd0d 	bl	8005bb2 <USBD_GetEpDesc>
 8005198:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800519a:	697b      	ldr	r3, [r7, #20]
 800519c:	2b00      	cmp	r3, #0
 800519e:	d002      	beq.n	80051a6 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 80051a0:	697b      	ldr	r3, [r7, #20]
 80051a2:	2210      	movs	r2, #16
 80051a4:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80051a6:	693b      	ldr	r3, [r7, #16]
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d006      	beq.n	80051ba <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 80051ac:	693b      	ldr	r3, [r7, #16]
 80051ae:	2200      	movs	r2, #0
 80051b0:	711a      	strb	r2, [r3, #4]
 80051b2:	2200      	movs	r2, #0
 80051b4:	f042 0202 	orr.w	r2, r2, #2
 80051b8:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d006      	beq.n	80051ce <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	2200      	movs	r2, #0
 80051c4:	711a      	strb	r2, [r3, #4]
 80051c6:	2200      	movs	r2, #0
 80051c8:	f042 0202 	orr.w	r2, r2, #2
 80051cc:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	2243      	movs	r2, #67	; 0x43
 80051d2:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80051d4:	4b02      	ldr	r3, [pc, #8]	; (80051e0 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 80051d6:	4618      	mov	r0, r3
 80051d8:	3718      	adds	r7, #24
 80051da:	46bd      	mov	sp, r7
 80051dc:	bd80      	pop	{r7, pc}
 80051de:	bf00      	nop
 80051e0:	20000050 	.word	0x20000050

080051e4 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80051e4:	b580      	push	{r7, lr}
 80051e6:	b086      	sub	sp, #24
 80051e8:	af00      	add	r7, sp, #0
 80051ea:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80051ec:	2182      	movs	r1, #130	; 0x82
 80051ee:	4818      	ldr	r0, [pc, #96]	; (8005250 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80051f0:	f000 fcdf 	bl	8005bb2 <USBD_GetEpDesc>
 80051f4:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80051f6:	2101      	movs	r1, #1
 80051f8:	4815      	ldr	r0, [pc, #84]	; (8005250 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80051fa:	f000 fcda 	bl	8005bb2 <USBD_GetEpDesc>
 80051fe:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8005200:	2181      	movs	r1, #129	; 0x81
 8005202:	4813      	ldr	r0, [pc, #76]	; (8005250 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8005204:	f000 fcd5 	bl	8005bb2 <USBD_GetEpDesc>
 8005208:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800520a:	697b      	ldr	r3, [r7, #20]
 800520c:	2b00      	cmp	r3, #0
 800520e:	d002      	beq.n	8005216 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8005210:	697b      	ldr	r3, [r7, #20]
 8005212:	2210      	movs	r2, #16
 8005214:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8005216:	693b      	ldr	r3, [r7, #16]
 8005218:	2b00      	cmp	r3, #0
 800521a:	d006      	beq.n	800522a <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800521c:	693b      	ldr	r3, [r7, #16]
 800521e:	2200      	movs	r2, #0
 8005220:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005224:	711a      	strb	r2, [r3, #4]
 8005226:	2200      	movs	r2, #0
 8005228:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	2b00      	cmp	r3, #0
 800522e:	d006      	beq.n	800523e <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	2200      	movs	r2, #0
 8005234:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005238:	711a      	strb	r2, [r3, #4]
 800523a:	2200      	movs	r2, #0
 800523c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	2243      	movs	r2, #67	; 0x43
 8005242:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8005244:	4b02      	ldr	r3, [pc, #8]	; (8005250 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8005246:	4618      	mov	r0, r3
 8005248:	3718      	adds	r7, #24
 800524a:	46bd      	mov	sp, r7
 800524c:	bd80      	pop	{r7, pc}
 800524e:	bf00      	nop
 8005250:	20000050 	.word	0x20000050

08005254 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8005254:	b480      	push	{r7}
 8005256:	b083      	sub	sp, #12
 8005258:	af00      	add	r7, sp, #0
 800525a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	220a      	movs	r2, #10
 8005260:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8005262:	4b03      	ldr	r3, [pc, #12]	; (8005270 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8005264:	4618      	mov	r0, r3
 8005266:	370c      	adds	r7, #12
 8005268:	46bd      	mov	sp, r7
 800526a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800526e:	4770      	bx	lr
 8005270:	2000000c 	.word	0x2000000c

08005274 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8005274:	b480      	push	{r7}
 8005276:	b083      	sub	sp, #12
 8005278:	af00      	add	r7, sp, #0
 800527a:	6078      	str	r0, [r7, #4]
 800527c:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800527e:	683b      	ldr	r3, [r7, #0]
 8005280:	2b00      	cmp	r3, #0
 8005282:	d101      	bne.n	8005288 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8005284:	2303      	movs	r3, #3
 8005286:	e009      	b.n	800529c <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800528e:	687a      	ldr	r2, [r7, #4]
 8005290:	33b0      	adds	r3, #176	; 0xb0
 8005292:	009b      	lsls	r3, r3, #2
 8005294:	4413      	add	r3, r2
 8005296:	683a      	ldr	r2, [r7, #0]
 8005298:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800529a:	2300      	movs	r3, #0
}
 800529c:	4618      	mov	r0, r3
 800529e:	370c      	adds	r7, #12
 80052a0:	46bd      	mov	sp, r7
 80052a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052a6:	4770      	bx	lr

080052a8 <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 80052a8:	b480      	push	{r7}
 80052aa:	b087      	sub	sp, #28
 80052ac:	af00      	add	r7, sp, #0
 80052ae:	60f8      	str	r0, [r7, #12]
 80052b0:	60b9      	str	r1, [r7, #8]
 80052b2:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	32b0      	adds	r2, #176	; 0xb0
 80052be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80052c2:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 80052c4:	697b      	ldr	r3, [r7, #20]
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d101      	bne.n	80052ce <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 80052ca:	2303      	movs	r3, #3
 80052cc:	e008      	b.n	80052e0 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 80052ce:	697b      	ldr	r3, [r7, #20]
 80052d0:	68ba      	ldr	r2, [r7, #8]
 80052d2:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 80052d6:	697b      	ldr	r3, [r7, #20]
 80052d8:	687a      	ldr	r2, [r7, #4]
 80052da:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 80052de:	2300      	movs	r3, #0
}
 80052e0:	4618      	mov	r0, r3
 80052e2:	371c      	adds	r7, #28
 80052e4:	46bd      	mov	sp, r7
 80052e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ea:	4770      	bx	lr

080052ec <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 80052ec:	b480      	push	{r7}
 80052ee:	b085      	sub	sp, #20
 80052f0:	af00      	add	r7, sp, #0
 80052f2:	6078      	str	r0, [r7, #4]
 80052f4:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	32b0      	adds	r2, #176	; 0xb0
 8005300:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005304:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	2b00      	cmp	r3, #0
 800530a:	d101      	bne.n	8005310 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800530c:	2303      	movs	r3, #3
 800530e:	e004      	b.n	800531a <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	683a      	ldr	r2, [r7, #0]
 8005314:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8005318:	2300      	movs	r3, #0
}
 800531a:	4618      	mov	r0, r3
 800531c:	3714      	adds	r7, #20
 800531e:	46bd      	mov	sp, r7
 8005320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005324:	4770      	bx	lr
	...

08005328 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8005328:	b580      	push	{r7, lr}
 800532a:	b084      	sub	sp, #16
 800532c:	af00      	add	r7, sp, #0
 800532e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	32b0      	adds	r2, #176	; 0xb0
 800533a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800533e:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 8005340:	2301      	movs	r3, #1
 8005342:	73fb      	strb	r3, [r7, #15]

#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */
  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	32b0      	adds	r2, #176	; 0xb0
 800534e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005352:	2b00      	cmp	r3, #0
 8005354:	d101      	bne.n	800535a <USBD_CDC_TransmitPacket+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8005356:	2303      	movs	r3, #3
 8005358:	e025      	b.n	80053a6 <USBD_CDC_TransmitPacket+0x7e>
  }

  if (hcdc->TxState == 0U)
 800535a:	68bb      	ldr	r3, [r7, #8]
 800535c:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8005360:	2b00      	cmp	r3, #0
 8005362:	d11f      	bne.n	80053a4 <USBD_CDC_TransmitPacket+0x7c>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8005364:	68bb      	ldr	r3, [r7, #8]
 8005366:	2201      	movs	r2, #1
 8005368:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 800536c:	4b10      	ldr	r3, [pc, #64]	; (80053b0 <USBD_CDC_TransmitPacket+0x88>)
 800536e:	781b      	ldrb	r3, [r3, #0]
 8005370:	f003 020f 	and.w	r2, r3, #15
 8005374:	68bb      	ldr	r3, [r7, #8]
 8005376:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 800537a:	6878      	ldr	r0, [r7, #4]
 800537c:	4613      	mov	r3, r2
 800537e:	009b      	lsls	r3, r3, #2
 8005380:	4413      	add	r3, r2
 8005382:	009b      	lsls	r3, r3, #2
 8005384:	4403      	add	r3, r0
 8005386:	3318      	adds	r3, #24
 8005388:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 800538a:	4b09      	ldr	r3, [pc, #36]	; (80053b0 <USBD_CDC_TransmitPacket+0x88>)
 800538c:	7819      	ldrb	r1, [r3, #0]
 800538e:	68bb      	ldr	r3, [r7, #8]
 8005390:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8005394:	68bb      	ldr	r3, [r7, #8]
 8005396:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800539a:	6878      	ldr	r0, [r7, #4]
 800539c:	f001 ffcd 	bl	800733a <USBD_LL_Transmit>

    ret = USBD_OK;
 80053a0:	2300      	movs	r3, #0
 80053a2:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 80053a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80053a6:	4618      	mov	r0, r3
 80053a8:	3710      	adds	r7, #16
 80053aa:	46bd      	mov	sp, r7
 80053ac:	bd80      	pop	{r7, pc}
 80053ae:	bf00      	nop
 80053b0:	20000093 	.word	0x20000093

080053b4 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80053b4:	b580      	push	{r7, lr}
 80053b6:	b084      	sub	sp, #16
 80053b8:	af00      	add	r7, sp, #0
 80053ba:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	32b0      	adds	r2, #176	; 0xb0
 80053c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80053ca:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	32b0      	adds	r2, #176	; 0xb0
 80053d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d101      	bne.n	80053e2 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 80053de:	2303      	movs	r3, #3
 80053e0:	e018      	b.n	8005414 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	7c1b      	ldrb	r3, [r3, #16]
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d10a      	bne.n	8005400 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80053ea:	4b0c      	ldr	r3, [pc, #48]	; (800541c <USBD_CDC_ReceivePacket+0x68>)
 80053ec:	7819      	ldrb	r1, [r3, #0]
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80053f4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80053f8:	6878      	ldr	r0, [r7, #4]
 80053fa:	f001 ffbf 	bl	800737c <USBD_LL_PrepareReceive>
 80053fe:	e008      	b.n	8005412 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8005400:	4b06      	ldr	r3, [pc, #24]	; (800541c <USBD_CDC_ReceivePacket+0x68>)
 8005402:	7819      	ldrb	r1, [r3, #0]
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800540a:	2340      	movs	r3, #64	; 0x40
 800540c:	6878      	ldr	r0, [r7, #4]
 800540e:	f001 ffb5 	bl	800737c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8005412:	2300      	movs	r3, #0
}
 8005414:	4618      	mov	r0, r3
 8005416:	3710      	adds	r7, #16
 8005418:	46bd      	mov	sp, r7
 800541a:	bd80      	pop	{r7, pc}
 800541c:	20000094 	.word	0x20000094

08005420 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8005420:	b580      	push	{r7, lr}
 8005422:	b086      	sub	sp, #24
 8005424:	af00      	add	r7, sp, #0
 8005426:	60f8      	str	r0, [r7, #12]
 8005428:	60b9      	str	r1, [r7, #8]
 800542a:	4613      	mov	r3, r2
 800542c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	2b00      	cmp	r3, #0
 8005432:	d101      	bne.n	8005438 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8005434:	2303      	movs	r3, #3
 8005436:	e01f      	b.n	8005478 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	2200      	movs	r2, #0
 800543c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	2200      	movs	r2, #0
 8005444:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	2200      	movs	r2, #0
 800544c:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8005450:	68bb      	ldr	r3, [r7, #8]
 8005452:	2b00      	cmp	r3, #0
 8005454:	d003      	beq.n	800545e <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	68ba      	ldr	r2, [r7, #8]
 800545a:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	2201      	movs	r2, #1
 8005462:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	79fa      	ldrb	r2, [r7, #7]
 800546a:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800546c:	68f8      	ldr	r0, [r7, #12]
 800546e:	f001 fe2f 	bl	80070d0 <USBD_LL_Init>
 8005472:	4603      	mov	r3, r0
 8005474:	75fb      	strb	r3, [r7, #23]

  return ret;
 8005476:	7dfb      	ldrb	r3, [r7, #23]
}
 8005478:	4618      	mov	r0, r3
 800547a:	3718      	adds	r7, #24
 800547c:	46bd      	mov	sp, r7
 800547e:	bd80      	pop	{r7, pc}

08005480 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8005480:	b580      	push	{r7, lr}
 8005482:	b084      	sub	sp, #16
 8005484:	af00      	add	r7, sp, #0
 8005486:	6078      	str	r0, [r7, #4]
 8005488:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800548a:	2300      	movs	r3, #0
 800548c:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800548e:	683b      	ldr	r3, [r7, #0]
 8005490:	2b00      	cmp	r3, #0
 8005492:	d101      	bne.n	8005498 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8005494:	2303      	movs	r3, #3
 8005496:	e025      	b.n	80054e4 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	683a      	ldr	r2, [r7, #0]
 800549c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	32ae      	adds	r2, #174	; 0xae
 80054aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80054ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	d00f      	beq.n	80054d4 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	32ae      	adds	r2, #174	; 0xae
 80054be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80054c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054c4:	f107 020e 	add.w	r2, r7, #14
 80054c8:	4610      	mov	r0, r2
 80054ca:	4798      	blx	r3
 80054cc:	4602      	mov	r2, r0
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 80054da:	1c5a      	adds	r2, r3, #1
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 80054e2:	2300      	movs	r3, #0
}
 80054e4:	4618      	mov	r0, r3
 80054e6:	3710      	adds	r7, #16
 80054e8:	46bd      	mov	sp, r7
 80054ea:	bd80      	pop	{r7, pc}

080054ec <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 80054ec:	b580      	push	{r7, lr}
 80054ee:	b082      	sub	sp, #8
 80054f0:	af00      	add	r7, sp, #0
 80054f2:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 80054f4:	6878      	ldr	r0, [r7, #4]
 80054f6:	f001 fe37 	bl	8007168 <USBD_LL_Start>
 80054fa:	4603      	mov	r3, r0
}
 80054fc:	4618      	mov	r0, r3
 80054fe:	3708      	adds	r7, #8
 8005500:	46bd      	mov	sp, r7
 8005502:	bd80      	pop	{r7, pc}

08005504 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8005504:	b480      	push	{r7}
 8005506:	b083      	sub	sp, #12
 8005508:	af00      	add	r7, sp, #0
 800550a:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800550c:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800550e:	4618      	mov	r0, r3
 8005510:	370c      	adds	r7, #12
 8005512:	46bd      	mov	sp, r7
 8005514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005518:	4770      	bx	lr

0800551a <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800551a:	b580      	push	{r7, lr}
 800551c:	b084      	sub	sp, #16
 800551e:	af00      	add	r7, sp, #0
 8005520:	6078      	str	r0, [r7, #4]
 8005522:	460b      	mov	r3, r1
 8005524:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8005526:	2300      	movs	r3, #0
 8005528:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005530:	2b00      	cmp	r3, #0
 8005532:	d009      	beq.n	8005548 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	78fa      	ldrb	r2, [r7, #3]
 800553e:	4611      	mov	r1, r2
 8005540:	6878      	ldr	r0, [r7, #4]
 8005542:	4798      	blx	r3
 8005544:	4603      	mov	r3, r0
 8005546:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8005548:	7bfb      	ldrb	r3, [r7, #15]
}
 800554a:	4618      	mov	r0, r3
 800554c:	3710      	adds	r7, #16
 800554e:	46bd      	mov	sp, r7
 8005550:	bd80      	pop	{r7, pc}

08005552 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005552:	b580      	push	{r7, lr}
 8005554:	b084      	sub	sp, #16
 8005556:	af00      	add	r7, sp, #0
 8005558:	6078      	str	r0, [r7, #4]
 800555a:	460b      	mov	r3, r1
 800555c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800555e:	2300      	movs	r3, #0
 8005560:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005568:	685b      	ldr	r3, [r3, #4]
 800556a:	78fa      	ldrb	r2, [r7, #3]
 800556c:	4611      	mov	r1, r2
 800556e:	6878      	ldr	r0, [r7, #4]
 8005570:	4798      	blx	r3
 8005572:	4603      	mov	r3, r0
 8005574:	2b00      	cmp	r3, #0
 8005576:	d001      	beq.n	800557c <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8005578:	2303      	movs	r3, #3
 800557a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800557c:	7bfb      	ldrb	r3, [r7, #15]
}
 800557e:	4618      	mov	r0, r3
 8005580:	3710      	adds	r7, #16
 8005582:	46bd      	mov	sp, r7
 8005584:	bd80      	pop	{r7, pc}

08005586 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8005586:	b580      	push	{r7, lr}
 8005588:	b084      	sub	sp, #16
 800558a:	af00      	add	r7, sp, #0
 800558c:	6078      	str	r0, [r7, #4]
 800558e:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005596:	6839      	ldr	r1, [r7, #0]
 8005598:	4618      	mov	r0, r3
 800559a:	f001 f908 	bl	80067ae <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	2201      	movs	r2, #1
 80055a2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 80055ac:	461a      	mov	r2, r3
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80055ba:	f003 031f 	and.w	r3, r3, #31
 80055be:	2b02      	cmp	r3, #2
 80055c0:	d01a      	beq.n	80055f8 <USBD_LL_SetupStage+0x72>
 80055c2:	2b02      	cmp	r3, #2
 80055c4:	d822      	bhi.n	800560c <USBD_LL_SetupStage+0x86>
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d002      	beq.n	80055d0 <USBD_LL_SetupStage+0x4a>
 80055ca:	2b01      	cmp	r3, #1
 80055cc:	d00a      	beq.n	80055e4 <USBD_LL_SetupStage+0x5e>
 80055ce:	e01d      	b.n	800560c <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80055d6:	4619      	mov	r1, r3
 80055d8:	6878      	ldr	r0, [r7, #4]
 80055da:	f000 fb5f 	bl	8005c9c <USBD_StdDevReq>
 80055de:	4603      	mov	r3, r0
 80055e0:	73fb      	strb	r3, [r7, #15]
      break;
 80055e2:	e020      	b.n	8005626 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80055ea:	4619      	mov	r1, r3
 80055ec:	6878      	ldr	r0, [r7, #4]
 80055ee:	f000 fbc7 	bl	8005d80 <USBD_StdItfReq>
 80055f2:	4603      	mov	r3, r0
 80055f4:	73fb      	strb	r3, [r7, #15]
      break;
 80055f6:	e016      	b.n	8005626 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80055fe:	4619      	mov	r1, r3
 8005600:	6878      	ldr	r0, [r7, #4]
 8005602:	f000 fc29 	bl	8005e58 <USBD_StdEPReq>
 8005606:	4603      	mov	r3, r0
 8005608:	73fb      	strb	r3, [r7, #15]
      break;
 800560a:	e00c      	b.n	8005626 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8005612:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8005616:	b2db      	uxtb	r3, r3
 8005618:	4619      	mov	r1, r3
 800561a:	6878      	ldr	r0, [r7, #4]
 800561c:	f001 fe04 	bl	8007228 <USBD_LL_StallEP>
 8005620:	4603      	mov	r3, r0
 8005622:	73fb      	strb	r3, [r7, #15]
      break;
 8005624:	bf00      	nop
  }

  return ret;
 8005626:	7bfb      	ldrb	r3, [r7, #15]
}
 8005628:	4618      	mov	r0, r3
 800562a:	3710      	adds	r7, #16
 800562c:	46bd      	mov	sp, r7
 800562e:	bd80      	pop	{r7, pc}

08005630 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8005630:	b580      	push	{r7, lr}
 8005632:	b086      	sub	sp, #24
 8005634:	af00      	add	r7, sp, #0
 8005636:	60f8      	str	r0, [r7, #12]
 8005638:	460b      	mov	r3, r1
 800563a:	607a      	str	r2, [r7, #4]
 800563c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800563e:	2300      	movs	r3, #0
 8005640:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8005642:	7afb      	ldrb	r3, [r7, #11]
 8005644:	2b00      	cmp	r3, #0
 8005646:	d16e      	bne.n	8005726 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800564e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005656:	2b03      	cmp	r3, #3
 8005658:	f040 8098 	bne.w	800578c <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800565c:	693b      	ldr	r3, [r7, #16]
 800565e:	689a      	ldr	r2, [r3, #8]
 8005660:	693b      	ldr	r3, [r7, #16]
 8005662:	68db      	ldr	r3, [r3, #12]
 8005664:	429a      	cmp	r2, r3
 8005666:	d913      	bls.n	8005690 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8005668:	693b      	ldr	r3, [r7, #16]
 800566a:	689a      	ldr	r2, [r3, #8]
 800566c:	693b      	ldr	r3, [r7, #16]
 800566e:	68db      	ldr	r3, [r3, #12]
 8005670:	1ad2      	subs	r2, r2, r3
 8005672:	693b      	ldr	r3, [r7, #16]
 8005674:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8005676:	693b      	ldr	r3, [r7, #16]
 8005678:	68da      	ldr	r2, [r3, #12]
 800567a:	693b      	ldr	r3, [r7, #16]
 800567c:	689b      	ldr	r3, [r3, #8]
 800567e:	4293      	cmp	r3, r2
 8005680:	bf28      	it	cs
 8005682:	4613      	movcs	r3, r2
 8005684:	461a      	mov	r2, r3
 8005686:	6879      	ldr	r1, [r7, #4]
 8005688:	68f8      	ldr	r0, [r7, #12]
 800568a:	f001 f984 	bl	8006996 <USBD_CtlContinueRx>
 800568e:	e07d      	b.n	800578c <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8005696:	f003 031f 	and.w	r3, r3, #31
 800569a:	2b02      	cmp	r3, #2
 800569c:	d014      	beq.n	80056c8 <USBD_LL_DataOutStage+0x98>
 800569e:	2b02      	cmp	r3, #2
 80056a0:	d81d      	bhi.n	80056de <USBD_LL_DataOutStage+0xae>
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d002      	beq.n	80056ac <USBD_LL_DataOutStage+0x7c>
 80056a6:	2b01      	cmp	r3, #1
 80056a8:	d003      	beq.n	80056b2 <USBD_LL_DataOutStage+0x82>
 80056aa:	e018      	b.n	80056de <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 80056ac:	2300      	movs	r3, #0
 80056ae:	75bb      	strb	r3, [r7, #22]
            break;
 80056b0:	e018      	b.n	80056e4 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 80056b8:	b2db      	uxtb	r3, r3
 80056ba:	4619      	mov	r1, r3
 80056bc:	68f8      	ldr	r0, [r7, #12]
 80056be:	f000 fa5e 	bl	8005b7e <USBD_CoreFindIF>
 80056c2:	4603      	mov	r3, r0
 80056c4:	75bb      	strb	r3, [r7, #22]
            break;
 80056c6:	e00d      	b.n	80056e4 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 80056ce:	b2db      	uxtb	r3, r3
 80056d0:	4619      	mov	r1, r3
 80056d2:	68f8      	ldr	r0, [r7, #12]
 80056d4:	f000 fa60 	bl	8005b98 <USBD_CoreFindEP>
 80056d8:	4603      	mov	r3, r0
 80056da:	75bb      	strb	r3, [r7, #22]
            break;
 80056dc:	e002      	b.n	80056e4 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 80056de:	2300      	movs	r3, #0
 80056e0:	75bb      	strb	r3, [r7, #22]
            break;
 80056e2:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 80056e4:	7dbb      	ldrb	r3, [r7, #22]
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d119      	bne.n	800571e <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80056f0:	b2db      	uxtb	r3, r3
 80056f2:	2b03      	cmp	r3, #3
 80056f4:	d113      	bne.n	800571e <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 80056f6:	7dba      	ldrb	r2, [r7, #22]
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	32ae      	adds	r2, #174	; 0xae
 80056fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005700:	691b      	ldr	r3, [r3, #16]
 8005702:	2b00      	cmp	r3, #0
 8005704:	d00b      	beq.n	800571e <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8005706:	7dba      	ldrb	r2, [r7, #22]
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800570e:	7dba      	ldrb	r2, [r7, #22]
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	32ae      	adds	r2, #174	; 0xae
 8005714:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005718:	691b      	ldr	r3, [r3, #16]
 800571a:	68f8      	ldr	r0, [r7, #12]
 800571c:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800571e:	68f8      	ldr	r0, [r7, #12]
 8005720:	f001 f94a 	bl	80069b8 <USBD_CtlSendStatus>
 8005724:	e032      	b.n	800578c <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8005726:	7afb      	ldrb	r3, [r7, #11]
 8005728:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800572c:	b2db      	uxtb	r3, r3
 800572e:	4619      	mov	r1, r3
 8005730:	68f8      	ldr	r0, [r7, #12]
 8005732:	f000 fa31 	bl	8005b98 <USBD_CoreFindEP>
 8005736:	4603      	mov	r3, r0
 8005738:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800573a:	7dbb      	ldrb	r3, [r7, #22]
 800573c:	2bff      	cmp	r3, #255	; 0xff
 800573e:	d025      	beq.n	800578c <USBD_LL_DataOutStage+0x15c>
 8005740:	7dbb      	ldrb	r3, [r7, #22]
 8005742:	2b00      	cmp	r3, #0
 8005744:	d122      	bne.n	800578c <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800574c:	b2db      	uxtb	r3, r3
 800574e:	2b03      	cmp	r3, #3
 8005750:	d117      	bne.n	8005782 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8005752:	7dba      	ldrb	r2, [r7, #22]
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	32ae      	adds	r2, #174	; 0xae
 8005758:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800575c:	699b      	ldr	r3, [r3, #24]
 800575e:	2b00      	cmp	r3, #0
 8005760:	d00f      	beq.n	8005782 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8005762:	7dba      	ldrb	r2, [r7, #22]
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800576a:	7dba      	ldrb	r2, [r7, #22]
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	32ae      	adds	r2, #174	; 0xae
 8005770:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005774:	699b      	ldr	r3, [r3, #24]
 8005776:	7afa      	ldrb	r2, [r7, #11]
 8005778:	4611      	mov	r1, r2
 800577a:	68f8      	ldr	r0, [r7, #12]
 800577c:	4798      	blx	r3
 800577e:	4603      	mov	r3, r0
 8005780:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8005782:	7dfb      	ldrb	r3, [r7, #23]
 8005784:	2b00      	cmp	r3, #0
 8005786:	d001      	beq.n	800578c <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8005788:	7dfb      	ldrb	r3, [r7, #23]
 800578a:	e000      	b.n	800578e <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800578c:	2300      	movs	r3, #0
}
 800578e:	4618      	mov	r0, r3
 8005790:	3718      	adds	r7, #24
 8005792:	46bd      	mov	sp, r7
 8005794:	bd80      	pop	{r7, pc}

08005796 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8005796:	b580      	push	{r7, lr}
 8005798:	b086      	sub	sp, #24
 800579a:	af00      	add	r7, sp, #0
 800579c:	60f8      	str	r0, [r7, #12]
 800579e:	460b      	mov	r3, r1
 80057a0:	607a      	str	r2, [r7, #4]
 80057a2:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 80057a4:	7afb      	ldrb	r3, [r7, #11]
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d16f      	bne.n	800588a <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	3314      	adds	r3, #20
 80057ae:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80057b6:	2b02      	cmp	r3, #2
 80057b8:	d15a      	bne.n	8005870 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 80057ba:	693b      	ldr	r3, [r7, #16]
 80057bc:	689a      	ldr	r2, [r3, #8]
 80057be:	693b      	ldr	r3, [r7, #16]
 80057c0:	68db      	ldr	r3, [r3, #12]
 80057c2:	429a      	cmp	r2, r3
 80057c4:	d914      	bls.n	80057f0 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80057c6:	693b      	ldr	r3, [r7, #16]
 80057c8:	689a      	ldr	r2, [r3, #8]
 80057ca:	693b      	ldr	r3, [r7, #16]
 80057cc:	68db      	ldr	r3, [r3, #12]
 80057ce:	1ad2      	subs	r2, r2, r3
 80057d0:	693b      	ldr	r3, [r7, #16]
 80057d2:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 80057d4:	693b      	ldr	r3, [r7, #16]
 80057d6:	689b      	ldr	r3, [r3, #8]
 80057d8:	461a      	mov	r2, r3
 80057da:	6879      	ldr	r1, [r7, #4]
 80057dc:	68f8      	ldr	r0, [r7, #12]
 80057de:	f001 f8ac 	bl	800693a <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80057e2:	2300      	movs	r3, #0
 80057e4:	2200      	movs	r2, #0
 80057e6:	2100      	movs	r1, #0
 80057e8:	68f8      	ldr	r0, [r7, #12]
 80057ea:	f001 fdc7 	bl	800737c <USBD_LL_PrepareReceive>
 80057ee:	e03f      	b.n	8005870 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 80057f0:	693b      	ldr	r3, [r7, #16]
 80057f2:	68da      	ldr	r2, [r3, #12]
 80057f4:	693b      	ldr	r3, [r7, #16]
 80057f6:	689b      	ldr	r3, [r3, #8]
 80057f8:	429a      	cmp	r2, r3
 80057fa:	d11c      	bne.n	8005836 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 80057fc:	693b      	ldr	r3, [r7, #16]
 80057fe:	685a      	ldr	r2, [r3, #4]
 8005800:	693b      	ldr	r3, [r7, #16]
 8005802:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8005804:	429a      	cmp	r2, r3
 8005806:	d316      	bcc.n	8005836 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8005808:	693b      	ldr	r3, [r7, #16]
 800580a:	685a      	ldr	r2, [r3, #4]
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8005812:	429a      	cmp	r2, r3
 8005814:	d20f      	bcs.n	8005836 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8005816:	2200      	movs	r2, #0
 8005818:	2100      	movs	r1, #0
 800581a:	68f8      	ldr	r0, [r7, #12]
 800581c:	f001 f88d 	bl	800693a <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	2200      	movs	r2, #0
 8005824:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005828:	2300      	movs	r3, #0
 800582a:	2200      	movs	r2, #0
 800582c:	2100      	movs	r1, #0
 800582e:	68f8      	ldr	r0, [r7, #12]
 8005830:	f001 fda4 	bl	800737c <USBD_LL_PrepareReceive>
 8005834:	e01c      	b.n	8005870 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800583c:	b2db      	uxtb	r3, r3
 800583e:	2b03      	cmp	r3, #3
 8005840:	d10f      	bne.n	8005862 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005848:	68db      	ldr	r3, [r3, #12]
 800584a:	2b00      	cmp	r3, #0
 800584c:	d009      	beq.n	8005862 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	2200      	movs	r2, #0
 8005852:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800585c:	68db      	ldr	r3, [r3, #12]
 800585e:	68f8      	ldr	r0, [r7, #12]
 8005860:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8005862:	2180      	movs	r1, #128	; 0x80
 8005864:	68f8      	ldr	r0, [r7, #12]
 8005866:	f001 fcdf 	bl	8007228 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800586a:	68f8      	ldr	r0, [r7, #12]
 800586c:	f001 f8b7 	bl	80069de <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8005876:	2b00      	cmp	r3, #0
 8005878:	d03a      	beq.n	80058f0 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800587a:	68f8      	ldr	r0, [r7, #12]
 800587c:	f7ff fe42 	bl	8005504 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	2200      	movs	r2, #0
 8005884:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8005888:	e032      	b.n	80058f0 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800588a:	7afb      	ldrb	r3, [r7, #11]
 800588c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005890:	b2db      	uxtb	r3, r3
 8005892:	4619      	mov	r1, r3
 8005894:	68f8      	ldr	r0, [r7, #12]
 8005896:	f000 f97f 	bl	8005b98 <USBD_CoreFindEP>
 800589a:	4603      	mov	r3, r0
 800589c:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800589e:	7dfb      	ldrb	r3, [r7, #23]
 80058a0:	2bff      	cmp	r3, #255	; 0xff
 80058a2:	d025      	beq.n	80058f0 <USBD_LL_DataInStage+0x15a>
 80058a4:	7dfb      	ldrb	r3, [r7, #23]
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d122      	bne.n	80058f0 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80058b0:	b2db      	uxtb	r3, r3
 80058b2:	2b03      	cmp	r3, #3
 80058b4:	d11c      	bne.n	80058f0 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 80058b6:	7dfa      	ldrb	r2, [r7, #23]
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	32ae      	adds	r2, #174	; 0xae
 80058bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80058c0:	695b      	ldr	r3, [r3, #20]
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d014      	beq.n	80058f0 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 80058c6:	7dfa      	ldrb	r2, [r7, #23]
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 80058ce:	7dfa      	ldrb	r2, [r7, #23]
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	32ae      	adds	r2, #174	; 0xae
 80058d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80058d8:	695b      	ldr	r3, [r3, #20]
 80058da:	7afa      	ldrb	r2, [r7, #11]
 80058dc:	4611      	mov	r1, r2
 80058de:	68f8      	ldr	r0, [r7, #12]
 80058e0:	4798      	blx	r3
 80058e2:	4603      	mov	r3, r0
 80058e4:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 80058e6:	7dbb      	ldrb	r3, [r7, #22]
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	d001      	beq.n	80058f0 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 80058ec:	7dbb      	ldrb	r3, [r7, #22]
 80058ee:	e000      	b.n	80058f2 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 80058f0:	2300      	movs	r3, #0
}
 80058f2:	4618      	mov	r0, r3
 80058f4:	3718      	adds	r7, #24
 80058f6:	46bd      	mov	sp, r7
 80058f8:	bd80      	pop	{r7, pc}

080058fa <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80058fa:	b580      	push	{r7, lr}
 80058fc:	b084      	sub	sp, #16
 80058fe:	af00      	add	r7, sp, #0
 8005900:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8005902:	2300      	movs	r3, #0
 8005904:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	2201      	movs	r2, #1
 800590a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	2200      	movs	r2, #0
 8005912:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	2200      	movs	r2, #0
 800591a:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	2200      	movs	r2, #0
 8005920:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	2200      	movs	r2, #0
 8005928:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005932:	2b00      	cmp	r3, #0
 8005934:	d014      	beq.n	8005960 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800593c:	685b      	ldr	r3, [r3, #4]
 800593e:	2b00      	cmp	r3, #0
 8005940:	d00e      	beq.n	8005960 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005948:	685b      	ldr	r3, [r3, #4]
 800594a:	687a      	ldr	r2, [r7, #4]
 800594c:	6852      	ldr	r2, [r2, #4]
 800594e:	b2d2      	uxtb	r2, r2
 8005950:	4611      	mov	r1, r2
 8005952:	6878      	ldr	r0, [r7, #4]
 8005954:	4798      	blx	r3
 8005956:	4603      	mov	r3, r0
 8005958:	2b00      	cmp	r3, #0
 800595a:	d001      	beq.n	8005960 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800595c:	2303      	movs	r3, #3
 800595e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005960:	2340      	movs	r3, #64	; 0x40
 8005962:	2200      	movs	r2, #0
 8005964:	2100      	movs	r1, #0
 8005966:	6878      	ldr	r0, [r7, #4]
 8005968:	f001 fc19 	bl	800719e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	2201      	movs	r2, #1
 8005970:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	2240      	movs	r2, #64	; 0x40
 8005978:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800597c:	2340      	movs	r3, #64	; 0x40
 800597e:	2200      	movs	r2, #0
 8005980:	2180      	movs	r1, #128	; 0x80
 8005982:	6878      	ldr	r0, [r7, #4]
 8005984:	f001 fc0b 	bl	800719e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	2201      	movs	r2, #1
 800598c:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	2240      	movs	r2, #64	; 0x40
 8005992:	621a      	str	r2, [r3, #32]

  return ret;
 8005994:	7bfb      	ldrb	r3, [r7, #15]
}
 8005996:	4618      	mov	r0, r3
 8005998:	3710      	adds	r7, #16
 800599a:	46bd      	mov	sp, r7
 800599c:	bd80      	pop	{r7, pc}

0800599e <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800599e:	b480      	push	{r7}
 80059a0:	b083      	sub	sp, #12
 80059a2:	af00      	add	r7, sp, #0
 80059a4:	6078      	str	r0, [r7, #4]
 80059a6:	460b      	mov	r3, r1
 80059a8:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	78fa      	ldrb	r2, [r7, #3]
 80059ae:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80059b0:	2300      	movs	r3, #0
}
 80059b2:	4618      	mov	r0, r3
 80059b4:	370c      	adds	r7, #12
 80059b6:	46bd      	mov	sp, r7
 80059b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059bc:	4770      	bx	lr

080059be <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80059be:	b480      	push	{r7}
 80059c0:	b083      	sub	sp, #12
 80059c2:	af00      	add	r7, sp, #0
 80059c4:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80059cc:	b2da      	uxtb	r2, r3
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	2204      	movs	r2, #4
 80059d8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 80059dc:	2300      	movs	r3, #0
}
 80059de:	4618      	mov	r0, r3
 80059e0:	370c      	adds	r7, #12
 80059e2:	46bd      	mov	sp, r7
 80059e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059e8:	4770      	bx	lr

080059ea <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80059ea:	b480      	push	{r7}
 80059ec:	b083      	sub	sp, #12
 80059ee:	af00      	add	r7, sp, #0
 80059f0:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80059f8:	b2db      	uxtb	r3, r3
 80059fa:	2b04      	cmp	r3, #4
 80059fc:	d106      	bne.n	8005a0c <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8005a04:	b2da      	uxtb	r2, r3
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8005a0c:	2300      	movs	r3, #0
}
 8005a0e:	4618      	mov	r0, r3
 8005a10:	370c      	adds	r7, #12
 8005a12:	46bd      	mov	sp, r7
 8005a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a18:	4770      	bx	lr

08005a1a <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8005a1a:	b580      	push	{r7, lr}
 8005a1c:	b082      	sub	sp, #8
 8005a1e:	af00      	add	r7, sp, #0
 8005a20:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005a28:	b2db      	uxtb	r3, r3
 8005a2a:	2b03      	cmp	r3, #3
 8005a2c:	d110      	bne.n	8005a50 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	d00b      	beq.n	8005a50 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005a3e:	69db      	ldr	r3, [r3, #28]
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	d005      	beq.n	8005a50 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005a4a:	69db      	ldr	r3, [r3, #28]
 8005a4c:	6878      	ldr	r0, [r7, #4]
 8005a4e:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8005a50:	2300      	movs	r3, #0
}
 8005a52:	4618      	mov	r0, r3
 8005a54:	3708      	adds	r7, #8
 8005a56:	46bd      	mov	sp, r7
 8005a58:	bd80      	pop	{r7, pc}

08005a5a <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8005a5a:	b580      	push	{r7, lr}
 8005a5c:	b082      	sub	sp, #8
 8005a5e:	af00      	add	r7, sp, #0
 8005a60:	6078      	str	r0, [r7, #4]
 8005a62:	460b      	mov	r3, r1
 8005a64:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	32ae      	adds	r2, #174	; 0xae
 8005a70:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	d101      	bne.n	8005a7c <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8005a78:	2303      	movs	r3, #3
 8005a7a:	e01c      	b.n	8005ab6 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005a82:	b2db      	uxtb	r3, r3
 8005a84:	2b03      	cmp	r3, #3
 8005a86:	d115      	bne.n	8005ab4 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	32ae      	adds	r2, #174	; 0xae
 8005a92:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005a96:	6a1b      	ldr	r3, [r3, #32]
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	d00b      	beq.n	8005ab4 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	32ae      	adds	r2, #174	; 0xae
 8005aa6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005aaa:	6a1b      	ldr	r3, [r3, #32]
 8005aac:	78fa      	ldrb	r2, [r7, #3]
 8005aae:	4611      	mov	r1, r2
 8005ab0:	6878      	ldr	r0, [r7, #4]
 8005ab2:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8005ab4:	2300      	movs	r3, #0
}
 8005ab6:	4618      	mov	r0, r3
 8005ab8:	3708      	adds	r7, #8
 8005aba:	46bd      	mov	sp, r7
 8005abc:	bd80      	pop	{r7, pc}

08005abe <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8005abe:	b580      	push	{r7, lr}
 8005ac0:	b082      	sub	sp, #8
 8005ac2:	af00      	add	r7, sp, #0
 8005ac4:	6078      	str	r0, [r7, #4]
 8005ac6:	460b      	mov	r3, r1
 8005ac8:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	32ae      	adds	r2, #174	; 0xae
 8005ad4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	d101      	bne.n	8005ae0 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8005adc:	2303      	movs	r3, #3
 8005ade:	e01c      	b.n	8005b1a <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005ae6:	b2db      	uxtb	r3, r3
 8005ae8:	2b03      	cmp	r3, #3
 8005aea:	d115      	bne.n	8005b18 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	32ae      	adds	r2, #174	; 0xae
 8005af6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005afa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	d00b      	beq.n	8005b18 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	32ae      	adds	r2, #174	; 0xae
 8005b0a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005b0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b10:	78fa      	ldrb	r2, [r7, #3]
 8005b12:	4611      	mov	r1, r2
 8005b14:	6878      	ldr	r0, [r7, #4]
 8005b16:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8005b18:	2300      	movs	r3, #0
}
 8005b1a:	4618      	mov	r0, r3
 8005b1c:	3708      	adds	r7, #8
 8005b1e:	46bd      	mov	sp, r7
 8005b20:	bd80      	pop	{r7, pc}

08005b22 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8005b22:	b480      	push	{r7}
 8005b24:	b083      	sub	sp, #12
 8005b26:	af00      	add	r7, sp, #0
 8005b28:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8005b2a:	2300      	movs	r3, #0
}
 8005b2c:	4618      	mov	r0, r3
 8005b2e:	370c      	adds	r7, #12
 8005b30:	46bd      	mov	sp, r7
 8005b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b36:	4770      	bx	lr

08005b38 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8005b38:	b580      	push	{r7, lr}
 8005b3a:	b084      	sub	sp, #16
 8005b3c:	af00      	add	r7, sp, #0
 8005b3e:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8005b40:	2300      	movs	r3, #0
 8005b42:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	2201      	movs	r2, #1
 8005b48:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d00e      	beq.n	8005b74 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005b5c:	685b      	ldr	r3, [r3, #4]
 8005b5e:	687a      	ldr	r2, [r7, #4]
 8005b60:	6852      	ldr	r2, [r2, #4]
 8005b62:	b2d2      	uxtb	r2, r2
 8005b64:	4611      	mov	r1, r2
 8005b66:	6878      	ldr	r0, [r7, #4]
 8005b68:	4798      	blx	r3
 8005b6a:	4603      	mov	r3, r0
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d001      	beq.n	8005b74 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8005b70:	2303      	movs	r3, #3
 8005b72:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8005b74:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b76:	4618      	mov	r0, r3
 8005b78:	3710      	adds	r7, #16
 8005b7a:	46bd      	mov	sp, r7
 8005b7c:	bd80      	pop	{r7, pc}

08005b7e <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8005b7e:	b480      	push	{r7}
 8005b80:	b083      	sub	sp, #12
 8005b82:	af00      	add	r7, sp, #0
 8005b84:	6078      	str	r0, [r7, #4]
 8005b86:	460b      	mov	r3, r1
 8005b88:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8005b8a:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8005b8c:	4618      	mov	r0, r3
 8005b8e:	370c      	adds	r7, #12
 8005b90:	46bd      	mov	sp, r7
 8005b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b96:	4770      	bx	lr

08005b98 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8005b98:	b480      	push	{r7}
 8005b9a:	b083      	sub	sp, #12
 8005b9c:	af00      	add	r7, sp, #0
 8005b9e:	6078      	str	r0, [r7, #4]
 8005ba0:	460b      	mov	r3, r1
 8005ba2:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8005ba4:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8005ba6:	4618      	mov	r0, r3
 8005ba8:	370c      	adds	r7, #12
 8005baa:	46bd      	mov	sp, r7
 8005bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bb0:	4770      	bx	lr

08005bb2 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8005bb2:	b580      	push	{r7, lr}
 8005bb4:	b086      	sub	sp, #24
 8005bb6:	af00      	add	r7, sp, #0
 8005bb8:	6078      	str	r0, [r7, #4]
 8005bba:	460b      	mov	r3, r1
 8005bbc:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8005bc6:	2300      	movs	r3, #0
 8005bc8:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	885b      	ldrh	r3, [r3, #2]
 8005bce:	b29a      	uxth	r2, r3
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	781b      	ldrb	r3, [r3, #0]
 8005bd4:	b29b      	uxth	r3, r3
 8005bd6:	429a      	cmp	r2, r3
 8005bd8:	d920      	bls.n	8005c1c <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	781b      	ldrb	r3, [r3, #0]
 8005bde:	b29b      	uxth	r3, r3
 8005be0:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8005be2:	e013      	b.n	8005c0c <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8005be4:	f107 030a 	add.w	r3, r7, #10
 8005be8:	4619      	mov	r1, r3
 8005bea:	6978      	ldr	r0, [r7, #20]
 8005bec:	f000 f81b 	bl	8005c26 <USBD_GetNextDesc>
 8005bf0:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8005bf2:	697b      	ldr	r3, [r7, #20]
 8005bf4:	785b      	ldrb	r3, [r3, #1]
 8005bf6:	2b05      	cmp	r3, #5
 8005bf8:	d108      	bne.n	8005c0c <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8005bfa:	697b      	ldr	r3, [r7, #20]
 8005bfc:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8005bfe:	693b      	ldr	r3, [r7, #16]
 8005c00:	789b      	ldrb	r3, [r3, #2]
 8005c02:	78fa      	ldrb	r2, [r7, #3]
 8005c04:	429a      	cmp	r2, r3
 8005c06:	d008      	beq.n	8005c1a <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8005c08:	2300      	movs	r3, #0
 8005c0a:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	885b      	ldrh	r3, [r3, #2]
 8005c10:	b29a      	uxth	r2, r3
 8005c12:	897b      	ldrh	r3, [r7, #10]
 8005c14:	429a      	cmp	r2, r3
 8005c16:	d8e5      	bhi.n	8005be4 <USBD_GetEpDesc+0x32>
 8005c18:	e000      	b.n	8005c1c <USBD_GetEpDesc+0x6a>
          break;
 8005c1a:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8005c1c:	693b      	ldr	r3, [r7, #16]
}
 8005c1e:	4618      	mov	r0, r3
 8005c20:	3718      	adds	r7, #24
 8005c22:	46bd      	mov	sp, r7
 8005c24:	bd80      	pop	{r7, pc}

08005c26 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8005c26:	b480      	push	{r7}
 8005c28:	b085      	sub	sp, #20
 8005c2a:	af00      	add	r7, sp, #0
 8005c2c:	6078      	str	r0, [r7, #4]
 8005c2e:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8005c34:	683b      	ldr	r3, [r7, #0]
 8005c36:	881a      	ldrh	r2, [r3, #0]
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	781b      	ldrb	r3, [r3, #0]
 8005c3c:	b29b      	uxth	r3, r3
 8005c3e:	4413      	add	r3, r2
 8005c40:	b29a      	uxth	r2, r3
 8005c42:	683b      	ldr	r3, [r7, #0]
 8005c44:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	781b      	ldrb	r3, [r3, #0]
 8005c4a:	461a      	mov	r2, r3
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	4413      	add	r3, r2
 8005c50:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8005c52:	68fb      	ldr	r3, [r7, #12]
}
 8005c54:	4618      	mov	r0, r3
 8005c56:	3714      	adds	r7, #20
 8005c58:	46bd      	mov	sp, r7
 8005c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c5e:	4770      	bx	lr

08005c60 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8005c60:	b480      	push	{r7}
 8005c62:	b087      	sub	sp, #28
 8005c64:	af00      	add	r7, sp, #0
 8005c66:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8005c6c:	697b      	ldr	r3, [r7, #20]
 8005c6e:	781b      	ldrb	r3, [r3, #0]
 8005c70:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8005c72:	697b      	ldr	r3, [r7, #20]
 8005c74:	3301      	adds	r3, #1
 8005c76:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8005c78:	697b      	ldr	r3, [r7, #20]
 8005c7a:	781b      	ldrb	r3, [r3, #0]
 8005c7c:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8005c7e:	8a3b      	ldrh	r3, [r7, #16]
 8005c80:	021b      	lsls	r3, r3, #8
 8005c82:	b21a      	sxth	r2, r3
 8005c84:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8005c88:	4313      	orrs	r3, r2
 8005c8a:	b21b      	sxth	r3, r3
 8005c8c:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8005c8e:	89fb      	ldrh	r3, [r7, #14]
}
 8005c90:	4618      	mov	r0, r3
 8005c92:	371c      	adds	r7, #28
 8005c94:	46bd      	mov	sp, r7
 8005c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c9a:	4770      	bx	lr

08005c9c <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005c9c:	b580      	push	{r7, lr}
 8005c9e:	b084      	sub	sp, #16
 8005ca0:	af00      	add	r7, sp, #0
 8005ca2:	6078      	str	r0, [r7, #4]
 8005ca4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8005ca6:	2300      	movs	r3, #0
 8005ca8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005caa:	683b      	ldr	r3, [r7, #0]
 8005cac:	781b      	ldrb	r3, [r3, #0]
 8005cae:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005cb2:	2b40      	cmp	r3, #64	; 0x40
 8005cb4:	d005      	beq.n	8005cc2 <USBD_StdDevReq+0x26>
 8005cb6:	2b40      	cmp	r3, #64	; 0x40
 8005cb8:	d857      	bhi.n	8005d6a <USBD_StdDevReq+0xce>
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d00f      	beq.n	8005cde <USBD_StdDevReq+0x42>
 8005cbe:	2b20      	cmp	r3, #32
 8005cc0:	d153      	bne.n	8005d6a <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	32ae      	adds	r2, #174	; 0xae
 8005ccc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005cd0:	689b      	ldr	r3, [r3, #8]
 8005cd2:	6839      	ldr	r1, [r7, #0]
 8005cd4:	6878      	ldr	r0, [r7, #4]
 8005cd6:	4798      	blx	r3
 8005cd8:	4603      	mov	r3, r0
 8005cda:	73fb      	strb	r3, [r7, #15]
      break;
 8005cdc:	e04a      	b.n	8005d74 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8005cde:	683b      	ldr	r3, [r7, #0]
 8005ce0:	785b      	ldrb	r3, [r3, #1]
 8005ce2:	2b09      	cmp	r3, #9
 8005ce4:	d83b      	bhi.n	8005d5e <USBD_StdDevReq+0xc2>
 8005ce6:	a201      	add	r2, pc, #4	; (adr r2, 8005cec <USBD_StdDevReq+0x50>)
 8005ce8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005cec:	08005d41 	.word	0x08005d41
 8005cf0:	08005d55 	.word	0x08005d55
 8005cf4:	08005d5f 	.word	0x08005d5f
 8005cf8:	08005d4b 	.word	0x08005d4b
 8005cfc:	08005d5f 	.word	0x08005d5f
 8005d00:	08005d1f 	.word	0x08005d1f
 8005d04:	08005d15 	.word	0x08005d15
 8005d08:	08005d5f 	.word	0x08005d5f
 8005d0c:	08005d37 	.word	0x08005d37
 8005d10:	08005d29 	.word	0x08005d29
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8005d14:	6839      	ldr	r1, [r7, #0]
 8005d16:	6878      	ldr	r0, [r7, #4]
 8005d18:	f000 fa3c 	bl	8006194 <USBD_GetDescriptor>
          break;
 8005d1c:	e024      	b.n	8005d68 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8005d1e:	6839      	ldr	r1, [r7, #0]
 8005d20:	6878      	ldr	r0, [r7, #4]
 8005d22:	f000 fba1 	bl	8006468 <USBD_SetAddress>
          break;
 8005d26:	e01f      	b.n	8005d68 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8005d28:	6839      	ldr	r1, [r7, #0]
 8005d2a:	6878      	ldr	r0, [r7, #4]
 8005d2c:	f000 fbe0 	bl	80064f0 <USBD_SetConfig>
 8005d30:	4603      	mov	r3, r0
 8005d32:	73fb      	strb	r3, [r7, #15]
          break;
 8005d34:	e018      	b.n	8005d68 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8005d36:	6839      	ldr	r1, [r7, #0]
 8005d38:	6878      	ldr	r0, [r7, #4]
 8005d3a:	f000 fc83 	bl	8006644 <USBD_GetConfig>
          break;
 8005d3e:	e013      	b.n	8005d68 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8005d40:	6839      	ldr	r1, [r7, #0]
 8005d42:	6878      	ldr	r0, [r7, #4]
 8005d44:	f000 fcb4 	bl	80066b0 <USBD_GetStatus>
          break;
 8005d48:	e00e      	b.n	8005d68 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8005d4a:	6839      	ldr	r1, [r7, #0]
 8005d4c:	6878      	ldr	r0, [r7, #4]
 8005d4e:	f000 fce3 	bl	8006718 <USBD_SetFeature>
          break;
 8005d52:	e009      	b.n	8005d68 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8005d54:	6839      	ldr	r1, [r7, #0]
 8005d56:	6878      	ldr	r0, [r7, #4]
 8005d58:	f000 fd07 	bl	800676a <USBD_ClrFeature>
          break;
 8005d5c:	e004      	b.n	8005d68 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8005d5e:	6839      	ldr	r1, [r7, #0]
 8005d60:	6878      	ldr	r0, [r7, #4]
 8005d62:	f000 fd5e 	bl	8006822 <USBD_CtlError>
          break;
 8005d66:	bf00      	nop
      }
      break;
 8005d68:	e004      	b.n	8005d74 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8005d6a:	6839      	ldr	r1, [r7, #0]
 8005d6c:	6878      	ldr	r0, [r7, #4]
 8005d6e:	f000 fd58 	bl	8006822 <USBD_CtlError>
      break;
 8005d72:	bf00      	nop
  }

  return ret;
 8005d74:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d76:	4618      	mov	r0, r3
 8005d78:	3710      	adds	r7, #16
 8005d7a:	46bd      	mov	sp, r7
 8005d7c:	bd80      	pop	{r7, pc}
 8005d7e:	bf00      	nop

08005d80 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005d80:	b580      	push	{r7, lr}
 8005d82:	b084      	sub	sp, #16
 8005d84:	af00      	add	r7, sp, #0
 8005d86:	6078      	str	r0, [r7, #4]
 8005d88:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8005d8a:	2300      	movs	r3, #0
 8005d8c:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005d8e:	683b      	ldr	r3, [r7, #0]
 8005d90:	781b      	ldrb	r3, [r3, #0]
 8005d92:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005d96:	2b40      	cmp	r3, #64	; 0x40
 8005d98:	d005      	beq.n	8005da6 <USBD_StdItfReq+0x26>
 8005d9a:	2b40      	cmp	r3, #64	; 0x40
 8005d9c:	d852      	bhi.n	8005e44 <USBD_StdItfReq+0xc4>
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	d001      	beq.n	8005da6 <USBD_StdItfReq+0x26>
 8005da2:	2b20      	cmp	r3, #32
 8005da4:	d14e      	bne.n	8005e44 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005dac:	b2db      	uxtb	r3, r3
 8005dae:	3b01      	subs	r3, #1
 8005db0:	2b02      	cmp	r3, #2
 8005db2:	d840      	bhi.n	8005e36 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8005db4:	683b      	ldr	r3, [r7, #0]
 8005db6:	889b      	ldrh	r3, [r3, #4]
 8005db8:	b2db      	uxtb	r3, r3
 8005dba:	2b01      	cmp	r3, #1
 8005dbc:	d836      	bhi.n	8005e2c <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8005dbe:	683b      	ldr	r3, [r7, #0]
 8005dc0:	889b      	ldrh	r3, [r3, #4]
 8005dc2:	b2db      	uxtb	r3, r3
 8005dc4:	4619      	mov	r1, r3
 8005dc6:	6878      	ldr	r0, [r7, #4]
 8005dc8:	f7ff fed9 	bl	8005b7e <USBD_CoreFindIF>
 8005dcc:	4603      	mov	r3, r0
 8005dce:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8005dd0:	7bbb      	ldrb	r3, [r7, #14]
 8005dd2:	2bff      	cmp	r3, #255	; 0xff
 8005dd4:	d01d      	beq.n	8005e12 <USBD_StdItfReq+0x92>
 8005dd6:	7bbb      	ldrb	r3, [r7, #14]
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	d11a      	bne.n	8005e12 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8005ddc:	7bba      	ldrb	r2, [r7, #14]
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	32ae      	adds	r2, #174	; 0xae
 8005de2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005de6:	689b      	ldr	r3, [r3, #8]
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	d00f      	beq.n	8005e0c <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8005dec:	7bba      	ldrb	r2, [r7, #14]
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8005df4:	7bba      	ldrb	r2, [r7, #14]
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	32ae      	adds	r2, #174	; 0xae
 8005dfa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005dfe:	689b      	ldr	r3, [r3, #8]
 8005e00:	6839      	ldr	r1, [r7, #0]
 8005e02:	6878      	ldr	r0, [r7, #4]
 8005e04:	4798      	blx	r3
 8005e06:	4603      	mov	r3, r0
 8005e08:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8005e0a:	e004      	b.n	8005e16 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8005e0c:	2303      	movs	r3, #3
 8005e0e:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8005e10:	e001      	b.n	8005e16 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8005e12:	2303      	movs	r3, #3
 8005e14:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8005e16:	683b      	ldr	r3, [r7, #0]
 8005e18:	88db      	ldrh	r3, [r3, #6]
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	d110      	bne.n	8005e40 <USBD_StdItfReq+0xc0>
 8005e1e:	7bfb      	ldrb	r3, [r7, #15]
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	d10d      	bne.n	8005e40 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8005e24:	6878      	ldr	r0, [r7, #4]
 8005e26:	f000 fdc7 	bl	80069b8 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8005e2a:	e009      	b.n	8005e40 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8005e2c:	6839      	ldr	r1, [r7, #0]
 8005e2e:	6878      	ldr	r0, [r7, #4]
 8005e30:	f000 fcf7 	bl	8006822 <USBD_CtlError>
          break;
 8005e34:	e004      	b.n	8005e40 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8005e36:	6839      	ldr	r1, [r7, #0]
 8005e38:	6878      	ldr	r0, [r7, #4]
 8005e3a:	f000 fcf2 	bl	8006822 <USBD_CtlError>
          break;
 8005e3e:	e000      	b.n	8005e42 <USBD_StdItfReq+0xc2>
          break;
 8005e40:	bf00      	nop
      }
      break;
 8005e42:	e004      	b.n	8005e4e <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8005e44:	6839      	ldr	r1, [r7, #0]
 8005e46:	6878      	ldr	r0, [r7, #4]
 8005e48:	f000 fceb 	bl	8006822 <USBD_CtlError>
      break;
 8005e4c:	bf00      	nop
  }

  return ret;
 8005e4e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e50:	4618      	mov	r0, r3
 8005e52:	3710      	adds	r7, #16
 8005e54:	46bd      	mov	sp, r7
 8005e56:	bd80      	pop	{r7, pc}

08005e58 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005e58:	b580      	push	{r7, lr}
 8005e5a:	b084      	sub	sp, #16
 8005e5c:	af00      	add	r7, sp, #0
 8005e5e:	6078      	str	r0, [r7, #4]
 8005e60:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8005e62:	2300      	movs	r3, #0
 8005e64:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8005e66:	683b      	ldr	r3, [r7, #0]
 8005e68:	889b      	ldrh	r3, [r3, #4]
 8005e6a:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005e6c:	683b      	ldr	r3, [r7, #0]
 8005e6e:	781b      	ldrb	r3, [r3, #0]
 8005e70:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005e74:	2b40      	cmp	r3, #64	; 0x40
 8005e76:	d007      	beq.n	8005e88 <USBD_StdEPReq+0x30>
 8005e78:	2b40      	cmp	r3, #64	; 0x40
 8005e7a:	f200 817f 	bhi.w	800617c <USBD_StdEPReq+0x324>
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d02a      	beq.n	8005ed8 <USBD_StdEPReq+0x80>
 8005e82:	2b20      	cmp	r3, #32
 8005e84:	f040 817a 	bne.w	800617c <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8005e88:	7bbb      	ldrb	r3, [r7, #14]
 8005e8a:	4619      	mov	r1, r3
 8005e8c:	6878      	ldr	r0, [r7, #4]
 8005e8e:	f7ff fe83 	bl	8005b98 <USBD_CoreFindEP>
 8005e92:	4603      	mov	r3, r0
 8005e94:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8005e96:	7b7b      	ldrb	r3, [r7, #13]
 8005e98:	2bff      	cmp	r3, #255	; 0xff
 8005e9a:	f000 8174 	beq.w	8006186 <USBD_StdEPReq+0x32e>
 8005e9e:	7b7b      	ldrb	r3, [r7, #13]
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	f040 8170 	bne.w	8006186 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8005ea6:	7b7a      	ldrb	r2, [r7, #13]
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8005eae:	7b7a      	ldrb	r2, [r7, #13]
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	32ae      	adds	r2, #174	; 0xae
 8005eb4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005eb8:	689b      	ldr	r3, [r3, #8]
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	f000 8163 	beq.w	8006186 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8005ec0:	7b7a      	ldrb	r2, [r7, #13]
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	32ae      	adds	r2, #174	; 0xae
 8005ec6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005eca:	689b      	ldr	r3, [r3, #8]
 8005ecc:	6839      	ldr	r1, [r7, #0]
 8005ece:	6878      	ldr	r0, [r7, #4]
 8005ed0:	4798      	blx	r3
 8005ed2:	4603      	mov	r3, r0
 8005ed4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005ed6:	e156      	b.n	8006186 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8005ed8:	683b      	ldr	r3, [r7, #0]
 8005eda:	785b      	ldrb	r3, [r3, #1]
 8005edc:	2b03      	cmp	r3, #3
 8005ede:	d008      	beq.n	8005ef2 <USBD_StdEPReq+0x9a>
 8005ee0:	2b03      	cmp	r3, #3
 8005ee2:	f300 8145 	bgt.w	8006170 <USBD_StdEPReq+0x318>
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	f000 809b 	beq.w	8006022 <USBD_StdEPReq+0x1ca>
 8005eec:	2b01      	cmp	r3, #1
 8005eee:	d03c      	beq.n	8005f6a <USBD_StdEPReq+0x112>
 8005ef0:	e13e      	b.n	8006170 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005ef8:	b2db      	uxtb	r3, r3
 8005efa:	2b02      	cmp	r3, #2
 8005efc:	d002      	beq.n	8005f04 <USBD_StdEPReq+0xac>
 8005efe:	2b03      	cmp	r3, #3
 8005f00:	d016      	beq.n	8005f30 <USBD_StdEPReq+0xd8>
 8005f02:	e02c      	b.n	8005f5e <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005f04:	7bbb      	ldrb	r3, [r7, #14]
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d00d      	beq.n	8005f26 <USBD_StdEPReq+0xce>
 8005f0a:	7bbb      	ldrb	r3, [r7, #14]
 8005f0c:	2b80      	cmp	r3, #128	; 0x80
 8005f0e:	d00a      	beq.n	8005f26 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8005f10:	7bbb      	ldrb	r3, [r7, #14]
 8005f12:	4619      	mov	r1, r3
 8005f14:	6878      	ldr	r0, [r7, #4]
 8005f16:	f001 f987 	bl	8007228 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8005f1a:	2180      	movs	r1, #128	; 0x80
 8005f1c:	6878      	ldr	r0, [r7, #4]
 8005f1e:	f001 f983 	bl	8007228 <USBD_LL_StallEP>
 8005f22:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8005f24:	e020      	b.n	8005f68 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8005f26:	6839      	ldr	r1, [r7, #0]
 8005f28:	6878      	ldr	r0, [r7, #4]
 8005f2a:	f000 fc7a 	bl	8006822 <USBD_CtlError>
              break;
 8005f2e:	e01b      	b.n	8005f68 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8005f30:	683b      	ldr	r3, [r7, #0]
 8005f32:	885b      	ldrh	r3, [r3, #2]
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	d10e      	bne.n	8005f56 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8005f38:	7bbb      	ldrb	r3, [r7, #14]
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	d00b      	beq.n	8005f56 <USBD_StdEPReq+0xfe>
 8005f3e:	7bbb      	ldrb	r3, [r7, #14]
 8005f40:	2b80      	cmp	r3, #128	; 0x80
 8005f42:	d008      	beq.n	8005f56 <USBD_StdEPReq+0xfe>
 8005f44:	683b      	ldr	r3, [r7, #0]
 8005f46:	88db      	ldrh	r3, [r3, #6]
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	d104      	bne.n	8005f56 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8005f4c:	7bbb      	ldrb	r3, [r7, #14]
 8005f4e:	4619      	mov	r1, r3
 8005f50:	6878      	ldr	r0, [r7, #4]
 8005f52:	f001 f969 	bl	8007228 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8005f56:	6878      	ldr	r0, [r7, #4]
 8005f58:	f000 fd2e 	bl	80069b8 <USBD_CtlSendStatus>

              break;
 8005f5c:	e004      	b.n	8005f68 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8005f5e:	6839      	ldr	r1, [r7, #0]
 8005f60:	6878      	ldr	r0, [r7, #4]
 8005f62:	f000 fc5e 	bl	8006822 <USBD_CtlError>
              break;
 8005f66:	bf00      	nop
          }
          break;
 8005f68:	e107      	b.n	800617a <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005f70:	b2db      	uxtb	r3, r3
 8005f72:	2b02      	cmp	r3, #2
 8005f74:	d002      	beq.n	8005f7c <USBD_StdEPReq+0x124>
 8005f76:	2b03      	cmp	r3, #3
 8005f78:	d016      	beq.n	8005fa8 <USBD_StdEPReq+0x150>
 8005f7a:	e04b      	b.n	8006014 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005f7c:	7bbb      	ldrb	r3, [r7, #14]
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	d00d      	beq.n	8005f9e <USBD_StdEPReq+0x146>
 8005f82:	7bbb      	ldrb	r3, [r7, #14]
 8005f84:	2b80      	cmp	r3, #128	; 0x80
 8005f86:	d00a      	beq.n	8005f9e <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8005f88:	7bbb      	ldrb	r3, [r7, #14]
 8005f8a:	4619      	mov	r1, r3
 8005f8c:	6878      	ldr	r0, [r7, #4]
 8005f8e:	f001 f94b 	bl	8007228 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8005f92:	2180      	movs	r1, #128	; 0x80
 8005f94:	6878      	ldr	r0, [r7, #4]
 8005f96:	f001 f947 	bl	8007228 <USBD_LL_StallEP>
 8005f9a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8005f9c:	e040      	b.n	8006020 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8005f9e:	6839      	ldr	r1, [r7, #0]
 8005fa0:	6878      	ldr	r0, [r7, #4]
 8005fa2:	f000 fc3e 	bl	8006822 <USBD_CtlError>
              break;
 8005fa6:	e03b      	b.n	8006020 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8005fa8:	683b      	ldr	r3, [r7, #0]
 8005faa:	885b      	ldrh	r3, [r3, #2]
 8005fac:	2b00      	cmp	r3, #0
 8005fae:	d136      	bne.n	800601e <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8005fb0:	7bbb      	ldrb	r3, [r7, #14]
 8005fb2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d004      	beq.n	8005fc4 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8005fba:	7bbb      	ldrb	r3, [r7, #14]
 8005fbc:	4619      	mov	r1, r3
 8005fbe:	6878      	ldr	r0, [r7, #4]
 8005fc0:	f001 f951 	bl	8007266 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8005fc4:	6878      	ldr	r0, [r7, #4]
 8005fc6:	f000 fcf7 	bl	80069b8 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8005fca:	7bbb      	ldrb	r3, [r7, #14]
 8005fcc:	4619      	mov	r1, r3
 8005fce:	6878      	ldr	r0, [r7, #4]
 8005fd0:	f7ff fde2 	bl	8005b98 <USBD_CoreFindEP>
 8005fd4:	4603      	mov	r3, r0
 8005fd6:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8005fd8:	7b7b      	ldrb	r3, [r7, #13]
 8005fda:	2bff      	cmp	r3, #255	; 0xff
 8005fdc:	d01f      	beq.n	800601e <USBD_StdEPReq+0x1c6>
 8005fde:	7b7b      	ldrb	r3, [r7, #13]
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	d11c      	bne.n	800601e <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8005fe4:	7b7a      	ldrb	r2, [r7, #13]
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8005fec:	7b7a      	ldrb	r2, [r7, #13]
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	32ae      	adds	r2, #174	; 0xae
 8005ff2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005ff6:	689b      	ldr	r3, [r3, #8]
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	d010      	beq.n	800601e <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8005ffc:	7b7a      	ldrb	r2, [r7, #13]
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	32ae      	adds	r2, #174	; 0xae
 8006002:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006006:	689b      	ldr	r3, [r3, #8]
 8006008:	6839      	ldr	r1, [r7, #0]
 800600a:	6878      	ldr	r0, [r7, #4]
 800600c:	4798      	blx	r3
 800600e:	4603      	mov	r3, r0
 8006010:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8006012:	e004      	b.n	800601e <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8006014:	6839      	ldr	r1, [r7, #0]
 8006016:	6878      	ldr	r0, [r7, #4]
 8006018:	f000 fc03 	bl	8006822 <USBD_CtlError>
              break;
 800601c:	e000      	b.n	8006020 <USBD_StdEPReq+0x1c8>
              break;
 800601e:	bf00      	nop
          }
          break;
 8006020:	e0ab      	b.n	800617a <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006028:	b2db      	uxtb	r3, r3
 800602a:	2b02      	cmp	r3, #2
 800602c:	d002      	beq.n	8006034 <USBD_StdEPReq+0x1dc>
 800602e:	2b03      	cmp	r3, #3
 8006030:	d032      	beq.n	8006098 <USBD_StdEPReq+0x240>
 8006032:	e097      	b.n	8006164 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006034:	7bbb      	ldrb	r3, [r7, #14]
 8006036:	2b00      	cmp	r3, #0
 8006038:	d007      	beq.n	800604a <USBD_StdEPReq+0x1f2>
 800603a:	7bbb      	ldrb	r3, [r7, #14]
 800603c:	2b80      	cmp	r3, #128	; 0x80
 800603e:	d004      	beq.n	800604a <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8006040:	6839      	ldr	r1, [r7, #0]
 8006042:	6878      	ldr	r0, [r7, #4]
 8006044:	f000 fbed 	bl	8006822 <USBD_CtlError>
                break;
 8006048:	e091      	b.n	800616e <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800604a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800604e:	2b00      	cmp	r3, #0
 8006050:	da0b      	bge.n	800606a <USBD_StdEPReq+0x212>
 8006052:	7bbb      	ldrb	r3, [r7, #14]
 8006054:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006058:	4613      	mov	r3, r2
 800605a:	009b      	lsls	r3, r3, #2
 800605c:	4413      	add	r3, r2
 800605e:	009b      	lsls	r3, r3, #2
 8006060:	3310      	adds	r3, #16
 8006062:	687a      	ldr	r2, [r7, #4]
 8006064:	4413      	add	r3, r2
 8006066:	3304      	adds	r3, #4
 8006068:	e00b      	b.n	8006082 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800606a:	7bbb      	ldrb	r3, [r7, #14]
 800606c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006070:	4613      	mov	r3, r2
 8006072:	009b      	lsls	r3, r3, #2
 8006074:	4413      	add	r3, r2
 8006076:	009b      	lsls	r3, r3, #2
 8006078:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800607c:	687a      	ldr	r2, [r7, #4]
 800607e:	4413      	add	r3, r2
 8006080:	3304      	adds	r3, #4
 8006082:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8006084:	68bb      	ldr	r3, [r7, #8]
 8006086:	2200      	movs	r2, #0
 8006088:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800608a:	68bb      	ldr	r3, [r7, #8]
 800608c:	2202      	movs	r2, #2
 800608e:	4619      	mov	r1, r3
 8006090:	6878      	ldr	r0, [r7, #4]
 8006092:	f000 fc37 	bl	8006904 <USBD_CtlSendData>
              break;
 8006096:	e06a      	b.n	800616e <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8006098:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800609c:	2b00      	cmp	r3, #0
 800609e:	da11      	bge.n	80060c4 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80060a0:	7bbb      	ldrb	r3, [r7, #14]
 80060a2:	f003 020f 	and.w	r2, r3, #15
 80060a6:	6879      	ldr	r1, [r7, #4]
 80060a8:	4613      	mov	r3, r2
 80060aa:	009b      	lsls	r3, r3, #2
 80060ac:	4413      	add	r3, r2
 80060ae:	009b      	lsls	r3, r3, #2
 80060b0:	440b      	add	r3, r1
 80060b2:	3324      	adds	r3, #36	; 0x24
 80060b4:	881b      	ldrh	r3, [r3, #0]
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	d117      	bne.n	80060ea <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80060ba:	6839      	ldr	r1, [r7, #0]
 80060bc:	6878      	ldr	r0, [r7, #4]
 80060be:	f000 fbb0 	bl	8006822 <USBD_CtlError>
                  break;
 80060c2:	e054      	b.n	800616e <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80060c4:	7bbb      	ldrb	r3, [r7, #14]
 80060c6:	f003 020f 	and.w	r2, r3, #15
 80060ca:	6879      	ldr	r1, [r7, #4]
 80060cc:	4613      	mov	r3, r2
 80060ce:	009b      	lsls	r3, r3, #2
 80060d0:	4413      	add	r3, r2
 80060d2:	009b      	lsls	r3, r3, #2
 80060d4:	440b      	add	r3, r1
 80060d6:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80060da:	881b      	ldrh	r3, [r3, #0]
 80060dc:	2b00      	cmp	r3, #0
 80060de:	d104      	bne.n	80060ea <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80060e0:	6839      	ldr	r1, [r7, #0]
 80060e2:	6878      	ldr	r0, [r7, #4]
 80060e4:	f000 fb9d 	bl	8006822 <USBD_CtlError>
                  break;
 80060e8:	e041      	b.n	800616e <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80060ea:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	da0b      	bge.n	800610a <USBD_StdEPReq+0x2b2>
 80060f2:	7bbb      	ldrb	r3, [r7, #14]
 80060f4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80060f8:	4613      	mov	r3, r2
 80060fa:	009b      	lsls	r3, r3, #2
 80060fc:	4413      	add	r3, r2
 80060fe:	009b      	lsls	r3, r3, #2
 8006100:	3310      	adds	r3, #16
 8006102:	687a      	ldr	r2, [r7, #4]
 8006104:	4413      	add	r3, r2
 8006106:	3304      	adds	r3, #4
 8006108:	e00b      	b.n	8006122 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800610a:	7bbb      	ldrb	r3, [r7, #14]
 800610c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006110:	4613      	mov	r3, r2
 8006112:	009b      	lsls	r3, r3, #2
 8006114:	4413      	add	r3, r2
 8006116:	009b      	lsls	r3, r3, #2
 8006118:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800611c:	687a      	ldr	r2, [r7, #4]
 800611e:	4413      	add	r3, r2
 8006120:	3304      	adds	r3, #4
 8006122:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8006124:	7bbb      	ldrb	r3, [r7, #14]
 8006126:	2b00      	cmp	r3, #0
 8006128:	d002      	beq.n	8006130 <USBD_StdEPReq+0x2d8>
 800612a:	7bbb      	ldrb	r3, [r7, #14]
 800612c:	2b80      	cmp	r3, #128	; 0x80
 800612e:	d103      	bne.n	8006138 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8006130:	68bb      	ldr	r3, [r7, #8]
 8006132:	2200      	movs	r2, #0
 8006134:	601a      	str	r2, [r3, #0]
 8006136:	e00e      	b.n	8006156 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8006138:	7bbb      	ldrb	r3, [r7, #14]
 800613a:	4619      	mov	r1, r3
 800613c:	6878      	ldr	r0, [r7, #4]
 800613e:	f001 f8b1 	bl	80072a4 <USBD_LL_IsStallEP>
 8006142:	4603      	mov	r3, r0
 8006144:	2b00      	cmp	r3, #0
 8006146:	d003      	beq.n	8006150 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8006148:	68bb      	ldr	r3, [r7, #8]
 800614a:	2201      	movs	r2, #1
 800614c:	601a      	str	r2, [r3, #0]
 800614e:	e002      	b.n	8006156 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8006150:	68bb      	ldr	r3, [r7, #8]
 8006152:	2200      	movs	r2, #0
 8006154:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8006156:	68bb      	ldr	r3, [r7, #8]
 8006158:	2202      	movs	r2, #2
 800615a:	4619      	mov	r1, r3
 800615c:	6878      	ldr	r0, [r7, #4]
 800615e:	f000 fbd1 	bl	8006904 <USBD_CtlSendData>
              break;
 8006162:	e004      	b.n	800616e <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8006164:	6839      	ldr	r1, [r7, #0]
 8006166:	6878      	ldr	r0, [r7, #4]
 8006168:	f000 fb5b 	bl	8006822 <USBD_CtlError>
              break;
 800616c:	bf00      	nop
          }
          break;
 800616e:	e004      	b.n	800617a <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8006170:	6839      	ldr	r1, [r7, #0]
 8006172:	6878      	ldr	r0, [r7, #4]
 8006174:	f000 fb55 	bl	8006822 <USBD_CtlError>
          break;
 8006178:	bf00      	nop
      }
      break;
 800617a:	e005      	b.n	8006188 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800617c:	6839      	ldr	r1, [r7, #0]
 800617e:	6878      	ldr	r0, [r7, #4]
 8006180:	f000 fb4f 	bl	8006822 <USBD_CtlError>
      break;
 8006184:	e000      	b.n	8006188 <USBD_StdEPReq+0x330>
      break;
 8006186:	bf00      	nop
  }

  return ret;
 8006188:	7bfb      	ldrb	r3, [r7, #15]
}
 800618a:	4618      	mov	r0, r3
 800618c:	3710      	adds	r7, #16
 800618e:	46bd      	mov	sp, r7
 8006190:	bd80      	pop	{r7, pc}
	...

08006194 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006194:	b580      	push	{r7, lr}
 8006196:	b084      	sub	sp, #16
 8006198:	af00      	add	r7, sp, #0
 800619a:	6078      	str	r0, [r7, #4]
 800619c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800619e:	2300      	movs	r3, #0
 80061a0:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80061a2:	2300      	movs	r3, #0
 80061a4:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80061a6:	2300      	movs	r3, #0
 80061a8:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80061aa:	683b      	ldr	r3, [r7, #0]
 80061ac:	885b      	ldrh	r3, [r3, #2]
 80061ae:	0a1b      	lsrs	r3, r3, #8
 80061b0:	b29b      	uxth	r3, r3
 80061b2:	3b01      	subs	r3, #1
 80061b4:	2b06      	cmp	r3, #6
 80061b6:	f200 8128 	bhi.w	800640a <USBD_GetDescriptor+0x276>
 80061ba:	a201      	add	r2, pc, #4	; (adr r2, 80061c0 <USBD_GetDescriptor+0x2c>)
 80061bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061c0:	080061dd 	.word	0x080061dd
 80061c4:	080061f5 	.word	0x080061f5
 80061c8:	08006235 	.word	0x08006235
 80061cc:	0800640b 	.word	0x0800640b
 80061d0:	0800640b 	.word	0x0800640b
 80061d4:	080063ab 	.word	0x080063ab
 80061d8:	080063d7 	.word	0x080063d7
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	687a      	ldr	r2, [r7, #4]
 80061e6:	7c12      	ldrb	r2, [r2, #16]
 80061e8:	f107 0108 	add.w	r1, r7, #8
 80061ec:	4610      	mov	r0, r2
 80061ee:	4798      	blx	r3
 80061f0:	60f8      	str	r0, [r7, #12]
      break;
 80061f2:	e112      	b.n	800641a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	7c1b      	ldrb	r3, [r3, #16]
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	d10d      	bne.n	8006218 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006202:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006204:	f107 0208 	add.w	r2, r7, #8
 8006208:	4610      	mov	r0, r2
 800620a:	4798      	blx	r3
 800620c:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	3301      	adds	r3, #1
 8006212:	2202      	movs	r2, #2
 8006214:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8006216:	e100      	b.n	800641a <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800621e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006220:	f107 0208 	add.w	r2, r7, #8
 8006224:	4610      	mov	r0, r2
 8006226:	4798      	blx	r3
 8006228:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	3301      	adds	r3, #1
 800622e:	2202      	movs	r2, #2
 8006230:	701a      	strb	r2, [r3, #0]
      break;
 8006232:	e0f2      	b.n	800641a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8006234:	683b      	ldr	r3, [r7, #0]
 8006236:	885b      	ldrh	r3, [r3, #2]
 8006238:	b2db      	uxtb	r3, r3
 800623a:	2b05      	cmp	r3, #5
 800623c:	f200 80ac 	bhi.w	8006398 <USBD_GetDescriptor+0x204>
 8006240:	a201      	add	r2, pc, #4	; (adr r2, 8006248 <USBD_GetDescriptor+0xb4>)
 8006242:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006246:	bf00      	nop
 8006248:	08006261 	.word	0x08006261
 800624c:	08006295 	.word	0x08006295
 8006250:	080062c9 	.word	0x080062c9
 8006254:	080062fd 	.word	0x080062fd
 8006258:	08006331 	.word	0x08006331
 800625c:	08006365 	.word	0x08006365
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006266:	685b      	ldr	r3, [r3, #4]
 8006268:	2b00      	cmp	r3, #0
 800626a:	d00b      	beq.n	8006284 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006272:	685b      	ldr	r3, [r3, #4]
 8006274:	687a      	ldr	r2, [r7, #4]
 8006276:	7c12      	ldrb	r2, [r2, #16]
 8006278:	f107 0108 	add.w	r1, r7, #8
 800627c:	4610      	mov	r0, r2
 800627e:	4798      	blx	r3
 8006280:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006282:	e091      	b.n	80063a8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006284:	6839      	ldr	r1, [r7, #0]
 8006286:	6878      	ldr	r0, [r7, #4]
 8006288:	f000 facb 	bl	8006822 <USBD_CtlError>
            err++;
 800628c:	7afb      	ldrb	r3, [r7, #11]
 800628e:	3301      	adds	r3, #1
 8006290:	72fb      	strb	r3, [r7, #11]
          break;
 8006292:	e089      	b.n	80063a8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800629a:	689b      	ldr	r3, [r3, #8]
 800629c:	2b00      	cmp	r3, #0
 800629e:	d00b      	beq.n	80062b8 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80062a6:	689b      	ldr	r3, [r3, #8]
 80062a8:	687a      	ldr	r2, [r7, #4]
 80062aa:	7c12      	ldrb	r2, [r2, #16]
 80062ac:	f107 0108 	add.w	r1, r7, #8
 80062b0:	4610      	mov	r0, r2
 80062b2:	4798      	blx	r3
 80062b4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80062b6:	e077      	b.n	80063a8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80062b8:	6839      	ldr	r1, [r7, #0]
 80062ba:	6878      	ldr	r0, [r7, #4]
 80062bc:	f000 fab1 	bl	8006822 <USBD_CtlError>
            err++;
 80062c0:	7afb      	ldrb	r3, [r7, #11]
 80062c2:	3301      	adds	r3, #1
 80062c4:	72fb      	strb	r3, [r7, #11]
          break;
 80062c6:	e06f      	b.n	80063a8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80062ce:	68db      	ldr	r3, [r3, #12]
 80062d0:	2b00      	cmp	r3, #0
 80062d2:	d00b      	beq.n	80062ec <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80062da:	68db      	ldr	r3, [r3, #12]
 80062dc:	687a      	ldr	r2, [r7, #4]
 80062de:	7c12      	ldrb	r2, [r2, #16]
 80062e0:	f107 0108 	add.w	r1, r7, #8
 80062e4:	4610      	mov	r0, r2
 80062e6:	4798      	blx	r3
 80062e8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80062ea:	e05d      	b.n	80063a8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80062ec:	6839      	ldr	r1, [r7, #0]
 80062ee:	6878      	ldr	r0, [r7, #4]
 80062f0:	f000 fa97 	bl	8006822 <USBD_CtlError>
            err++;
 80062f4:	7afb      	ldrb	r3, [r7, #11]
 80062f6:	3301      	adds	r3, #1
 80062f8:	72fb      	strb	r3, [r7, #11]
          break;
 80062fa:	e055      	b.n	80063a8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006302:	691b      	ldr	r3, [r3, #16]
 8006304:	2b00      	cmp	r3, #0
 8006306:	d00b      	beq.n	8006320 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800630e:	691b      	ldr	r3, [r3, #16]
 8006310:	687a      	ldr	r2, [r7, #4]
 8006312:	7c12      	ldrb	r2, [r2, #16]
 8006314:	f107 0108 	add.w	r1, r7, #8
 8006318:	4610      	mov	r0, r2
 800631a:	4798      	blx	r3
 800631c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800631e:	e043      	b.n	80063a8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006320:	6839      	ldr	r1, [r7, #0]
 8006322:	6878      	ldr	r0, [r7, #4]
 8006324:	f000 fa7d 	bl	8006822 <USBD_CtlError>
            err++;
 8006328:	7afb      	ldrb	r3, [r7, #11]
 800632a:	3301      	adds	r3, #1
 800632c:	72fb      	strb	r3, [r7, #11]
          break;
 800632e:	e03b      	b.n	80063a8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006336:	695b      	ldr	r3, [r3, #20]
 8006338:	2b00      	cmp	r3, #0
 800633a:	d00b      	beq.n	8006354 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006342:	695b      	ldr	r3, [r3, #20]
 8006344:	687a      	ldr	r2, [r7, #4]
 8006346:	7c12      	ldrb	r2, [r2, #16]
 8006348:	f107 0108 	add.w	r1, r7, #8
 800634c:	4610      	mov	r0, r2
 800634e:	4798      	blx	r3
 8006350:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006352:	e029      	b.n	80063a8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006354:	6839      	ldr	r1, [r7, #0]
 8006356:	6878      	ldr	r0, [r7, #4]
 8006358:	f000 fa63 	bl	8006822 <USBD_CtlError>
            err++;
 800635c:	7afb      	ldrb	r3, [r7, #11]
 800635e:	3301      	adds	r3, #1
 8006360:	72fb      	strb	r3, [r7, #11]
          break;
 8006362:	e021      	b.n	80063a8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800636a:	699b      	ldr	r3, [r3, #24]
 800636c:	2b00      	cmp	r3, #0
 800636e:	d00b      	beq.n	8006388 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006376:	699b      	ldr	r3, [r3, #24]
 8006378:	687a      	ldr	r2, [r7, #4]
 800637a:	7c12      	ldrb	r2, [r2, #16]
 800637c:	f107 0108 	add.w	r1, r7, #8
 8006380:	4610      	mov	r0, r2
 8006382:	4798      	blx	r3
 8006384:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006386:	e00f      	b.n	80063a8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006388:	6839      	ldr	r1, [r7, #0]
 800638a:	6878      	ldr	r0, [r7, #4]
 800638c:	f000 fa49 	bl	8006822 <USBD_CtlError>
            err++;
 8006390:	7afb      	ldrb	r3, [r7, #11]
 8006392:	3301      	adds	r3, #1
 8006394:	72fb      	strb	r3, [r7, #11]
          break;
 8006396:	e007      	b.n	80063a8 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8006398:	6839      	ldr	r1, [r7, #0]
 800639a:	6878      	ldr	r0, [r7, #4]
 800639c:	f000 fa41 	bl	8006822 <USBD_CtlError>
          err++;
 80063a0:	7afb      	ldrb	r3, [r7, #11]
 80063a2:	3301      	adds	r3, #1
 80063a4:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 80063a6:	bf00      	nop
      }
      break;
 80063a8:	e037      	b.n	800641a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	7c1b      	ldrb	r3, [r3, #16]
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d109      	bne.n	80063c6 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80063b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80063ba:	f107 0208 	add.w	r2, r7, #8
 80063be:	4610      	mov	r0, r2
 80063c0:	4798      	blx	r3
 80063c2:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80063c4:	e029      	b.n	800641a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80063c6:	6839      	ldr	r1, [r7, #0]
 80063c8:	6878      	ldr	r0, [r7, #4]
 80063ca:	f000 fa2a 	bl	8006822 <USBD_CtlError>
        err++;
 80063ce:	7afb      	ldrb	r3, [r7, #11]
 80063d0:	3301      	adds	r3, #1
 80063d2:	72fb      	strb	r3, [r7, #11]
      break;
 80063d4:	e021      	b.n	800641a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	7c1b      	ldrb	r3, [r3, #16]
 80063da:	2b00      	cmp	r3, #0
 80063dc:	d10d      	bne.n	80063fa <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80063e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063e6:	f107 0208 	add.w	r2, r7, #8
 80063ea:	4610      	mov	r0, r2
 80063ec:	4798      	blx	r3
 80063ee:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	3301      	adds	r3, #1
 80063f4:	2207      	movs	r2, #7
 80063f6:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80063f8:	e00f      	b.n	800641a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80063fa:	6839      	ldr	r1, [r7, #0]
 80063fc:	6878      	ldr	r0, [r7, #4]
 80063fe:	f000 fa10 	bl	8006822 <USBD_CtlError>
        err++;
 8006402:	7afb      	ldrb	r3, [r7, #11]
 8006404:	3301      	adds	r3, #1
 8006406:	72fb      	strb	r3, [r7, #11]
      break;
 8006408:	e007      	b.n	800641a <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800640a:	6839      	ldr	r1, [r7, #0]
 800640c:	6878      	ldr	r0, [r7, #4]
 800640e:	f000 fa08 	bl	8006822 <USBD_CtlError>
      err++;
 8006412:	7afb      	ldrb	r3, [r7, #11]
 8006414:	3301      	adds	r3, #1
 8006416:	72fb      	strb	r3, [r7, #11]
      break;
 8006418:	bf00      	nop
  }

  if (err != 0U)
 800641a:	7afb      	ldrb	r3, [r7, #11]
 800641c:	2b00      	cmp	r3, #0
 800641e:	d11e      	bne.n	800645e <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8006420:	683b      	ldr	r3, [r7, #0]
 8006422:	88db      	ldrh	r3, [r3, #6]
 8006424:	2b00      	cmp	r3, #0
 8006426:	d016      	beq.n	8006456 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8006428:	893b      	ldrh	r3, [r7, #8]
 800642a:	2b00      	cmp	r3, #0
 800642c:	d00e      	beq.n	800644c <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800642e:	683b      	ldr	r3, [r7, #0]
 8006430:	88da      	ldrh	r2, [r3, #6]
 8006432:	893b      	ldrh	r3, [r7, #8]
 8006434:	4293      	cmp	r3, r2
 8006436:	bf28      	it	cs
 8006438:	4613      	movcs	r3, r2
 800643a:	b29b      	uxth	r3, r3
 800643c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800643e:	893b      	ldrh	r3, [r7, #8]
 8006440:	461a      	mov	r2, r3
 8006442:	68f9      	ldr	r1, [r7, #12]
 8006444:	6878      	ldr	r0, [r7, #4]
 8006446:	f000 fa5d 	bl	8006904 <USBD_CtlSendData>
 800644a:	e009      	b.n	8006460 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800644c:	6839      	ldr	r1, [r7, #0]
 800644e:	6878      	ldr	r0, [r7, #4]
 8006450:	f000 f9e7 	bl	8006822 <USBD_CtlError>
 8006454:	e004      	b.n	8006460 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8006456:	6878      	ldr	r0, [r7, #4]
 8006458:	f000 faae 	bl	80069b8 <USBD_CtlSendStatus>
 800645c:	e000      	b.n	8006460 <USBD_GetDescriptor+0x2cc>
    return;
 800645e:	bf00      	nop
  }
}
 8006460:	3710      	adds	r7, #16
 8006462:	46bd      	mov	sp, r7
 8006464:	bd80      	pop	{r7, pc}
 8006466:	bf00      	nop

08006468 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006468:	b580      	push	{r7, lr}
 800646a:	b084      	sub	sp, #16
 800646c:	af00      	add	r7, sp, #0
 800646e:	6078      	str	r0, [r7, #4]
 8006470:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8006472:	683b      	ldr	r3, [r7, #0]
 8006474:	889b      	ldrh	r3, [r3, #4]
 8006476:	2b00      	cmp	r3, #0
 8006478:	d131      	bne.n	80064de <USBD_SetAddress+0x76>
 800647a:	683b      	ldr	r3, [r7, #0]
 800647c:	88db      	ldrh	r3, [r3, #6]
 800647e:	2b00      	cmp	r3, #0
 8006480:	d12d      	bne.n	80064de <USBD_SetAddress+0x76>
 8006482:	683b      	ldr	r3, [r7, #0]
 8006484:	885b      	ldrh	r3, [r3, #2]
 8006486:	2b7f      	cmp	r3, #127	; 0x7f
 8006488:	d829      	bhi.n	80064de <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800648a:	683b      	ldr	r3, [r7, #0]
 800648c:	885b      	ldrh	r3, [r3, #2]
 800648e:	b2db      	uxtb	r3, r3
 8006490:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006494:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800649c:	b2db      	uxtb	r3, r3
 800649e:	2b03      	cmp	r3, #3
 80064a0:	d104      	bne.n	80064ac <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 80064a2:	6839      	ldr	r1, [r7, #0]
 80064a4:	6878      	ldr	r0, [r7, #4]
 80064a6:	f000 f9bc 	bl	8006822 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80064aa:	e01d      	b.n	80064e8 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	7bfa      	ldrb	r2, [r7, #15]
 80064b0:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 80064b4:	7bfb      	ldrb	r3, [r7, #15]
 80064b6:	4619      	mov	r1, r3
 80064b8:	6878      	ldr	r0, [r7, #4]
 80064ba:	f000 ff1f 	bl	80072fc <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 80064be:	6878      	ldr	r0, [r7, #4]
 80064c0:	f000 fa7a 	bl	80069b8 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80064c4:	7bfb      	ldrb	r3, [r7, #15]
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	d004      	beq.n	80064d4 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	2202      	movs	r2, #2
 80064ce:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80064d2:	e009      	b.n	80064e8 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	2201      	movs	r2, #1
 80064d8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80064dc:	e004      	b.n	80064e8 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80064de:	6839      	ldr	r1, [r7, #0]
 80064e0:	6878      	ldr	r0, [r7, #4]
 80064e2:	f000 f99e 	bl	8006822 <USBD_CtlError>
  }
}
 80064e6:	bf00      	nop
 80064e8:	bf00      	nop
 80064ea:	3710      	adds	r7, #16
 80064ec:	46bd      	mov	sp, r7
 80064ee:	bd80      	pop	{r7, pc}

080064f0 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80064f0:	b580      	push	{r7, lr}
 80064f2:	b084      	sub	sp, #16
 80064f4:	af00      	add	r7, sp, #0
 80064f6:	6078      	str	r0, [r7, #4]
 80064f8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80064fa:	2300      	movs	r3, #0
 80064fc:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80064fe:	683b      	ldr	r3, [r7, #0]
 8006500:	885b      	ldrh	r3, [r3, #2]
 8006502:	b2da      	uxtb	r2, r3
 8006504:	4b4e      	ldr	r3, [pc, #312]	; (8006640 <USBD_SetConfig+0x150>)
 8006506:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8006508:	4b4d      	ldr	r3, [pc, #308]	; (8006640 <USBD_SetConfig+0x150>)
 800650a:	781b      	ldrb	r3, [r3, #0]
 800650c:	2b01      	cmp	r3, #1
 800650e:	d905      	bls.n	800651c <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8006510:	6839      	ldr	r1, [r7, #0]
 8006512:	6878      	ldr	r0, [r7, #4]
 8006514:	f000 f985 	bl	8006822 <USBD_CtlError>
    return USBD_FAIL;
 8006518:	2303      	movs	r3, #3
 800651a:	e08c      	b.n	8006636 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006522:	b2db      	uxtb	r3, r3
 8006524:	2b02      	cmp	r3, #2
 8006526:	d002      	beq.n	800652e <USBD_SetConfig+0x3e>
 8006528:	2b03      	cmp	r3, #3
 800652a:	d029      	beq.n	8006580 <USBD_SetConfig+0x90>
 800652c:	e075      	b.n	800661a <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800652e:	4b44      	ldr	r3, [pc, #272]	; (8006640 <USBD_SetConfig+0x150>)
 8006530:	781b      	ldrb	r3, [r3, #0]
 8006532:	2b00      	cmp	r3, #0
 8006534:	d020      	beq.n	8006578 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8006536:	4b42      	ldr	r3, [pc, #264]	; (8006640 <USBD_SetConfig+0x150>)
 8006538:	781b      	ldrb	r3, [r3, #0]
 800653a:	461a      	mov	r2, r3
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8006540:	4b3f      	ldr	r3, [pc, #252]	; (8006640 <USBD_SetConfig+0x150>)
 8006542:	781b      	ldrb	r3, [r3, #0]
 8006544:	4619      	mov	r1, r3
 8006546:	6878      	ldr	r0, [r7, #4]
 8006548:	f7fe ffe7 	bl	800551a <USBD_SetClassConfig>
 800654c:	4603      	mov	r3, r0
 800654e:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8006550:	7bfb      	ldrb	r3, [r7, #15]
 8006552:	2b00      	cmp	r3, #0
 8006554:	d008      	beq.n	8006568 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8006556:	6839      	ldr	r1, [r7, #0]
 8006558:	6878      	ldr	r0, [r7, #4]
 800655a:	f000 f962 	bl	8006822 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	2202      	movs	r2, #2
 8006562:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8006566:	e065      	b.n	8006634 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8006568:	6878      	ldr	r0, [r7, #4]
 800656a:	f000 fa25 	bl	80069b8 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	2203      	movs	r2, #3
 8006572:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8006576:	e05d      	b.n	8006634 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8006578:	6878      	ldr	r0, [r7, #4]
 800657a:	f000 fa1d 	bl	80069b8 <USBD_CtlSendStatus>
      break;
 800657e:	e059      	b.n	8006634 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8006580:	4b2f      	ldr	r3, [pc, #188]	; (8006640 <USBD_SetConfig+0x150>)
 8006582:	781b      	ldrb	r3, [r3, #0]
 8006584:	2b00      	cmp	r3, #0
 8006586:	d112      	bne.n	80065ae <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	2202      	movs	r2, #2
 800658c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8006590:	4b2b      	ldr	r3, [pc, #172]	; (8006640 <USBD_SetConfig+0x150>)
 8006592:	781b      	ldrb	r3, [r3, #0]
 8006594:	461a      	mov	r2, r3
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800659a:	4b29      	ldr	r3, [pc, #164]	; (8006640 <USBD_SetConfig+0x150>)
 800659c:	781b      	ldrb	r3, [r3, #0]
 800659e:	4619      	mov	r1, r3
 80065a0:	6878      	ldr	r0, [r7, #4]
 80065a2:	f7fe ffd6 	bl	8005552 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 80065a6:	6878      	ldr	r0, [r7, #4]
 80065a8:	f000 fa06 	bl	80069b8 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80065ac:	e042      	b.n	8006634 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 80065ae:	4b24      	ldr	r3, [pc, #144]	; (8006640 <USBD_SetConfig+0x150>)
 80065b0:	781b      	ldrb	r3, [r3, #0]
 80065b2:	461a      	mov	r2, r3
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	685b      	ldr	r3, [r3, #4]
 80065b8:	429a      	cmp	r2, r3
 80065ba:	d02a      	beq.n	8006612 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	685b      	ldr	r3, [r3, #4]
 80065c0:	b2db      	uxtb	r3, r3
 80065c2:	4619      	mov	r1, r3
 80065c4:	6878      	ldr	r0, [r7, #4]
 80065c6:	f7fe ffc4 	bl	8005552 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 80065ca:	4b1d      	ldr	r3, [pc, #116]	; (8006640 <USBD_SetConfig+0x150>)
 80065cc:	781b      	ldrb	r3, [r3, #0]
 80065ce:	461a      	mov	r2, r3
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 80065d4:	4b1a      	ldr	r3, [pc, #104]	; (8006640 <USBD_SetConfig+0x150>)
 80065d6:	781b      	ldrb	r3, [r3, #0]
 80065d8:	4619      	mov	r1, r3
 80065da:	6878      	ldr	r0, [r7, #4]
 80065dc:	f7fe ff9d 	bl	800551a <USBD_SetClassConfig>
 80065e0:	4603      	mov	r3, r0
 80065e2:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 80065e4:	7bfb      	ldrb	r3, [r7, #15]
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	d00f      	beq.n	800660a <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 80065ea:	6839      	ldr	r1, [r7, #0]
 80065ec:	6878      	ldr	r0, [r7, #4]
 80065ee:	f000 f918 	bl	8006822 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	685b      	ldr	r3, [r3, #4]
 80065f6:	b2db      	uxtb	r3, r3
 80065f8:	4619      	mov	r1, r3
 80065fa:	6878      	ldr	r0, [r7, #4]
 80065fc:	f7fe ffa9 	bl	8005552 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	2202      	movs	r2, #2
 8006604:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8006608:	e014      	b.n	8006634 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800660a:	6878      	ldr	r0, [r7, #4]
 800660c:	f000 f9d4 	bl	80069b8 <USBD_CtlSendStatus>
      break;
 8006610:	e010      	b.n	8006634 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8006612:	6878      	ldr	r0, [r7, #4]
 8006614:	f000 f9d0 	bl	80069b8 <USBD_CtlSendStatus>
      break;
 8006618:	e00c      	b.n	8006634 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800661a:	6839      	ldr	r1, [r7, #0]
 800661c:	6878      	ldr	r0, [r7, #4]
 800661e:	f000 f900 	bl	8006822 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8006622:	4b07      	ldr	r3, [pc, #28]	; (8006640 <USBD_SetConfig+0x150>)
 8006624:	781b      	ldrb	r3, [r3, #0]
 8006626:	4619      	mov	r1, r3
 8006628:	6878      	ldr	r0, [r7, #4]
 800662a:	f7fe ff92 	bl	8005552 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800662e:	2303      	movs	r3, #3
 8006630:	73fb      	strb	r3, [r7, #15]
      break;
 8006632:	bf00      	nop
  }

  return ret;
 8006634:	7bfb      	ldrb	r3, [r7, #15]
}
 8006636:	4618      	mov	r0, r3
 8006638:	3710      	adds	r7, #16
 800663a:	46bd      	mov	sp, r7
 800663c:	bd80      	pop	{r7, pc}
 800663e:	bf00      	nop
 8006640:	20000210 	.word	0x20000210

08006644 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006644:	b580      	push	{r7, lr}
 8006646:	b082      	sub	sp, #8
 8006648:	af00      	add	r7, sp, #0
 800664a:	6078      	str	r0, [r7, #4]
 800664c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800664e:	683b      	ldr	r3, [r7, #0]
 8006650:	88db      	ldrh	r3, [r3, #6]
 8006652:	2b01      	cmp	r3, #1
 8006654:	d004      	beq.n	8006660 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8006656:	6839      	ldr	r1, [r7, #0]
 8006658:	6878      	ldr	r0, [r7, #4]
 800665a:	f000 f8e2 	bl	8006822 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800665e:	e023      	b.n	80066a8 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006666:	b2db      	uxtb	r3, r3
 8006668:	2b02      	cmp	r3, #2
 800666a:	dc02      	bgt.n	8006672 <USBD_GetConfig+0x2e>
 800666c:	2b00      	cmp	r3, #0
 800666e:	dc03      	bgt.n	8006678 <USBD_GetConfig+0x34>
 8006670:	e015      	b.n	800669e <USBD_GetConfig+0x5a>
 8006672:	2b03      	cmp	r3, #3
 8006674:	d00b      	beq.n	800668e <USBD_GetConfig+0x4a>
 8006676:	e012      	b.n	800669e <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	2200      	movs	r2, #0
 800667c:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	3308      	adds	r3, #8
 8006682:	2201      	movs	r2, #1
 8006684:	4619      	mov	r1, r3
 8006686:	6878      	ldr	r0, [r7, #4]
 8006688:	f000 f93c 	bl	8006904 <USBD_CtlSendData>
        break;
 800668c:	e00c      	b.n	80066a8 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	3304      	adds	r3, #4
 8006692:	2201      	movs	r2, #1
 8006694:	4619      	mov	r1, r3
 8006696:	6878      	ldr	r0, [r7, #4]
 8006698:	f000 f934 	bl	8006904 <USBD_CtlSendData>
        break;
 800669c:	e004      	b.n	80066a8 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800669e:	6839      	ldr	r1, [r7, #0]
 80066a0:	6878      	ldr	r0, [r7, #4]
 80066a2:	f000 f8be 	bl	8006822 <USBD_CtlError>
        break;
 80066a6:	bf00      	nop
}
 80066a8:	bf00      	nop
 80066aa:	3708      	adds	r7, #8
 80066ac:	46bd      	mov	sp, r7
 80066ae:	bd80      	pop	{r7, pc}

080066b0 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80066b0:	b580      	push	{r7, lr}
 80066b2:	b082      	sub	sp, #8
 80066b4:	af00      	add	r7, sp, #0
 80066b6:	6078      	str	r0, [r7, #4]
 80066b8:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80066c0:	b2db      	uxtb	r3, r3
 80066c2:	3b01      	subs	r3, #1
 80066c4:	2b02      	cmp	r3, #2
 80066c6:	d81e      	bhi.n	8006706 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 80066c8:	683b      	ldr	r3, [r7, #0]
 80066ca:	88db      	ldrh	r3, [r3, #6]
 80066cc:	2b02      	cmp	r3, #2
 80066ce:	d004      	beq.n	80066da <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 80066d0:	6839      	ldr	r1, [r7, #0]
 80066d2:	6878      	ldr	r0, [r7, #4]
 80066d4:	f000 f8a5 	bl	8006822 <USBD_CtlError>
        break;
 80066d8:	e01a      	b.n	8006710 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	2201      	movs	r2, #1
 80066de:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	d005      	beq.n	80066f6 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	68db      	ldr	r3, [r3, #12]
 80066ee:	f043 0202 	orr.w	r2, r3, #2
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	330c      	adds	r3, #12
 80066fa:	2202      	movs	r2, #2
 80066fc:	4619      	mov	r1, r3
 80066fe:	6878      	ldr	r0, [r7, #4]
 8006700:	f000 f900 	bl	8006904 <USBD_CtlSendData>
      break;
 8006704:	e004      	b.n	8006710 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8006706:	6839      	ldr	r1, [r7, #0]
 8006708:	6878      	ldr	r0, [r7, #4]
 800670a:	f000 f88a 	bl	8006822 <USBD_CtlError>
      break;
 800670e:	bf00      	nop
  }
}
 8006710:	bf00      	nop
 8006712:	3708      	adds	r7, #8
 8006714:	46bd      	mov	sp, r7
 8006716:	bd80      	pop	{r7, pc}

08006718 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006718:	b580      	push	{r7, lr}
 800671a:	b082      	sub	sp, #8
 800671c:	af00      	add	r7, sp, #0
 800671e:	6078      	str	r0, [r7, #4]
 8006720:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006722:	683b      	ldr	r3, [r7, #0]
 8006724:	885b      	ldrh	r3, [r3, #2]
 8006726:	2b01      	cmp	r3, #1
 8006728:	d107      	bne.n	800673a <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	2201      	movs	r2, #1
 800672e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8006732:	6878      	ldr	r0, [r7, #4]
 8006734:	f000 f940 	bl	80069b8 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8006738:	e013      	b.n	8006762 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800673a:	683b      	ldr	r3, [r7, #0]
 800673c:	885b      	ldrh	r3, [r3, #2]
 800673e:	2b02      	cmp	r3, #2
 8006740:	d10b      	bne.n	800675a <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 8006742:	683b      	ldr	r3, [r7, #0]
 8006744:	889b      	ldrh	r3, [r3, #4]
 8006746:	0a1b      	lsrs	r3, r3, #8
 8006748:	b29b      	uxth	r3, r3
 800674a:	b2da      	uxtb	r2, r3
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8006752:	6878      	ldr	r0, [r7, #4]
 8006754:	f000 f930 	bl	80069b8 <USBD_CtlSendStatus>
}
 8006758:	e003      	b.n	8006762 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800675a:	6839      	ldr	r1, [r7, #0]
 800675c:	6878      	ldr	r0, [r7, #4]
 800675e:	f000 f860 	bl	8006822 <USBD_CtlError>
}
 8006762:	bf00      	nop
 8006764:	3708      	adds	r7, #8
 8006766:	46bd      	mov	sp, r7
 8006768:	bd80      	pop	{r7, pc}

0800676a <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800676a:	b580      	push	{r7, lr}
 800676c:	b082      	sub	sp, #8
 800676e:	af00      	add	r7, sp, #0
 8006770:	6078      	str	r0, [r7, #4]
 8006772:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800677a:	b2db      	uxtb	r3, r3
 800677c:	3b01      	subs	r3, #1
 800677e:	2b02      	cmp	r3, #2
 8006780:	d80b      	bhi.n	800679a <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006782:	683b      	ldr	r3, [r7, #0]
 8006784:	885b      	ldrh	r3, [r3, #2]
 8006786:	2b01      	cmp	r3, #1
 8006788:	d10c      	bne.n	80067a4 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	2200      	movs	r2, #0
 800678e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8006792:	6878      	ldr	r0, [r7, #4]
 8006794:	f000 f910 	bl	80069b8 <USBD_CtlSendStatus>
      }
      break;
 8006798:	e004      	b.n	80067a4 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800679a:	6839      	ldr	r1, [r7, #0]
 800679c:	6878      	ldr	r0, [r7, #4]
 800679e:	f000 f840 	bl	8006822 <USBD_CtlError>
      break;
 80067a2:	e000      	b.n	80067a6 <USBD_ClrFeature+0x3c>
      break;
 80067a4:	bf00      	nop
  }
}
 80067a6:	bf00      	nop
 80067a8:	3708      	adds	r7, #8
 80067aa:	46bd      	mov	sp, r7
 80067ac:	bd80      	pop	{r7, pc}

080067ae <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80067ae:	b580      	push	{r7, lr}
 80067b0:	b084      	sub	sp, #16
 80067b2:	af00      	add	r7, sp, #0
 80067b4:	6078      	str	r0, [r7, #4]
 80067b6:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 80067b8:	683b      	ldr	r3, [r7, #0]
 80067ba:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	781a      	ldrb	r2, [r3, #0]
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	701a      	strb	r2, [r3, #0]

  pbuff++;
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	3301      	adds	r3, #1
 80067c8:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 80067ca:	68fb      	ldr	r3, [r7, #12]
 80067cc:	781a      	ldrb	r2, [r3, #0]
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	705a      	strb	r2, [r3, #1]

  pbuff++;
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	3301      	adds	r3, #1
 80067d6:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 80067d8:	68f8      	ldr	r0, [r7, #12]
 80067da:	f7ff fa41 	bl	8005c60 <SWAPBYTE>
 80067de:	4603      	mov	r3, r0
 80067e0:	461a      	mov	r2, r3
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	805a      	strh	r2, [r3, #2]

  pbuff++;
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	3301      	adds	r3, #1
 80067ea:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	3301      	adds	r3, #1
 80067f0:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 80067f2:	68f8      	ldr	r0, [r7, #12]
 80067f4:	f7ff fa34 	bl	8005c60 <SWAPBYTE>
 80067f8:	4603      	mov	r3, r0
 80067fa:	461a      	mov	r2, r3
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	3301      	adds	r3, #1
 8006804:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	3301      	adds	r3, #1
 800680a:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800680c:	68f8      	ldr	r0, [r7, #12]
 800680e:	f7ff fa27 	bl	8005c60 <SWAPBYTE>
 8006812:	4603      	mov	r3, r0
 8006814:	461a      	mov	r2, r3
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	80da      	strh	r2, [r3, #6]
}
 800681a:	bf00      	nop
 800681c:	3710      	adds	r7, #16
 800681e:	46bd      	mov	sp, r7
 8006820:	bd80      	pop	{r7, pc}

08006822 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006822:	b580      	push	{r7, lr}
 8006824:	b082      	sub	sp, #8
 8006826:	af00      	add	r7, sp, #0
 8006828:	6078      	str	r0, [r7, #4]
 800682a:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800682c:	2180      	movs	r1, #128	; 0x80
 800682e:	6878      	ldr	r0, [r7, #4]
 8006830:	f000 fcfa 	bl	8007228 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8006834:	2100      	movs	r1, #0
 8006836:	6878      	ldr	r0, [r7, #4]
 8006838:	f000 fcf6 	bl	8007228 <USBD_LL_StallEP>
}
 800683c:	bf00      	nop
 800683e:	3708      	adds	r7, #8
 8006840:	46bd      	mov	sp, r7
 8006842:	bd80      	pop	{r7, pc}

08006844 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8006844:	b580      	push	{r7, lr}
 8006846:	b086      	sub	sp, #24
 8006848:	af00      	add	r7, sp, #0
 800684a:	60f8      	str	r0, [r7, #12]
 800684c:	60b9      	str	r1, [r7, #8]
 800684e:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8006850:	2300      	movs	r3, #0
 8006852:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	2b00      	cmp	r3, #0
 8006858:	d036      	beq.n	80068c8 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800685e:	6938      	ldr	r0, [r7, #16]
 8006860:	f000 f836 	bl	80068d0 <USBD_GetLen>
 8006864:	4603      	mov	r3, r0
 8006866:	3301      	adds	r3, #1
 8006868:	b29b      	uxth	r3, r3
 800686a:	005b      	lsls	r3, r3, #1
 800686c:	b29a      	uxth	r2, r3
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8006872:	7dfb      	ldrb	r3, [r7, #23]
 8006874:	68ba      	ldr	r2, [r7, #8]
 8006876:	4413      	add	r3, r2
 8006878:	687a      	ldr	r2, [r7, #4]
 800687a:	7812      	ldrb	r2, [r2, #0]
 800687c:	701a      	strb	r2, [r3, #0]
  idx++;
 800687e:	7dfb      	ldrb	r3, [r7, #23]
 8006880:	3301      	adds	r3, #1
 8006882:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8006884:	7dfb      	ldrb	r3, [r7, #23]
 8006886:	68ba      	ldr	r2, [r7, #8]
 8006888:	4413      	add	r3, r2
 800688a:	2203      	movs	r2, #3
 800688c:	701a      	strb	r2, [r3, #0]
  idx++;
 800688e:	7dfb      	ldrb	r3, [r7, #23]
 8006890:	3301      	adds	r3, #1
 8006892:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8006894:	e013      	b.n	80068be <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8006896:	7dfb      	ldrb	r3, [r7, #23]
 8006898:	68ba      	ldr	r2, [r7, #8]
 800689a:	4413      	add	r3, r2
 800689c:	693a      	ldr	r2, [r7, #16]
 800689e:	7812      	ldrb	r2, [r2, #0]
 80068a0:	701a      	strb	r2, [r3, #0]
    pdesc++;
 80068a2:	693b      	ldr	r3, [r7, #16]
 80068a4:	3301      	adds	r3, #1
 80068a6:	613b      	str	r3, [r7, #16]
    idx++;
 80068a8:	7dfb      	ldrb	r3, [r7, #23]
 80068aa:	3301      	adds	r3, #1
 80068ac:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 80068ae:	7dfb      	ldrb	r3, [r7, #23]
 80068b0:	68ba      	ldr	r2, [r7, #8]
 80068b2:	4413      	add	r3, r2
 80068b4:	2200      	movs	r2, #0
 80068b6:	701a      	strb	r2, [r3, #0]
    idx++;
 80068b8:	7dfb      	ldrb	r3, [r7, #23]
 80068ba:	3301      	adds	r3, #1
 80068bc:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 80068be:	693b      	ldr	r3, [r7, #16]
 80068c0:	781b      	ldrb	r3, [r3, #0]
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	d1e7      	bne.n	8006896 <USBD_GetString+0x52>
 80068c6:	e000      	b.n	80068ca <USBD_GetString+0x86>
    return;
 80068c8:	bf00      	nop
  }
}
 80068ca:	3718      	adds	r7, #24
 80068cc:	46bd      	mov	sp, r7
 80068ce:	bd80      	pop	{r7, pc}

080068d0 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80068d0:	b480      	push	{r7}
 80068d2:	b085      	sub	sp, #20
 80068d4:	af00      	add	r7, sp, #0
 80068d6:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80068d8:	2300      	movs	r3, #0
 80068da:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 80068e0:	e005      	b.n	80068ee <USBD_GetLen+0x1e>
  {
    len++;
 80068e2:	7bfb      	ldrb	r3, [r7, #15]
 80068e4:	3301      	adds	r3, #1
 80068e6:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 80068e8:	68bb      	ldr	r3, [r7, #8]
 80068ea:	3301      	adds	r3, #1
 80068ec:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 80068ee:	68bb      	ldr	r3, [r7, #8]
 80068f0:	781b      	ldrb	r3, [r3, #0]
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	d1f5      	bne.n	80068e2 <USBD_GetLen+0x12>
  }

  return len;
 80068f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80068f8:	4618      	mov	r0, r3
 80068fa:	3714      	adds	r7, #20
 80068fc:	46bd      	mov	sp, r7
 80068fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006902:	4770      	bx	lr

08006904 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8006904:	b580      	push	{r7, lr}
 8006906:	b084      	sub	sp, #16
 8006908:	af00      	add	r7, sp, #0
 800690a:	60f8      	str	r0, [r7, #12]
 800690c:	60b9      	str	r1, [r7, #8]
 800690e:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	2202      	movs	r2, #2
 8006914:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	687a      	ldr	r2, [r7, #4]
 800691c:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800691e:	68fb      	ldr	r3, [r7, #12]
 8006920:	687a      	ldr	r2, [r7, #4]
 8006922:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	68ba      	ldr	r2, [r7, #8]
 8006928:	2100      	movs	r1, #0
 800692a:	68f8      	ldr	r0, [r7, #12]
 800692c:	f000 fd05 	bl	800733a <USBD_LL_Transmit>

  return USBD_OK;
 8006930:	2300      	movs	r3, #0
}
 8006932:	4618      	mov	r0, r3
 8006934:	3710      	adds	r7, #16
 8006936:	46bd      	mov	sp, r7
 8006938:	bd80      	pop	{r7, pc}

0800693a <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800693a:	b580      	push	{r7, lr}
 800693c:	b084      	sub	sp, #16
 800693e:	af00      	add	r7, sp, #0
 8006940:	60f8      	str	r0, [r7, #12]
 8006942:	60b9      	str	r1, [r7, #8]
 8006944:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	68ba      	ldr	r2, [r7, #8]
 800694a:	2100      	movs	r1, #0
 800694c:	68f8      	ldr	r0, [r7, #12]
 800694e:	f000 fcf4 	bl	800733a <USBD_LL_Transmit>

  return USBD_OK;
 8006952:	2300      	movs	r3, #0
}
 8006954:	4618      	mov	r0, r3
 8006956:	3710      	adds	r7, #16
 8006958:	46bd      	mov	sp, r7
 800695a:	bd80      	pop	{r7, pc}

0800695c <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800695c:	b580      	push	{r7, lr}
 800695e:	b084      	sub	sp, #16
 8006960:	af00      	add	r7, sp, #0
 8006962:	60f8      	str	r0, [r7, #12]
 8006964:	60b9      	str	r1, [r7, #8]
 8006966:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8006968:	68fb      	ldr	r3, [r7, #12]
 800696a:	2203      	movs	r2, #3
 800696c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8006970:	68fb      	ldr	r3, [r7, #12]
 8006972:	687a      	ldr	r2, [r7, #4]
 8006974:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	687a      	ldr	r2, [r7, #4]
 800697c:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	68ba      	ldr	r2, [r7, #8]
 8006984:	2100      	movs	r1, #0
 8006986:	68f8      	ldr	r0, [r7, #12]
 8006988:	f000 fcf8 	bl	800737c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800698c:	2300      	movs	r3, #0
}
 800698e:	4618      	mov	r0, r3
 8006990:	3710      	adds	r7, #16
 8006992:	46bd      	mov	sp, r7
 8006994:	bd80      	pop	{r7, pc}

08006996 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8006996:	b580      	push	{r7, lr}
 8006998:	b084      	sub	sp, #16
 800699a:	af00      	add	r7, sp, #0
 800699c:	60f8      	str	r0, [r7, #12]
 800699e:	60b9      	str	r1, [r7, #8]
 80069a0:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	68ba      	ldr	r2, [r7, #8]
 80069a6:	2100      	movs	r1, #0
 80069a8:	68f8      	ldr	r0, [r7, #12]
 80069aa:	f000 fce7 	bl	800737c <USBD_LL_PrepareReceive>

  return USBD_OK;
 80069ae:	2300      	movs	r3, #0
}
 80069b0:	4618      	mov	r0, r3
 80069b2:	3710      	adds	r7, #16
 80069b4:	46bd      	mov	sp, r7
 80069b6:	bd80      	pop	{r7, pc}

080069b8 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80069b8:	b580      	push	{r7, lr}
 80069ba:	b082      	sub	sp, #8
 80069bc:	af00      	add	r7, sp, #0
 80069be:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	2204      	movs	r2, #4
 80069c4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80069c8:	2300      	movs	r3, #0
 80069ca:	2200      	movs	r2, #0
 80069cc:	2100      	movs	r1, #0
 80069ce:	6878      	ldr	r0, [r7, #4]
 80069d0:	f000 fcb3 	bl	800733a <USBD_LL_Transmit>

  return USBD_OK;
 80069d4:	2300      	movs	r3, #0
}
 80069d6:	4618      	mov	r0, r3
 80069d8:	3708      	adds	r7, #8
 80069da:	46bd      	mov	sp, r7
 80069dc:	bd80      	pop	{r7, pc}

080069de <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80069de:	b580      	push	{r7, lr}
 80069e0:	b082      	sub	sp, #8
 80069e2:	af00      	add	r7, sp, #0
 80069e4:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	2205      	movs	r2, #5
 80069ea:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80069ee:	2300      	movs	r3, #0
 80069f0:	2200      	movs	r2, #0
 80069f2:	2100      	movs	r1, #0
 80069f4:	6878      	ldr	r0, [r7, #4]
 80069f6:	f000 fcc1 	bl	800737c <USBD_LL_PrepareReceive>

  return USBD_OK;
 80069fa:	2300      	movs	r3, #0
}
 80069fc:	4618      	mov	r0, r3
 80069fe:	3708      	adds	r7, #8
 8006a00:	46bd      	mov	sp, r7
 8006a02:	bd80      	pop	{r7, pc}

08006a04 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8006a04:	b580      	push	{r7, lr}
 8006a06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8006a08:	2200      	movs	r2, #0
 8006a0a:	4912      	ldr	r1, [pc, #72]	; (8006a54 <MX_USB_DEVICE_Init+0x50>)
 8006a0c:	4812      	ldr	r0, [pc, #72]	; (8006a58 <MX_USB_DEVICE_Init+0x54>)
 8006a0e:	f7fe fd07 	bl	8005420 <USBD_Init>
 8006a12:	4603      	mov	r3, r0
 8006a14:	2b00      	cmp	r3, #0
 8006a16:	d001      	beq.n	8006a1c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8006a18:	f7f9 ff3a 	bl	8000890 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8006a1c:	490f      	ldr	r1, [pc, #60]	; (8006a5c <MX_USB_DEVICE_Init+0x58>)
 8006a1e:	480e      	ldr	r0, [pc, #56]	; (8006a58 <MX_USB_DEVICE_Init+0x54>)
 8006a20:	f7fe fd2e 	bl	8005480 <USBD_RegisterClass>
 8006a24:	4603      	mov	r3, r0
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	d001      	beq.n	8006a2e <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8006a2a:	f7f9 ff31 	bl	8000890 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8006a2e:	490c      	ldr	r1, [pc, #48]	; (8006a60 <MX_USB_DEVICE_Init+0x5c>)
 8006a30:	4809      	ldr	r0, [pc, #36]	; (8006a58 <MX_USB_DEVICE_Init+0x54>)
 8006a32:	f7fe fc1f 	bl	8005274 <USBD_CDC_RegisterInterface>
 8006a36:	4603      	mov	r3, r0
 8006a38:	2b00      	cmp	r3, #0
 8006a3a:	d001      	beq.n	8006a40 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8006a3c:	f7f9 ff28 	bl	8000890 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8006a40:	4805      	ldr	r0, [pc, #20]	; (8006a58 <MX_USB_DEVICE_Init+0x54>)
 8006a42:	f7fe fd53 	bl	80054ec <USBD_Start>
 8006a46:	4603      	mov	r3, r0
 8006a48:	2b00      	cmp	r3, #0
 8006a4a:	d001      	beq.n	8006a50 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8006a4c:	f7f9 ff20 	bl	8000890 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8006a50:	bf00      	nop
 8006a52:	bd80      	pop	{r7, pc}
 8006a54:	200000ac 	.word	0x200000ac
 8006a58:	20000214 	.word	0x20000214
 8006a5c:	20000018 	.word	0x20000018
 8006a60:	20000098 	.word	0x20000098

08006a64 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8006a64:	b580      	push	{r7, lr}
 8006a66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8006a68:	2200      	movs	r2, #0
 8006a6a:	4905      	ldr	r1, [pc, #20]	; (8006a80 <CDC_Init_FS+0x1c>)
 8006a6c:	4805      	ldr	r0, [pc, #20]	; (8006a84 <CDC_Init_FS+0x20>)
 8006a6e:	f7fe fc1b 	bl	80052a8 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8006a72:	4905      	ldr	r1, [pc, #20]	; (8006a88 <CDC_Init_FS+0x24>)
 8006a74:	4803      	ldr	r0, [pc, #12]	; (8006a84 <CDC_Init_FS+0x20>)
 8006a76:	f7fe fc39 	bl	80052ec <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8006a7a:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8006a7c:	4618      	mov	r0, r3
 8006a7e:	bd80      	pop	{r7, pc}
 8006a80:	20000cf0 	.word	0x20000cf0
 8006a84:	20000214 	.word	0x20000214
 8006a88:	200004f0 	.word	0x200004f0

08006a8c <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8006a8c:	b480      	push	{r7}
 8006a8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8006a90:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8006a92:	4618      	mov	r0, r3
 8006a94:	46bd      	mov	sp, r7
 8006a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a9a:	4770      	bx	lr

08006a9c <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8006a9c:	b480      	push	{r7}
 8006a9e:	b083      	sub	sp, #12
 8006aa0:	af00      	add	r7, sp, #0
 8006aa2:	4603      	mov	r3, r0
 8006aa4:	6039      	str	r1, [r7, #0]
 8006aa6:	71fb      	strb	r3, [r7, #7]
 8006aa8:	4613      	mov	r3, r2
 8006aaa:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8006aac:	79fb      	ldrb	r3, [r7, #7]
 8006aae:	2b23      	cmp	r3, #35	; 0x23
 8006ab0:	d84a      	bhi.n	8006b48 <CDC_Control_FS+0xac>
 8006ab2:	a201      	add	r2, pc, #4	; (adr r2, 8006ab8 <CDC_Control_FS+0x1c>)
 8006ab4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ab8:	08006b49 	.word	0x08006b49
 8006abc:	08006b49 	.word	0x08006b49
 8006ac0:	08006b49 	.word	0x08006b49
 8006ac4:	08006b49 	.word	0x08006b49
 8006ac8:	08006b49 	.word	0x08006b49
 8006acc:	08006b49 	.word	0x08006b49
 8006ad0:	08006b49 	.word	0x08006b49
 8006ad4:	08006b49 	.word	0x08006b49
 8006ad8:	08006b49 	.word	0x08006b49
 8006adc:	08006b49 	.word	0x08006b49
 8006ae0:	08006b49 	.word	0x08006b49
 8006ae4:	08006b49 	.word	0x08006b49
 8006ae8:	08006b49 	.word	0x08006b49
 8006aec:	08006b49 	.word	0x08006b49
 8006af0:	08006b49 	.word	0x08006b49
 8006af4:	08006b49 	.word	0x08006b49
 8006af8:	08006b49 	.word	0x08006b49
 8006afc:	08006b49 	.word	0x08006b49
 8006b00:	08006b49 	.word	0x08006b49
 8006b04:	08006b49 	.word	0x08006b49
 8006b08:	08006b49 	.word	0x08006b49
 8006b0c:	08006b49 	.word	0x08006b49
 8006b10:	08006b49 	.word	0x08006b49
 8006b14:	08006b49 	.word	0x08006b49
 8006b18:	08006b49 	.word	0x08006b49
 8006b1c:	08006b49 	.word	0x08006b49
 8006b20:	08006b49 	.word	0x08006b49
 8006b24:	08006b49 	.word	0x08006b49
 8006b28:	08006b49 	.word	0x08006b49
 8006b2c:	08006b49 	.word	0x08006b49
 8006b30:	08006b49 	.word	0x08006b49
 8006b34:	08006b49 	.word	0x08006b49
 8006b38:	08006b49 	.word	0x08006b49
 8006b3c:	08006b49 	.word	0x08006b49
 8006b40:	08006b49 	.word	0x08006b49
 8006b44:	08006b49 	.word	0x08006b49
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8006b48:	bf00      	nop
  }

  return (USBD_OK);
 8006b4a:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8006b4c:	4618      	mov	r0, r3
 8006b4e:	370c      	adds	r7, #12
 8006b50:	46bd      	mov	sp, r7
 8006b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b56:	4770      	bx	lr

08006b58 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8006b58:	b580      	push	{r7, lr}
 8006b5a:	b082      	sub	sp, #8
 8006b5c:	af00      	add	r7, sp, #0
 8006b5e:	6078      	str	r0, [r7, #4]
 8006b60:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8006b62:	6879      	ldr	r1, [r7, #4]
 8006b64:	4810      	ldr	r0, [pc, #64]	; (8006ba8 <CDC_Receive_FS+0x50>)
 8006b66:	f7fe fbc1 	bl	80052ec <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8006b6a:	480f      	ldr	r0, [pc, #60]	; (8006ba8 <CDC_Receive_FS+0x50>)
 8006b6c:	f7fe fc22 	bl	80053b4 <USBD_CDC_ReceivePacket>
  memset (externbuffer, '\0', 64);  // clear the buffer
 8006b70:	2240      	movs	r2, #64	; 0x40
 8006b72:	2100      	movs	r1, #0
 8006b74:	480d      	ldr	r0, [pc, #52]	; (8006bac <CDC_Receive_FS+0x54>)
 8006b76:	f000 fcab 	bl	80074d0 <memset>
  memcpy(externbuffer, Buf, *Len);  // copy the data to the buffer
 8006b7a:	683b      	ldr	r3, [r7, #0]
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	461a      	mov	r2, r3
 8006b80:	6879      	ldr	r1, [r7, #4]
 8006b82:	480a      	ldr	r0, [pc, #40]	; (8006bac <CDC_Receive_FS+0x54>)
 8006b84:	f000 fc96 	bl	80074b4 <memcpy>
  memset(Buf, '\0', *Len);   // clear the Buf also
 8006b88:	683b      	ldr	r3, [r7, #0]
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	461a      	mov	r2, r3
 8006b8e:	2100      	movs	r1, #0
 8006b90:	6878      	ldr	r0, [r7, #4]
 8006b92:	f000 fc9d 	bl	80074d0 <memset>
  flag=1;
 8006b96:	4b06      	ldr	r3, [pc, #24]	; (8006bb0 <CDC_Receive_FS+0x58>)
 8006b98:	2201      	movs	r2, #1
 8006b9a:	801a      	strh	r2, [r3, #0]
  return (USBD_OK);
 8006b9c:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8006b9e:	4618      	mov	r0, r3
 8006ba0:	3708      	adds	r7, #8
 8006ba2:	46bd      	mov	sp, r7
 8006ba4:	bd80      	pop	{r7, pc}
 8006ba6:	bf00      	nop
 8006ba8:	20000214 	.word	0x20000214
 8006bac:	200001a8 	.word	0x200001a8
 8006bb0:	200001e8 	.word	0x200001e8

08006bb4 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8006bb4:	b580      	push	{r7, lr}
 8006bb6:	b084      	sub	sp, #16
 8006bb8:	af00      	add	r7, sp, #0
 8006bba:	6078      	str	r0, [r7, #4]
 8006bbc:	460b      	mov	r3, r1
 8006bbe:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8006bc0:	2300      	movs	r3, #0
 8006bc2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8006bc4:	4b0d      	ldr	r3, [pc, #52]	; (8006bfc <CDC_Transmit_FS+0x48>)
 8006bc6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006bca:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8006bcc:	68bb      	ldr	r3, [r7, #8]
 8006bce:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	d001      	beq.n	8006bda <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8006bd6:	2301      	movs	r3, #1
 8006bd8:	e00b      	b.n	8006bf2 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8006bda:	887b      	ldrh	r3, [r7, #2]
 8006bdc:	461a      	mov	r2, r3
 8006bde:	6879      	ldr	r1, [r7, #4]
 8006be0:	4806      	ldr	r0, [pc, #24]	; (8006bfc <CDC_Transmit_FS+0x48>)
 8006be2:	f7fe fb61 	bl	80052a8 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8006be6:	4805      	ldr	r0, [pc, #20]	; (8006bfc <CDC_Transmit_FS+0x48>)
 8006be8:	f7fe fb9e 	bl	8005328 <USBD_CDC_TransmitPacket>
 8006bec:	4603      	mov	r3, r0
 8006bee:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8006bf0:	7bfb      	ldrb	r3, [r7, #15]
}
 8006bf2:	4618      	mov	r0, r3
 8006bf4:	3710      	adds	r7, #16
 8006bf6:	46bd      	mov	sp, r7
 8006bf8:	bd80      	pop	{r7, pc}
 8006bfa:	bf00      	nop
 8006bfc:	20000214 	.word	0x20000214

08006c00 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8006c00:	b480      	push	{r7}
 8006c02:	b087      	sub	sp, #28
 8006c04:	af00      	add	r7, sp, #0
 8006c06:	60f8      	str	r0, [r7, #12]
 8006c08:	60b9      	str	r1, [r7, #8]
 8006c0a:	4613      	mov	r3, r2
 8006c0c:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8006c0e:	2300      	movs	r3, #0
 8006c10:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8006c12:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8006c16:	4618      	mov	r0, r3
 8006c18:	371c      	adds	r7, #28
 8006c1a:	46bd      	mov	sp, r7
 8006c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c20:	4770      	bx	lr
	...

08006c24 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006c24:	b480      	push	{r7}
 8006c26:	b083      	sub	sp, #12
 8006c28:	af00      	add	r7, sp, #0
 8006c2a:	4603      	mov	r3, r0
 8006c2c:	6039      	str	r1, [r7, #0]
 8006c2e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8006c30:	683b      	ldr	r3, [r7, #0]
 8006c32:	2212      	movs	r2, #18
 8006c34:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8006c36:	4b03      	ldr	r3, [pc, #12]	; (8006c44 <USBD_FS_DeviceDescriptor+0x20>)
}
 8006c38:	4618      	mov	r0, r3
 8006c3a:	370c      	adds	r7, #12
 8006c3c:	46bd      	mov	sp, r7
 8006c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c42:	4770      	bx	lr
 8006c44:	200000c8 	.word	0x200000c8

08006c48 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006c48:	b480      	push	{r7}
 8006c4a:	b083      	sub	sp, #12
 8006c4c:	af00      	add	r7, sp, #0
 8006c4e:	4603      	mov	r3, r0
 8006c50:	6039      	str	r1, [r7, #0]
 8006c52:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8006c54:	683b      	ldr	r3, [r7, #0]
 8006c56:	2204      	movs	r2, #4
 8006c58:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8006c5a:	4b03      	ldr	r3, [pc, #12]	; (8006c68 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8006c5c:	4618      	mov	r0, r3
 8006c5e:	370c      	adds	r7, #12
 8006c60:	46bd      	mov	sp, r7
 8006c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c66:	4770      	bx	lr
 8006c68:	200000dc 	.word	0x200000dc

08006c6c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006c6c:	b580      	push	{r7, lr}
 8006c6e:	b082      	sub	sp, #8
 8006c70:	af00      	add	r7, sp, #0
 8006c72:	4603      	mov	r3, r0
 8006c74:	6039      	str	r1, [r7, #0]
 8006c76:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8006c78:	79fb      	ldrb	r3, [r7, #7]
 8006c7a:	2b00      	cmp	r3, #0
 8006c7c:	d105      	bne.n	8006c8a <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8006c7e:	683a      	ldr	r2, [r7, #0]
 8006c80:	4907      	ldr	r1, [pc, #28]	; (8006ca0 <USBD_FS_ProductStrDescriptor+0x34>)
 8006c82:	4808      	ldr	r0, [pc, #32]	; (8006ca4 <USBD_FS_ProductStrDescriptor+0x38>)
 8006c84:	f7ff fdde 	bl	8006844 <USBD_GetString>
 8006c88:	e004      	b.n	8006c94 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8006c8a:	683a      	ldr	r2, [r7, #0]
 8006c8c:	4904      	ldr	r1, [pc, #16]	; (8006ca0 <USBD_FS_ProductStrDescriptor+0x34>)
 8006c8e:	4805      	ldr	r0, [pc, #20]	; (8006ca4 <USBD_FS_ProductStrDescriptor+0x38>)
 8006c90:	f7ff fdd8 	bl	8006844 <USBD_GetString>
  }
  return USBD_StrDesc;
 8006c94:	4b02      	ldr	r3, [pc, #8]	; (8006ca0 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8006c96:	4618      	mov	r0, r3
 8006c98:	3708      	adds	r7, #8
 8006c9a:	46bd      	mov	sp, r7
 8006c9c:	bd80      	pop	{r7, pc}
 8006c9e:	bf00      	nop
 8006ca0:	200014f0 	.word	0x200014f0
 8006ca4:	08007500 	.word	0x08007500

08006ca8 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006ca8:	b580      	push	{r7, lr}
 8006caa:	b082      	sub	sp, #8
 8006cac:	af00      	add	r7, sp, #0
 8006cae:	4603      	mov	r3, r0
 8006cb0:	6039      	str	r1, [r7, #0]
 8006cb2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8006cb4:	683a      	ldr	r2, [r7, #0]
 8006cb6:	4904      	ldr	r1, [pc, #16]	; (8006cc8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8006cb8:	4804      	ldr	r0, [pc, #16]	; (8006ccc <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8006cba:	f7ff fdc3 	bl	8006844 <USBD_GetString>
  return USBD_StrDesc;
 8006cbe:	4b02      	ldr	r3, [pc, #8]	; (8006cc8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8006cc0:	4618      	mov	r0, r3
 8006cc2:	3708      	adds	r7, #8
 8006cc4:	46bd      	mov	sp, r7
 8006cc6:	bd80      	pop	{r7, pc}
 8006cc8:	200014f0 	.word	0x200014f0
 8006ccc:	08007518 	.word	0x08007518

08006cd0 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006cd0:	b580      	push	{r7, lr}
 8006cd2:	b082      	sub	sp, #8
 8006cd4:	af00      	add	r7, sp, #0
 8006cd6:	4603      	mov	r3, r0
 8006cd8:	6039      	str	r1, [r7, #0]
 8006cda:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8006cdc:	683b      	ldr	r3, [r7, #0]
 8006cde:	221a      	movs	r2, #26
 8006ce0:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8006ce2:	f000 f843 	bl	8006d6c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8006ce6:	4b02      	ldr	r3, [pc, #8]	; (8006cf0 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8006ce8:	4618      	mov	r0, r3
 8006cea:	3708      	adds	r7, #8
 8006cec:	46bd      	mov	sp, r7
 8006cee:	bd80      	pop	{r7, pc}
 8006cf0:	200000e0 	.word	0x200000e0

08006cf4 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006cf4:	b580      	push	{r7, lr}
 8006cf6:	b082      	sub	sp, #8
 8006cf8:	af00      	add	r7, sp, #0
 8006cfa:	4603      	mov	r3, r0
 8006cfc:	6039      	str	r1, [r7, #0]
 8006cfe:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8006d00:	79fb      	ldrb	r3, [r7, #7]
 8006d02:	2b00      	cmp	r3, #0
 8006d04:	d105      	bne.n	8006d12 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8006d06:	683a      	ldr	r2, [r7, #0]
 8006d08:	4907      	ldr	r1, [pc, #28]	; (8006d28 <USBD_FS_ConfigStrDescriptor+0x34>)
 8006d0a:	4808      	ldr	r0, [pc, #32]	; (8006d2c <USBD_FS_ConfigStrDescriptor+0x38>)
 8006d0c:	f7ff fd9a 	bl	8006844 <USBD_GetString>
 8006d10:	e004      	b.n	8006d1c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8006d12:	683a      	ldr	r2, [r7, #0]
 8006d14:	4904      	ldr	r1, [pc, #16]	; (8006d28 <USBD_FS_ConfigStrDescriptor+0x34>)
 8006d16:	4805      	ldr	r0, [pc, #20]	; (8006d2c <USBD_FS_ConfigStrDescriptor+0x38>)
 8006d18:	f7ff fd94 	bl	8006844 <USBD_GetString>
  }
  return USBD_StrDesc;
 8006d1c:	4b02      	ldr	r3, [pc, #8]	; (8006d28 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8006d1e:	4618      	mov	r0, r3
 8006d20:	3708      	adds	r7, #8
 8006d22:	46bd      	mov	sp, r7
 8006d24:	bd80      	pop	{r7, pc}
 8006d26:	bf00      	nop
 8006d28:	200014f0 	.word	0x200014f0
 8006d2c:	0800752c 	.word	0x0800752c

08006d30 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006d30:	b580      	push	{r7, lr}
 8006d32:	b082      	sub	sp, #8
 8006d34:	af00      	add	r7, sp, #0
 8006d36:	4603      	mov	r3, r0
 8006d38:	6039      	str	r1, [r7, #0]
 8006d3a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8006d3c:	79fb      	ldrb	r3, [r7, #7]
 8006d3e:	2b00      	cmp	r3, #0
 8006d40:	d105      	bne.n	8006d4e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8006d42:	683a      	ldr	r2, [r7, #0]
 8006d44:	4907      	ldr	r1, [pc, #28]	; (8006d64 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8006d46:	4808      	ldr	r0, [pc, #32]	; (8006d68 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8006d48:	f7ff fd7c 	bl	8006844 <USBD_GetString>
 8006d4c:	e004      	b.n	8006d58 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8006d4e:	683a      	ldr	r2, [r7, #0]
 8006d50:	4904      	ldr	r1, [pc, #16]	; (8006d64 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8006d52:	4805      	ldr	r0, [pc, #20]	; (8006d68 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8006d54:	f7ff fd76 	bl	8006844 <USBD_GetString>
  }
  return USBD_StrDesc;
 8006d58:	4b02      	ldr	r3, [pc, #8]	; (8006d64 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8006d5a:	4618      	mov	r0, r3
 8006d5c:	3708      	adds	r7, #8
 8006d5e:	46bd      	mov	sp, r7
 8006d60:	bd80      	pop	{r7, pc}
 8006d62:	bf00      	nop
 8006d64:	200014f0 	.word	0x200014f0
 8006d68:	08007538 	.word	0x08007538

08006d6c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8006d6c:	b580      	push	{r7, lr}
 8006d6e:	b084      	sub	sp, #16
 8006d70:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8006d72:	4b0f      	ldr	r3, [pc, #60]	; (8006db0 <Get_SerialNum+0x44>)
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8006d78:	4b0e      	ldr	r3, [pc, #56]	; (8006db4 <Get_SerialNum+0x48>)
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8006d7e:	4b0e      	ldr	r3, [pc, #56]	; (8006db8 <Get_SerialNum+0x4c>)
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8006d84:	68fa      	ldr	r2, [r7, #12]
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	4413      	add	r3, r2
 8006d8a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8006d8c:	68fb      	ldr	r3, [r7, #12]
 8006d8e:	2b00      	cmp	r3, #0
 8006d90:	d009      	beq.n	8006da6 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8006d92:	2208      	movs	r2, #8
 8006d94:	4909      	ldr	r1, [pc, #36]	; (8006dbc <Get_SerialNum+0x50>)
 8006d96:	68f8      	ldr	r0, [r7, #12]
 8006d98:	f000 f814 	bl	8006dc4 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8006d9c:	2204      	movs	r2, #4
 8006d9e:	4908      	ldr	r1, [pc, #32]	; (8006dc0 <Get_SerialNum+0x54>)
 8006da0:	68b8      	ldr	r0, [r7, #8]
 8006da2:	f000 f80f 	bl	8006dc4 <IntToUnicode>
  }
}
 8006da6:	bf00      	nop
 8006da8:	3710      	adds	r7, #16
 8006daa:	46bd      	mov	sp, r7
 8006dac:	bd80      	pop	{r7, pc}
 8006dae:	bf00      	nop
 8006db0:	1fff7a10 	.word	0x1fff7a10
 8006db4:	1fff7a14 	.word	0x1fff7a14
 8006db8:	1fff7a18 	.word	0x1fff7a18
 8006dbc:	200000e2 	.word	0x200000e2
 8006dc0:	200000f2 	.word	0x200000f2

08006dc4 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8006dc4:	b480      	push	{r7}
 8006dc6:	b087      	sub	sp, #28
 8006dc8:	af00      	add	r7, sp, #0
 8006dca:	60f8      	str	r0, [r7, #12]
 8006dcc:	60b9      	str	r1, [r7, #8]
 8006dce:	4613      	mov	r3, r2
 8006dd0:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8006dd2:	2300      	movs	r3, #0
 8006dd4:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8006dd6:	2300      	movs	r3, #0
 8006dd8:	75fb      	strb	r3, [r7, #23]
 8006dda:	e027      	b.n	8006e2c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8006ddc:	68fb      	ldr	r3, [r7, #12]
 8006dde:	0f1b      	lsrs	r3, r3, #28
 8006de0:	2b09      	cmp	r3, #9
 8006de2:	d80b      	bhi.n	8006dfc <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8006de4:	68fb      	ldr	r3, [r7, #12]
 8006de6:	0f1b      	lsrs	r3, r3, #28
 8006de8:	b2da      	uxtb	r2, r3
 8006dea:	7dfb      	ldrb	r3, [r7, #23]
 8006dec:	005b      	lsls	r3, r3, #1
 8006dee:	4619      	mov	r1, r3
 8006df0:	68bb      	ldr	r3, [r7, #8]
 8006df2:	440b      	add	r3, r1
 8006df4:	3230      	adds	r2, #48	; 0x30
 8006df6:	b2d2      	uxtb	r2, r2
 8006df8:	701a      	strb	r2, [r3, #0]
 8006dfa:	e00a      	b.n	8006e12 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8006dfc:	68fb      	ldr	r3, [r7, #12]
 8006dfe:	0f1b      	lsrs	r3, r3, #28
 8006e00:	b2da      	uxtb	r2, r3
 8006e02:	7dfb      	ldrb	r3, [r7, #23]
 8006e04:	005b      	lsls	r3, r3, #1
 8006e06:	4619      	mov	r1, r3
 8006e08:	68bb      	ldr	r3, [r7, #8]
 8006e0a:	440b      	add	r3, r1
 8006e0c:	3237      	adds	r2, #55	; 0x37
 8006e0e:	b2d2      	uxtb	r2, r2
 8006e10:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8006e12:	68fb      	ldr	r3, [r7, #12]
 8006e14:	011b      	lsls	r3, r3, #4
 8006e16:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8006e18:	7dfb      	ldrb	r3, [r7, #23]
 8006e1a:	005b      	lsls	r3, r3, #1
 8006e1c:	3301      	adds	r3, #1
 8006e1e:	68ba      	ldr	r2, [r7, #8]
 8006e20:	4413      	add	r3, r2
 8006e22:	2200      	movs	r2, #0
 8006e24:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8006e26:	7dfb      	ldrb	r3, [r7, #23]
 8006e28:	3301      	adds	r3, #1
 8006e2a:	75fb      	strb	r3, [r7, #23]
 8006e2c:	7dfa      	ldrb	r2, [r7, #23]
 8006e2e:	79fb      	ldrb	r3, [r7, #7]
 8006e30:	429a      	cmp	r2, r3
 8006e32:	d3d3      	bcc.n	8006ddc <IntToUnicode+0x18>
  }
}
 8006e34:	bf00      	nop
 8006e36:	bf00      	nop
 8006e38:	371c      	adds	r7, #28
 8006e3a:	46bd      	mov	sp, r7
 8006e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e40:	4770      	bx	lr
	...

08006e44 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8006e44:	b580      	push	{r7, lr}
 8006e46:	b08a      	sub	sp, #40	; 0x28
 8006e48:	af00      	add	r7, sp, #0
 8006e4a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006e4c:	f107 0314 	add.w	r3, r7, #20
 8006e50:	2200      	movs	r2, #0
 8006e52:	601a      	str	r2, [r3, #0]
 8006e54:	605a      	str	r2, [r3, #4]
 8006e56:	609a      	str	r2, [r3, #8]
 8006e58:	60da      	str	r2, [r3, #12]
 8006e5a:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006e64:	d13a      	bne.n	8006edc <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006e66:	2300      	movs	r3, #0
 8006e68:	613b      	str	r3, [r7, #16]
 8006e6a:	4b1e      	ldr	r3, [pc, #120]	; (8006ee4 <HAL_PCD_MspInit+0xa0>)
 8006e6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e6e:	4a1d      	ldr	r2, [pc, #116]	; (8006ee4 <HAL_PCD_MspInit+0xa0>)
 8006e70:	f043 0301 	orr.w	r3, r3, #1
 8006e74:	6313      	str	r3, [r2, #48]	; 0x30
 8006e76:	4b1b      	ldr	r3, [pc, #108]	; (8006ee4 <HAL_PCD_MspInit+0xa0>)
 8006e78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e7a:	f003 0301 	and.w	r3, r3, #1
 8006e7e:	613b      	str	r3, [r7, #16]
 8006e80:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8006e82:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8006e86:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006e88:	2302      	movs	r3, #2
 8006e8a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006e8c:	2300      	movs	r3, #0
 8006e8e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006e90:	2303      	movs	r3, #3
 8006e92:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8006e94:	230a      	movs	r3, #10
 8006e96:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006e98:	f107 0314 	add.w	r3, r7, #20
 8006e9c:	4619      	mov	r1, r3
 8006e9e:	4812      	ldr	r0, [pc, #72]	; (8006ee8 <HAL_PCD_MspInit+0xa4>)
 8006ea0:	f7f9 ff74 	bl	8000d8c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8006ea4:	4b0f      	ldr	r3, [pc, #60]	; (8006ee4 <HAL_PCD_MspInit+0xa0>)
 8006ea6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006ea8:	4a0e      	ldr	r2, [pc, #56]	; (8006ee4 <HAL_PCD_MspInit+0xa0>)
 8006eaa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006eae:	6353      	str	r3, [r2, #52]	; 0x34
 8006eb0:	2300      	movs	r3, #0
 8006eb2:	60fb      	str	r3, [r7, #12]
 8006eb4:	4b0b      	ldr	r3, [pc, #44]	; (8006ee4 <HAL_PCD_MspInit+0xa0>)
 8006eb6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006eb8:	4a0a      	ldr	r2, [pc, #40]	; (8006ee4 <HAL_PCD_MspInit+0xa0>)
 8006eba:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006ebe:	6453      	str	r3, [r2, #68]	; 0x44
 8006ec0:	4b08      	ldr	r3, [pc, #32]	; (8006ee4 <HAL_PCD_MspInit+0xa0>)
 8006ec2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006ec4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006ec8:	60fb      	str	r3, [r7, #12]
 8006eca:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8006ecc:	2200      	movs	r2, #0
 8006ece:	2100      	movs	r1, #0
 8006ed0:	2043      	movs	r0, #67	; 0x43
 8006ed2:	f7f9 ff24 	bl	8000d1e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8006ed6:	2043      	movs	r0, #67	; 0x43
 8006ed8:	f7f9 ff3d 	bl	8000d56 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8006edc:	bf00      	nop
 8006ede:	3728      	adds	r7, #40	; 0x28
 8006ee0:	46bd      	mov	sp, r7
 8006ee2:	bd80      	pop	{r7, pc}
 8006ee4:	40023800 	.word	0x40023800
 8006ee8:	40020000 	.word	0x40020000

08006eec <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006eec:	b580      	push	{r7, lr}
 8006eee:	b082      	sub	sp, #8
 8006ef0:	af00      	add	r7, sp, #0
 8006ef2:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8006f00:	4619      	mov	r1, r3
 8006f02:	4610      	mov	r0, r2
 8006f04:	f7fe fb3f 	bl	8005586 <USBD_LL_SetupStage>
}
 8006f08:	bf00      	nop
 8006f0a:	3708      	adds	r7, #8
 8006f0c:	46bd      	mov	sp, r7
 8006f0e:	bd80      	pop	{r7, pc}

08006f10 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006f10:	b580      	push	{r7, lr}
 8006f12:	b082      	sub	sp, #8
 8006f14:	af00      	add	r7, sp, #0
 8006f16:	6078      	str	r0, [r7, #4]
 8006f18:	460b      	mov	r3, r1
 8006f1a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8006f22:	78fa      	ldrb	r2, [r7, #3]
 8006f24:	6879      	ldr	r1, [r7, #4]
 8006f26:	4613      	mov	r3, r2
 8006f28:	00db      	lsls	r3, r3, #3
 8006f2a:	4413      	add	r3, r2
 8006f2c:	009b      	lsls	r3, r3, #2
 8006f2e:	440b      	add	r3, r1
 8006f30:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8006f34:	681a      	ldr	r2, [r3, #0]
 8006f36:	78fb      	ldrb	r3, [r7, #3]
 8006f38:	4619      	mov	r1, r3
 8006f3a:	f7fe fb79 	bl	8005630 <USBD_LL_DataOutStage>
}
 8006f3e:	bf00      	nop
 8006f40:	3708      	adds	r7, #8
 8006f42:	46bd      	mov	sp, r7
 8006f44:	bd80      	pop	{r7, pc}

08006f46 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006f46:	b580      	push	{r7, lr}
 8006f48:	b082      	sub	sp, #8
 8006f4a:	af00      	add	r7, sp, #0
 8006f4c:	6078      	str	r0, [r7, #4]
 8006f4e:	460b      	mov	r3, r1
 8006f50:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8006f58:	78fa      	ldrb	r2, [r7, #3]
 8006f5a:	6879      	ldr	r1, [r7, #4]
 8006f5c:	4613      	mov	r3, r2
 8006f5e:	00db      	lsls	r3, r3, #3
 8006f60:	4413      	add	r3, r2
 8006f62:	009b      	lsls	r3, r3, #2
 8006f64:	440b      	add	r3, r1
 8006f66:	334c      	adds	r3, #76	; 0x4c
 8006f68:	681a      	ldr	r2, [r3, #0]
 8006f6a:	78fb      	ldrb	r3, [r7, #3]
 8006f6c:	4619      	mov	r1, r3
 8006f6e:	f7fe fc12 	bl	8005796 <USBD_LL_DataInStage>
}
 8006f72:	bf00      	nop
 8006f74:	3708      	adds	r7, #8
 8006f76:	46bd      	mov	sp, r7
 8006f78:	bd80      	pop	{r7, pc}

08006f7a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006f7a:	b580      	push	{r7, lr}
 8006f7c:	b082      	sub	sp, #8
 8006f7e:	af00      	add	r7, sp, #0
 8006f80:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8006f88:	4618      	mov	r0, r3
 8006f8a:	f7fe fd46 	bl	8005a1a <USBD_LL_SOF>
}
 8006f8e:	bf00      	nop
 8006f90:	3708      	adds	r7, #8
 8006f92:	46bd      	mov	sp, r7
 8006f94:	bd80      	pop	{r7, pc}

08006f96 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006f96:	b580      	push	{r7, lr}
 8006f98:	b084      	sub	sp, #16
 8006f9a:	af00      	add	r7, sp, #0
 8006f9c:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8006f9e:	2301      	movs	r3, #1
 8006fa0:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	68db      	ldr	r3, [r3, #12]
 8006fa6:	2b00      	cmp	r3, #0
 8006fa8:	d102      	bne.n	8006fb0 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8006faa:	2300      	movs	r3, #0
 8006fac:	73fb      	strb	r3, [r7, #15]
 8006fae:	e008      	b.n	8006fc2 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	68db      	ldr	r3, [r3, #12]
 8006fb4:	2b02      	cmp	r3, #2
 8006fb6:	d102      	bne.n	8006fbe <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8006fb8:	2301      	movs	r3, #1
 8006fba:	73fb      	strb	r3, [r7, #15]
 8006fbc:	e001      	b.n	8006fc2 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8006fbe:	f7f9 fc67 	bl	8000890 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8006fc8:	7bfa      	ldrb	r2, [r7, #15]
 8006fca:	4611      	mov	r1, r2
 8006fcc:	4618      	mov	r0, r3
 8006fce:	f7fe fce6 	bl	800599e <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8006fd8:	4618      	mov	r0, r3
 8006fda:	f7fe fc8e 	bl	80058fa <USBD_LL_Reset>
}
 8006fde:	bf00      	nop
 8006fe0:	3710      	adds	r7, #16
 8006fe2:	46bd      	mov	sp, r7
 8006fe4:	bd80      	pop	{r7, pc}
	...

08006fe8 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006fe8:	b580      	push	{r7, lr}
 8006fea:	b082      	sub	sp, #8
 8006fec:	af00      	add	r7, sp, #0
 8006fee:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8006ff6:	4618      	mov	r0, r3
 8006ff8:	f7fe fce1 	bl	80059be <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	687a      	ldr	r2, [r7, #4]
 8007008:	6812      	ldr	r2, [r2, #0]
 800700a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800700e:	f043 0301 	orr.w	r3, r3, #1
 8007012:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	6a1b      	ldr	r3, [r3, #32]
 8007018:	2b00      	cmp	r3, #0
 800701a:	d005      	beq.n	8007028 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800701c:	4b04      	ldr	r3, [pc, #16]	; (8007030 <HAL_PCD_SuspendCallback+0x48>)
 800701e:	691b      	ldr	r3, [r3, #16]
 8007020:	4a03      	ldr	r2, [pc, #12]	; (8007030 <HAL_PCD_SuspendCallback+0x48>)
 8007022:	f043 0306 	orr.w	r3, r3, #6
 8007026:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8007028:	bf00      	nop
 800702a:	3708      	adds	r7, #8
 800702c:	46bd      	mov	sp, r7
 800702e:	bd80      	pop	{r7, pc}
 8007030:	e000ed00 	.word	0xe000ed00

08007034 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007034:	b580      	push	{r7, lr}
 8007036:	b082      	sub	sp, #8
 8007038:	af00      	add	r7, sp, #0
 800703a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007042:	4618      	mov	r0, r3
 8007044:	f7fe fcd1 	bl	80059ea <USBD_LL_Resume>
}
 8007048:	bf00      	nop
 800704a:	3708      	adds	r7, #8
 800704c:	46bd      	mov	sp, r7
 800704e:	bd80      	pop	{r7, pc}

08007050 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007050:	b580      	push	{r7, lr}
 8007052:	b082      	sub	sp, #8
 8007054:	af00      	add	r7, sp, #0
 8007056:	6078      	str	r0, [r7, #4]
 8007058:	460b      	mov	r3, r1
 800705a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007062:	78fa      	ldrb	r2, [r7, #3]
 8007064:	4611      	mov	r1, r2
 8007066:	4618      	mov	r0, r3
 8007068:	f7fe fd29 	bl	8005abe <USBD_LL_IsoOUTIncomplete>
}
 800706c:	bf00      	nop
 800706e:	3708      	adds	r7, #8
 8007070:	46bd      	mov	sp, r7
 8007072:	bd80      	pop	{r7, pc}

08007074 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007074:	b580      	push	{r7, lr}
 8007076:	b082      	sub	sp, #8
 8007078:	af00      	add	r7, sp, #0
 800707a:	6078      	str	r0, [r7, #4]
 800707c:	460b      	mov	r3, r1
 800707e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007086:	78fa      	ldrb	r2, [r7, #3]
 8007088:	4611      	mov	r1, r2
 800708a:	4618      	mov	r0, r3
 800708c:	f7fe fce5 	bl	8005a5a <USBD_LL_IsoINIncomplete>
}
 8007090:	bf00      	nop
 8007092:	3708      	adds	r7, #8
 8007094:	46bd      	mov	sp, r7
 8007096:	bd80      	pop	{r7, pc}

08007098 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007098:	b580      	push	{r7, lr}
 800709a:	b082      	sub	sp, #8
 800709c:	af00      	add	r7, sp, #0
 800709e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80070a6:	4618      	mov	r0, r3
 80070a8:	f7fe fd3b 	bl	8005b22 <USBD_LL_DevConnected>
}
 80070ac:	bf00      	nop
 80070ae:	3708      	adds	r7, #8
 80070b0:	46bd      	mov	sp, r7
 80070b2:	bd80      	pop	{r7, pc}

080070b4 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80070b4:	b580      	push	{r7, lr}
 80070b6:	b082      	sub	sp, #8
 80070b8:	af00      	add	r7, sp, #0
 80070ba:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80070c2:	4618      	mov	r0, r3
 80070c4:	f7fe fd38 	bl	8005b38 <USBD_LL_DevDisconnected>
}
 80070c8:	bf00      	nop
 80070ca:	3708      	adds	r7, #8
 80070cc:	46bd      	mov	sp, r7
 80070ce:	bd80      	pop	{r7, pc}

080070d0 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80070d0:	b580      	push	{r7, lr}
 80070d2:	b082      	sub	sp, #8
 80070d4:	af00      	add	r7, sp, #0
 80070d6:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	781b      	ldrb	r3, [r3, #0]
 80070dc:	2b00      	cmp	r3, #0
 80070de:	d13c      	bne.n	800715a <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 80070e0:	4a20      	ldr	r2, [pc, #128]	; (8007164 <USBD_LL_Init+0x94>)
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	4a1e      	ldr	r2, [pc, #120]	; (8007164 <USBD_LL_Init+0x94>)
 80070ec:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80070f0:	4b1c      	ldr	r3, [pc, #112]	; (8007164 <USBD_LL_Init+0x94>)
 80070f2:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80070f6:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 80070f8:	4b1a      	ldr	r3, [pc, #104]	; (8007164 <USBD_LL_Init+0x94>)
 80070fa:	2204      	movs	r2, #4
 80070fc:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80070fe:	4b19      	ldr	r3, [pc, #100]	; (8007164 <USBD_LL_Init+0x94>)
 8007100:	2202      	movs	r2, #2
 8007102:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8007104:	4b17      	ldr	r3, [pc, #92]	; (8007164 <USBD_LL_Init+0x94>)
 8007106:	2200      	movs	r2, #0
 8007108:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800710a:	4b16      	ldr	r3, [pc, #88]	; (8007164 <USBD_LL_Init+0x94>)
 800710c:	2202      	movs	r2, #2
 800710e:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8007110:	4b14      	ldr	r3, [pc, #80]	; (8007164 <USBD_LL_Init+0x94>)
 8007112:	2200      	movs	r2, #0
 8007114:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8007116:	4b13      	ldr	r3, [pc, #76]	; (8007164 <USBD_LL_Init+0x94>)
 8007118:	2200      	movs	r2, #0
 800711a:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800711c:	4b11      	ldr	r3, [pc, #68]	; (8007164 <USBD_LL_Init+0x94>)
 800711e:	2200      	movs	r2, #0
 8007120:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8007122:	4b10      	ldr	r3, [pc, #64]	; (8007164 <USBD_LL_Init+0x94>)
 8007124:	2200      	movs	r2, #0
 8007126:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8007128:	4b0e      	ldr	r3, [pc, #56]	; (8007164 <USBD_LL_Init+0x94>)
 800712a:	2200      	movs	r2, #0
 800712c:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800712e:	480d      	ldr	r0, [pc, #52]	; (8007164 <USBD_LL_Init+0x94>)
 8007130:	f7f9 fff9 	bl	8001126 <HAL_PCD_Init>
 8007134:	4603      	mov	r3, r0
 8007136:	2b00      	cmp	r3, #0
 8007138:	d001      	beq.n	800713e <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800713a:	f7f9 fba9 	bl	8000890 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800713e:	2180      	movs	r1, #128	; 0x80
 8007140:	4808      	ldr	r0, [pc, #32]	; (8007164 <USBD_LL_Init+0x94>)
 8007142:	f7fb fa50 	bl	80025e6 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8007146:	2240      	movs	r2, #64	; 0x40
 8007148:	2100      	movs	r1, #0
 800714a:	4806      	ldr	r0, [pc, #24]	; (8007164 <USBD_LL_Init+0x94>)
 800714c:	f7fb fa04 	bl	8002558 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8007150:	2280      	movs	r2, #128	; 0x80
 8007152:	2101      	movs	r1, #1
 8007154:	4803      	ldr	r0, [pc, #12]	; (8007164 <USBD_LL_Init+0x94>)
 8007156:	f7fb f9ff 	bl	8002558 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800715a:	2300      	movs	r3, #0
}
 800715c:	4618      	mov	r0, r3
 800715e:	3708      	adds	r7, #8
 8007160:	46bd      	mov	sp, r7
 8007162:	bd80      	pop	{r7, pc}
 8007164:	200016f0 	.word	0x200016f0

08007168 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8007168:	b580      	push	{r7, lr}
 800716a:	b084      	sub	sp, #16
 800716c:	af00      	add	r7, sp, #0
 800716e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007170:	2300      	movs	r3, #0
 8007172:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007174:	2300      	movs	r3, #0
 8007176:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800717e:	4618      	mov	r0, r3
 8007180:	f7fa f8ee 	bl	8001360 <HAL_PCD_Start>
 8007184:	4603      	mov	r3, r0
 8007186:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007188:	7bfb      	ldrb	r3, [r7, #15]
 800718a:	4618      	mov	r0, r3
 800718c:	f000 f942 	bl	8007414 <USBD_Get_USB_Status>
 8007190:	4603      	mov	r3, r0
 8007192:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007194:	7bbb      	ldrb	r3, [r7, #14]
}
 8007196:	4618      	mov	r0, r3
 8007198:	3710      	adds	r7, #16
 800719a:	46bd      	mov	sp, r7
 800719c:	bd80      	pop	{r7, pc}

0800719e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800719e:	b580      	push	{r7, lr}
 80071a0:	b084      	sub	sp, #16
 80071a2:	af00      	add	r7, sp, #0
 80071a4:	6078      	str	r0, [r7, #4]
 80071a6:	4608      	mov	r0, r1
 80071a8:	4611      	mov	r1, r2
 80071aa:	461a      	mov	r2, r3
 80071ac:	4603      	mov	r3, r0
 80071ae:	70fb      	strb	r3, [r7, #3]
 80071b0:	460b      	mov	r3, r1
 80071b2:	70bb      	strb	r3, [r7, #2]
 80071b4:	4613      	mov	r3, r2
 80071b6:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80071b8:	2300      	movs	r3, #0
 80071ba:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80071bc:	2300      	movs	r3, #0
 80071be:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 80071c6:	78bb      	ldrb	r3, [r7, #2]
 80071c8:	883a      	ldrh	r2, [r7, #0]
 80071ca:	78f9      	ldrb	r1, [r7, #3]
 80071cc:	f7fa fdbf 	bl	8001d4e <HAL_PCD_EP_Open>
 80071d0:	4603      	mov	r3, r0
 80071d2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80071d4:	7bfb      	ldrb	r3, [r7, #15]
 80071d6:	4618      	mov	r0, r3
 80071d8:	f000 f91c 	bl	8007414 <USBD_Get_USB_Status>
 80071dc:	4603      	mov	r3, r0
 80071de:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80071e0:	7bbb      	ldrb	r3, [r7, #14]
}
 80071e2:	4618      	mov	r0, r3
 80071e4:	3710      	adds	r7, #16
 80071e6:	46bd      	mov	sp, r7
 80071e8:	bd80      	pop	{r7, pc}

080071ea <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80071ea:	b580      	push	{r7, lr}
 80071ec:	b084      	sub	sp, #16
 80071ee:	af00      	add	r7, sp, #0
 80071f0:	6078      	str	r0, [r7, #4]
 80071f2:	460b      	mov	r3, r1
 80071f4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80071f6:	2300      	movs	r3, #0
 80071f8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80071fa:	2300      	movs	r3, #0
 80071fc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007204:	78fa      	ldrb	r2, [r7, #3]
 8007206:	4611      	mov	r1, r2
 8007208:	4618      	mov	r0, r3
 800720a:	f7fa fe08 	bl	8001e1e <HAL_PCD_EP_Close>
 800720e:	4603      	mov	r3, r0
 8007210:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007212:	7bfb      	ldrb	r3, [r7, #15]
 8007214:	4618      	mov	r0, r3
 8007216:	f000 f8fd 	bl	8007414 <USBD_Get_USB_Status>
 800721a:	4603      	mov	r3, r0
 800721c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800721e:	7bbb      	ldrb	r3, [r7, #14]
}
 8007220:	4618      	mov	r0, r3
 8007222:	3710      	adds	r7, #16
 8007224:	46bd      	mov	sp, r7
 8007226:	bd80      	pop	{r7, pc}

08007228 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007228:	b580      	push	{r7, lr}
 800722a:	b084      	sub	sp, #16
 800722c:	af00      	add	r7, sp, #0
 800722e:	6078      	str	r0, [r7, #4]
 8007230:	460b      	mov	r3, r1
 8007232:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007234:	2300      	movs	r3, #0
 8007236:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007238:	2300      	movs	r3, #0
 800723a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007242:	78fa      	ldrb	r2, [r7, #3]
 8007244:	4611      	mov	r1, r2
 8007246:	4618      	mov	r0, r3
 8007248:	f7fa fee0 	bl	800200c <HAL_PCD_EP_SetStall>
 800724c:	4603      	mov	r3, r0
 800724e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007250:	7bfb      	ldrb	r3, [r7, #15]
 8007252:	4618      	mov	r0, r3
 8007254:	f000 f8de 	bl	8007414 <USBD_Get_USB_Status>
 8007258:	4603      	mov	r3, r0
 800725a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800725c:	7bbb      	ldrb	r3, [r7, #14]
}
 800725e:	4618      	mov	r0, r3
 8007260:	3710      	adds	r7, #16
 8007262:	46bd      	mov	sp, r7
 8007264:	bd80      	pop	{r7, pc}

08007266 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007266:	b580      	push	{r7, lr}
 8007268:	b084      	sub	sp, #16
 800726a:	af00      	add	r7, sp, #0
 800726c:	6078      	str	r0, [r7, #4]
 800726e:	460b      	mov	r3, r1
 8007270:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007272:	2300      	movs	r3, #0
 8007274:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007276:	2300      	movs	r3, #0
 8007278:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007280:	78fa      	ldrb	r2, [r7, #3]
 8007282:	4611      	mov	r1, r2
 8007284:	4618      	mov	r0, r3
 8007286:	f7fa ff25 	bl	80020d4 <HAL_PCD_EP_ClrStall>
 800728a:	4603      	mov	r3, r0
 800728c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800728e:	7bfb      	ldrb	r3, [r7, #15]
 8007290:	4618      	mov	r0, r3
 8007292:	f000 f8bf 	bl	8007414 <USBD_Get_USB_Status>
 8007296:	4603      	mov	r3, r0
 8007298:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800729a:	7bbb      	ldrb	r3, [r7, #14]
}
 800729c:	4618      	mov	r0, r3
 800729e:	3710      	adds	r7, #16
 80072a0:	46bd      	mov	sp, r7
 80072a2:	bd80      	pop	{r7, pc}

080072a4 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80072a4:	b480      	push	{r7}
 80072a6:	b085      	sub	sp, #20
 80072a8:	af00      	add	r7, sp, #0
 80072aa:	6078      	str	r0, [r7, #4]
 80072ac:	460b      	mov	r3, r1
 80072ae:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80072b6:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80072b8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80072bc:	2b00      	cmp	r3, #0
 80072be:	da0b      	bge.n	80072d8 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80072c0:	78fb      	ldrb	r3, [r7, #3]
 80072c2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80072c6:	68f9      	ldr	r1, [r7, #12]
 80072c8:	4613      	mov	r3, r2
 80072ca:	00db      	lsls	r3, r3, #3
 80072cc:	4413      	add	r3, r2
 80072ce:	009b      	lsls	r3, r3, #2
 80072d0:	440b      	add	r3, r1
 80072d2:	333e      	adds	r3, #62	; 0x3e
 80072d4:	781b      	ldrb	r3, [r3, #0]
 80072d6:	e00b      	b.n	80072f0 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80072d8:	78fb      	ldrb	r3, [r7, #3]
 80072da:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80072de:	68f9      	ldr	r1, [r7, #12]
 80072e0:	4613      	mov	r3, r2
 80072e2:	00db      	lsls	r3, r3, #3
 80072e4:	4413      	add	r3, r2
 80072e6:	009b      	lsls	r3, r3, #2
 80072e8:	440b      	add	r3, r1
 80072ea:	f203 237e 	addw	r3, r3, #638	; 0x27e
 80072ee:	781b      	ldrb	r3, [r3, #0]
  }
}
 80072f0:	4618      	mov	r0, r3
 80072f2:	3714      	adds	r7, #20
 80072f4:	46bd      	mov	sp, r7
 80072f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072fa:	4770      	bx	lr

080072fc <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80072fc:	b580      	push	{r7, lr}
 80072fe:	b084      	sub	sp, #16
 8007300:	af00      	add	r7, sp, #0
 8007302:	6078      	str	r0, [r7, #4]
 8007304:	460b      	mov	r3, r1
 8007306:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007308:	2300      	movs	r3, #0
 800730a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800730c:	2300      	movs	r3, #0
 800730e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007316:	78fa      	ldrb	r2, [r7, #3]
 8007318:	4611      	mov	r1, r2
 800731a:	4618      	mov	r0, r3
 800731c:	f7fa fcf2 	bl	8001d04 <HAL_PCD_SetAddress>
 8007320:	4603      	mov	r3, r0
 8007322:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007324:	7bfb      	ldrb	r3, [r7, #15]
 8007326:	4618      	mov	r0, r3
 8007328:	f000 f874 	bl	8007414 <USBD_Get_USB_Status>
 800732c:	4603      	mov	r3, r0
 800732e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007330:	7bbb      	ldrb	r3, [r7, #14]
}
 8007332:	4618      	mov	r0, r3
 8007334:	3710      	adds	r7, #16
 8007336:	46bd      	mov	sp, r7
 8007338:	bd80      	pop	{r7, pc}

0800733a <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800733a:	b580      	push	{r7, lr}
 800733c:	b086      	sub	sp, #24
 800733e:	af00      	add	r7, sp, #0
 8007340:	60f8      	str	r0, [r7, #12]
 8007342:	607a      	str	r2, [r7, #4]
 8007344:	603b      	str	r3, [r7, #0]
 8007346:	460b      	mov	r3, r1
 8007348:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800734a:	2300      	movs	r3, #0
 800734c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800734e:	2300      	movs	r3, #0
 8007350:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8007352:	68fb      	ldr	r3, [r7, #12]
 8007354:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8007358:	7af9      	ldrb	r1, [r7, #11]
 800735a:	683b      	ldr	r3, [r7, #0]
 800735c:	687a      	ldr	r2, [r7, #4]
 800735e:	f7fa fe0b 	bl	8001f78 <HAL_PCD_EP_Transmit>
 8007362:	4603      	mov	r3, r0
 8007364:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007366:	7dfb      	ldrb	r3, [r7, #23]
 8007368:	4618      	mov	r0, r3
 800736a:	f000 f853 	bl	8007414 <USBD_Get_USB_Status>
 800736e:	4603      	mov	r3, r0
 8007370:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8007372:	7dbb      	ldrb	r3, [r7, #22]
}
 8007374:	4618      	mov	r0, r3
 8007376:	3718      	adds	r7, #24
 8007378:	46bd      	mov	sp, r7
 800737a:	bd80      	pop	{r7, pc}

0800737c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800737c:	b580      	push	{r7, lr}
 800737e:	b086      	sub	sp, #24
 8007380:	af00      	add	r7, sp, #0
 8007382:	60f8      	str	r0, [r7, #12]
 8007384:	607a      	str	r2, [r7, #4]
 8007386:	603b      	str	r3, [r7, #0]
 8007388:	460b      	mov	r3, r1
 800738a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800738c:	2300      	movs	r3, #0
 800738e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007390:	2300      	movs	r3, #0
 8007392:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8007394:	68fb      	ldr	r3, [r7, #12]
 8007396:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800739a:	7af9      	ldrb	r1, [r7, #11]
 800739c:	683b      	ldr	r3, [r7, #0]
 800739e:	687a      	ldr	r2, [r7, #4]
 80073a0:	f7fa fd87 	bl	8001eb2 <HAL_PCD_EP_Receive>
 80073a4:	4603      	mov	r3, r0
 80073a6:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80073a8:	7dfb      	ldrb	r3, [r7, #23]
 80073aa:	4618      	mov	r0, r3
 80073ac:	f000 f832 	bl	8007414 <USBD_Get_USB_Status>
 80073b0:	4603      	mov	r3, r0
 80073b2:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80073b4:	7dbb      	ldrb	r3, [r7, #22]
}
 80073b6:	4618      	mov	r0, r3
 80073b8:	3718      	adds	r7, #24
 80073ba:	46bd      	mov	sp, r7
 80073bc:	bd80      	pop	{r7, pc}

080073be <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80073be:	b580      	push	{r7, lr}
 80073c0:	b082      	sub	sp, #8
 80073c2:	af00      	add	r7, sp, #0
 80073c4:	6078      	str	r0, [r7, #4]
 80073c6:	460b      	mov	r3, r1
 80073c8:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80073d0:	78fa      	ldrb	r2, [r7, #3]
 80073d2:	4611      	mov	r1, r2
 80073d4:	4618      	mov	r0, r3
 80073d6:	f7fa fdb7 	bl	8001f48 <HAL_PCD_EP_GetRxCount>
 80073da:	4603      	mov	r3, r0
}
 80073dc:	4618      	mov	r0, r3
 80073de:	3708      	adds	r7, #8
 80073e0:	46bd      	mov	sp, r7
 80073e2:	bd80      	pop	{r7, pc}

080073e4 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 80073e4:	b480      	push	{r7}
 80073e6:	b083      	sub	sp, #12
 80073e8:	af00      	add	r7, sp, #0
 80073ea:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 80073ec:	4b03      	ldr	r3, [pc, #12]	; (80073fc <USBD_static_malloc+0x18>)
}
 80073ee:	4618      	mov	r0, r3
 80073f0:	370c      	adds	r7, #12
 80073f2:	46bd      	mov	sp, r7
 80073f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073f8:	4770      	bx	lr
 80073fa:	bf00      	nop
 80073fc:	20001bfc 	.word	0x20001bfc

08007400 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8007400:	b480      	push	{r7}
 8007402:	b083      	sub	sp, #12
 8007404:	af00      	add	r7, sp, #0
 8007406:	6078      	str	r0, [r7, #4]

}
 8007408:	bf00      	nop
 800740a:	370c      	adds	r7, #12
 800740c:	46bd      	mov	sp, r7
 800740e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007412:	4770      	bx	lr

08007414 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8007414:	b480      	push	{r7}
 8007416:	b085      	sub	sp, #20
 8007418:	af00      	add	r7, sp, #0
 800741a:	4603      	mov	r3, r0
 800741c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800741e:	2300      	movs	r3, #0
 8007420:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8007422:	79fb      	ldrb	r3, [r7, #7]
 8007424:	2b03      	cmp	r3, #3
 8007426:	d817      	bhi.n	8007458 <USBD_Get_USB_Status+0x44>
 8007428:	a201      	add	r2, pc, #4	; (adr r2, 8007430 <USBD_Get_USB_Status+0x1c>)
 800742a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800742e:	bf00      	nop
 8007430:	08007441 	.word	0x08007441
 8007434:	08007447 	.word	0x08007447
 8007438:	0800744d 	.word	0x0800744d
 800743c:	08007453 	.word	0x08007453
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8007440:	2300      	movs	r3, #0
 8007442:	73fb      	strb	r3, [r7, #15]
    break;
 8007444:	e00b      	b.n	800745e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8007446:	2303      	movs	r3, #3
 8007448:	73fb      	strb	r3, [r7, #15]
    break;
 800744a:	e008      	b.n	800745e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800744c:	2301      	movs	r3, #1
 800744e:	73fb      	strb	r3, [r7, #15]
    break;
 8007450:	e005      	b.n	800745e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8007452:	2303      	movs	r3, #3
 8007454:	73fb      	strb	r3, [r7, #15]
    break;
 8007456:	e002      	b.n	800745e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8007458:	2303      	movs	r3, #3
 800745a:	73fb      	strb	r3, [r7, #15]
    break;
 800745c:	bf00      	nop
  }
  return usb_status;
 800745e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007460:	4618      	mov	r0, r3
 8007462:	3714      	adds	r7, #20
 8007464:	46bd      	mov	sp, r7
 8007466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800746a:	4770      	bx	lr

0800746c <__libc_init_array>:
 800746c:	b570      	push	{r4, r5, r6, lr}
 800746e:	4d0d      	ldr	r5, [pc, #52]	; (80074a4 <__libc_init_array+0x38>)
 8007470:	4c0d      	ldr	r4, [pc, #52]	; (80074a8 <__libc_init_array+0x3c>)
 8007472:	1b64      	subs	r4, r4, r5
 8007474:	10a4      	asrs	r4, r4, #2
 8007476:	2600      	movs	r6, #0
 8007478:	42a6      	cmp	r6, r4
 800747a:	d109      	bne.n	8007490 <__libc_init_array+0x24>
 800747c:	4d0b      	ldr	r5, [pc, #44]	; (80074ac <__libc_init_array+0x40>)
 800747e:	4c0c      	ldr	r4, [pc, #48]	; (80074b0 <__libc_init_array+0x44>)
 8007480:	f000 f82e 	bl	80074e0 <_init>
 8007484:	1b64      	subs	r4, r4, r5
 8007486:	10a4      	asrs	r4, r4, #2
 8007488:	2600      	movs	r6, #0
 800748a:	42a6      	cmp	r6, r4
 800748c:	d105      	bne.n	800749a <__libc_init_array+0x2e>
 800748e:	bd70      	pop	{r4, r5, r6, pc}
 8007490:	f855 3b04 	ldr.w	r3, [r5], #4
 8007494:	4798      	blx	r3
 8007496:	3601      	adds	r6, #1
 8007498:	e7ee      	b.n	8007478 <__libc_init_array+0xc>
 800749a:	f855 3b04 	ldr.w	r3, [r5], #4
 800749e:	4798      	blx	r3
 80074a0:	3601      	adds	r6, #1
 80074a2:	e7f2      	b.n	800748a <__libc_init_array+0x1e>
 80074a4:	08007560 	.word	0x08007560
 80074a8:	08007560 	.word	0x08007560
 80074ac:	08007560 	.word	0x08007560
 80074b0:	08007564 	.word	0x08007564

080074b4 <memcpy>:
 80074b4:	440a      	add	r2, r1
 80074b6:	4291      	cmp	r1, r2
 80074b8:	f100 33ff 	add.w	r3, r0, #4294967295
 80074bc:	d100      	bne.n	80074c0 <memcpy+0xc>
 80074be:	4770      	bx	lr
 80074c0:	b510      	push	{r4, lr}
 80074c2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80074c6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80074ca:	4291      	cmp	r1, r2
 80074cc:	d1f9      	bne.n	80074c2 <memcpy+0xe>
 80074ce:	bd10      	pop	{r4, pc}

080074d0 <memset>:
 80074d0:	4402      	add	r2, r0
 80074d2:	4603      	mov	r3, r0
 80074d4:	4293      	cmp	r3, r2
 80074d6:	d100      	bne.n	80074da <memset+0xa>
 80074d8:	4770      	bx	lr
 80074da:	f803 1b01 	strb.w	r1, [r3], #1
 80074de:	e7f9      	b.n	80074d4 <memset+0x4>

080074e0 <_init>:
 80074e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80074e2:	bf00      	nop
 80074e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80074e6:	bc08      	pop	{r3}
 80074e8:	469e      	mov	lr, r3
 80074ea:	4770      	bx	lr

080074ec <_fini>:
 80074ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80074ee:	bf00      	nop
 80074f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80074f2:	bc08      	pop	{r3}
 80074f4:	469e      	mov	lr, r3
 80074f6:	4770      	bx	lr
